{
  "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "identityRegistry_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "compliance_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "onchainID_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "_isFrozen",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "AddressFrozen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_compliance",
          "type": "address"
        }
      ],
      "name": "ComplianceAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_identityRegistry",
          "type": "address"
        }
      ],
      "name": "IdentityRegistryAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_lostWallet",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newWallet",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_investorOnchainID",
          "type": "address"
        }
      ],
      "name": "RecoverySuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "TokensFrozen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "TokensUnfrozen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newOnchainID",
          "type": "address"
        }
      ],
      "name": "UpdatedOnchainID",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AGENT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "batchBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "fromList",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "toList",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "batchForcedTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "batchFreezePartialTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "toList",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "batchMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "freeze",
          "type": "bool[]"
        }
      ],
      "name": "batchSetAddressFrozen",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "toList",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "batchTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "fromList",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "toList",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "batchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "batchUnfreezePartialTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compliance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "forcedTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "freezePartialTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getFrozenTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identityRegistry",
      "outputs": [
        {
          "internalType": "contract IIdentityRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isFrozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onchainID",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lostWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "investorOnchainID",
          "type": "address"
        }
      ],
      "name": "recoveryAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "freeze",
          "type": "bool"
        }
      ],
      "name": "setAddressFrozen",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newCompliance",
          "type": "address"
        }
      ],
      "name": "setCompliance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newIdentityRegistry",
          "type": "address"
        }
      ],
      "name": "setIdentityRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "onchainID_",
          "type": "address"
        }
      ],
      "name": "setOnchainID",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unfreezePartialTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xb20b485d006af18567f043bc275795d88fed586f3eaed0ad49b8e35c0f23122b",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "transactionIndex": 0,
    "gasUsed": "2850615",
    "logsBloom": "0x
    "blockHash": "0x79543b31de941634c79dcef9b5909a7efd3eca138b1281968953d65ff5c7e7d9",
    "transactionHash": "0xb20b485d006af18567f043bc275795d88fed586f3eaed0ad49b8e35c0f23122b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11,
        "transactionHash": "0xb20b485d006af18567f043bc275795d88fed586f3eaed0ad49b8e35c0f23122b",
        "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x79543b31de941634c79dcef9b5909a7efd3eca138b1281968953d65ff5c7e7d9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 11,
        "transactionHash": "0xb20b485d006af18567f043bc275795d88fed586f3eaed0ad49b8e35c0f23122b",
        "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x79543b31de941634c79dcef9b5909a7efd3eca138b1281968953d65ff5c7e7d9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 11,
        "transactionHash": "0xb20b485d006af18567f043bc275795d88fed586f3eaed0ad49b8e35c0f23122b",
        "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xcab5a0bfe0b79d2c4b1c2e02599fa044d115b7511f9659307cb4276950967709",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x79543b31de941634c79dcef9b5909a7efd3eca138b1281968953d65ff5c7e7d9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 11,
        "transactionHash": "0xb20b485d006af18567f043bc275795d88fed586f3eaed0ad49b8e35c0f23122b",
        "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
        "topics": [
          "0x2de35142b19ed5a07796cf30791959c592018f70b1d2d7c460eef8ffe713692b"
        ],
        "data": "0x0000000000000000000000005fc8d32690cc91d4c39d9d3abcbd16989f875707",
        "logIndex": 3,
        "blockHash": "0x79543b31de941634c79dcef9b5909a7efd3eca138b1281968953d65ff5c7e7d9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 11,
        "transactionHash": "0xb20b485d006af18567f043bc275795d88fed586f3eaed0ad49b8e35c0f23122b",
        "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
        "topics": [
          "0xd2be862d755bca7e0d39772b2cab3a5578da9c285f69199f4c063c2294a7f36c",
          "0x000000000000000000000000cf7ed3acca5a467e9e704c703e8d87f634fb0fc9"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x79543b31de941634c79dcef9b5909a7efd3eca138b1281968953d65ff5c7e7d9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 11,
        "transactionHash": "0xb20b485d006af18567f043bc275795d88fed586f3eaed0ad49b8e35c0f23122b",
        "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
        "topics": [
          "0x7f3a888862559648ec01d97deb7b5012bff86dc91e654a1de397170db40e35b6",
          "0x000000000000000000000000dc64a140aa3e981100a9beca4e685f962f0cf6c9"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x79543b31de941634c79dcef9b5909a7efd3eca138b1281968953d65ff5c7e7d9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 11,
        "transactionHash": "0xb20b485d006af18567f043bc275795d88fed586f3eaed0ad49b8e35c0f23122b",
        "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
        "topics": [
          "0xb940e1b0e9139123c237455ad6e58e547d9c648af37c0a5d7fa9a885a5adf50f",
          "0x00000000000000000000000034b40ba116d5dec75548a9e9a8f15411461e8c70"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x79543b31de941634c79dcef9b5909a7efd3eca138b1281968953d65ff5c7e7d9"
      }
    ],
    "blockNumber": 11,
    "cumulativeGasUsed": "2850615",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "ERC-3643",
    "TREX",
    "6",
    "0x34B40BA116d5Dec75548a9e9A8f15411461E8c70"
  ],
  "numDeployments": 1,
  "solcInputHash": "d310b4fa677a3832b165feff486fc26b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identityRegistry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"compliance_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"onchainID_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_isFrozen\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"AddressFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_compliance\",\"type\":\"address\"}],\"name\":\"ComplianceAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_identityRegistry\",\"type\":\"address\"}],\"name\":\"IdentityRegistryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_lostWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_investorOnchainID\",\"type\":\"address\"}],\"name\":\"RecoverySuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensUnfrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOnchainID\",\"type\":\"address\"}],\"name\":\"UpdatedOnchainID\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AGENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"fromList\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"toList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchForcedTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchFreezePartialTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"toList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"freeze\",\"type\":\"bool[]\"}],\"name\":\"batchSetAddressFrozen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"toList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"fromList\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"toList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchUnfreezePartialTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compliance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"forcedTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"freezePartialTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getFrozenTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityRegistry\",\"outputs\":[{\"internalType\":\"contract IIdentityRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onchainID\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lostWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"investorOnchainID\",\"type\":\"address\"}],\"name\":\"recoveryAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"setAddressFrozen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCompliance\",\"type\":\"address\"}],\"name\":\"setCompliance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newIdentityRegistry\",\"type\":\"address\"}],\"name\":\"setIdentityRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onchainID_\",\"type\":\"address\"}],\"name\":\"setOnchainID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unfreezePartialTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the allowance of tokens that an owner has allowed a spender to spend.\",\"params\":{\"owner\":\"The address of the owner.\",\"spender\":\"The address of the spender.\"}},\"approve(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to be spent\",\"spender\":\"The address of the account allowed to spend the tokens\"},\"returns\":{\"_0\":\"A boolean that indicates if the operation was successful.\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account.\"},\"returns\":{\"_0\":\"uint256 The balance of the specified account.\"}},\"batchBurn(address[],uint256[])\":{\"details\":\"Perform a batch burn of tokens.\",\"params\":{\"accounts\":\"An array of addresses from which to burn tokens.\",\"amounts\":\"An array of amounts to burn.\"}},\"batchForcedTransfer(address[],address[],uint256[])\":{\"details\":\"Perform a batch forced transfer of tokens.\",\"params\":{\"amounts\":\"An array of amounts to transfer.\",\"fromList\":\"An array of sender addresses.\",\"toList\":\"An array of receiver addresses.\"}},\"batchFreezePartialTokens(address[],uint256[])\":{\"details\":\"Perform a batch freezing of partial tokens from multiple addresses.\",\"params\":{\"accounts\":\"An array of addresses from which to freeze tokens.\",\"amounts\":\"An array of amounts to freeze.\"}},\"batchMint(address[],uint256[])\":{\"details\":\"Perform a batch minting of tokens.\",\"params\":{\"amounts\":\"An array of amounts to mint.\",\"toList\":\"An array of receiver addresses.\"}},\"batchSetAddressFrozen(address[],bool[])\":{\"details\":\"Perform a batch freezing / unfreezing of addresses.\",\"params\":{\"accounts\":\"An array of addresses to freeze.\",\"freeze\":\"An array of boolean values indicating whether to freeze the corresponding address.\"}},\"batchTransfer(address[],uint256[])\":{\"params\":{\"amounts\":\"An array of amounts to transfer.\",\"toList\":\"An array of receiver addresses.\"}},\"batchTransferFrom(address[],address[],uint256[])\":{\"details\":\"Perform a batch forced transfer of tokens.\",\"params\":{\"amounts\":\"An array of amounts to transfer.\",\"fromList\":\"An array of sender addresses.\",\"toList\":\"An array of receiver addresses.\"}},\"batchUnfreezePartialTokens(address[],uint256[])\":{\"details\":\"Perform a batch unfreezing of partial tokens from multiple addresses.\",\"params\":{\"accounts\":\"An array of addresses from which to unfreeze tokens.\",\"amounts\":\"An array of amounts to unfreeze.\"}},\"burn(address,uint256)\":{\"params\":{\"account\":\"The address from which the tokens will be burned\",\"amount\":\"The number of tokens to be burned\"}},\"compliance()\":{\"details\":\"Returns the current Compliance contract linked to the token.\"},\"constructor\":{\"details\":\"the constructor initiates the token contract _msgSender() is set automatically as the owner of the smart contract\",\"params\":{\"compliance_\":\"the address of the compliance contract linked to the token\",\"decimals_\":\"the decimals of the token\",\"identityRegistry_\":\"the address of the Identity registry linked to the token\",\"name_\":\"the name of the token\",\"onchainID_\":\"the address of the onchainID of the token emits an `UpdatedTokenInformation` event emits an `IdentityRegistryAdded` event emits a `ComplianceAdded` event\",\"symbol_\":\"the symbol of the token\"}},\"decimals()\":{\"details\":\"Returns the number of decimals the token uses.\"},\"decreaseAllowance(address,uint256)\":{\"params\":{\"_subtractedValue\":\"The decrease in allowance\",\"spender\":\"The address of the account allowed to spend the tokens\"},\"returns\":{\"_0\":\"A boolean that indicates if the operation was successful.\"}},\"forcedTransfer(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to be transferred\",\"from\":\"The address from which the tokens will be transferred\",\"to\":\"The address to which the tokens will be transferred\"},\"returns\":{\"_0\":\"Returns true if the transfer was successful, otherwise false\"}},\"freezePartialTokens(address,uint256)\":{\"params\":{\"account\":\"The account in which the tokens will be frozen\",\"amount\":\"The amount of tokens to be frozen\"}},\"getFrozenTokens(address)\":{\"details\":\"Returns the number of frozen tokens of an address.\",\"params\":{\"account\":\"The address to check.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"identityRegistry()\":{\"details\":\"Returns the current Identity Registry contract linked to the token.\"},\"increaseAllowance(address,uint256)\":{\"params\":{\"_addedValue\":\"The increase in allowance\",\"spender\":\"The address of the account allowed to spend the tokens\"},\"returns\":{\"_0\":\"A boolean that indicates if the operation was successful.\"}},\"isFrozen(address)\":{\"details\":\"Returns whether an address is frozen.\",\"params\":{\"account\":\"The address to check.\"}},\"mint(address,uint256)\":{\"params\":{\"_to\":\"The address that will receive the minted tokens\",\"amount\":\"The number of tokens to be minted\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"onchainID()\":{\"details\":\"Returns the onchainID of the token.\"},\"pause()\":{\"details\":\"Can only be called by an agent of the contract\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"recoveryAddress(address,address,address)\":{\"details\":\"Recover tokens from a lost wallet and transfer them to a new wallet. Can only be called by an agent of the contract.\",\"params\":{\"investorOnchainID\":\"The onchainID of the investor.\",\"lostWallet\":\"The address of the lost wallet.\",\"newWallet\":\"The address of the new wallet.\"},\"returns\":{\"_0\":\"true if the recovery is successful.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setAddressFrozen(address,bool)\":{\"params\":{\"account\":\"The address to be frozen or unfrozen\",\"freeze\":\"The boolean value indicating whether to freeze (true) or unfreeze (false) the account\"}},\"setCompliance(address)\":{\"params\":{\"newCompliance\":\"The address of the new Compliance contract\"}},\"setIdentityRegistry(address)\":{\"params\":{\"newIdentityRegistry\":\"The address of the new Identity Registry contract\"}},\"setOnchainID(address)\":{\"details\":\"Set the onchainID of a token. Can only be called by an owner of the contract.\",\"params\":{\"onchainID_\":\"The address of the onchainID.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the total supply of the token.\"},\"transfer(address,uint256)\":{\"details\":\"Transfer tokens to another address. Requires that the _msgSender() and to addresses are not frozen and that the value should not exceed available balance.\",\"params\":{\"amount\":\"The number of tokens to transfer.\",\"to\":\"The address of the receiver.\"},\"returns\":{\"_0\":\"true if the transfer is successful.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"ERC-20 overridden function that include logic to check for trade validityTransfer tokens from one address to another. Requires that the `from` and `to` addresses are not frozen and that the value should not exceed available balance.\",\"params\":{\"amount\":\"The number of tokens to transfer.\",\"from\":\"The address of the sender.\",\"to\":\"The address of the receiver.\"},\"returns\":{\"_0\":\"true if the transfer is successful.\"}},\"unfreezePartialTokens(address,uint256)\":{\"params\":{\"account\":\"The account from which the tokens will be unfrozen\",\"amount\":\"The amount of tokens to be unfrozen\"}},\"unpause()\":{\"details\":\"Can only be called by an agent of the contract\"},\"version()\":{\"details\":\"Returns the version of the token.\"}},\"stateVariables\":{\"_balances\":{\"details\":\"ERC20 basic variables\"},\"_compliance\":{\"details\":\"Compliance contract linked to the onchain validator system\"},\"_frozen\":{\"details\":\"Variables of freeze and pause functions\"},\"_identityRegistry\":{\"details\":\"Identity Registry contract used by the onchain validator system\"},\"_name\":{\"details\":\"Token information\"}},\"title\":\"ERC-3643 - T-Rex Token (Version RAPTOR-5.0.0)\",\"version\":1},\"userdoc\":{\"events\":{\"AddressFrozen(address,bool,address)\":{\"notice\":\"this event is emitted when the wallet of an investor is frozen or unfrozen  the event is emitted by setAddressFrozen and batchSetAddressFrozen functions  `_userAddress` is the wallet of the investor that is concerned by the freezing status  `_isFrozen` is the freezing status of the wallet  if `_isFrozen` equals `true` the wallet is frozen after emission of the event  if `_isFrozen` equals `false` the wallet is unfrozen after emission of the event  `_owner` is the address of the agent who called the function to freeze the wallet\"},\"ComplianceAdded(address)\":{\"notice\":\"this event is emitted when the Compliance has been set for the token  the event is emitted by the token constructor and by the setCompliance function  `_compliance` is the address of the Compliance contract of the token\"},\"IdentityRegistryAdded(address)\":{\"notice\":\"this event is emitted when the IdentityRegistry has been set for the token  the event is emitted by the token constructor and by the setIdentityRegistry function  `_identityRegistry` is the address of the Identity Registry of the token\"},\"RecoverySuccess(address,address,address)\":{\"notice\":\"this event is emitted when an investor successfully recovers his tokens  the event is emitted by the recoveryAddress function  `_lostWallet` is the address of the wallet that the investor lost access to  `_newWallet` is the address of the wallet that the investor provided for the recovery  `_investorOnchainID` is the address of the onchainID of the investor who asked for a recovery\"},\"TokensFrozen(address,uint256)\":{\"notice\":\"this event is emitted when a certain amount of tokens is frozen on a wallet  the event is emitted by freezePartialTokens and batchFreezePartialTokens functions  `_userAddress` is the wallet of the investor that is concerned by the freezing status  `_amount` is the amount of tokens that are frozen\"},\"TokensUnfrozen(address,uint256)\":{\"notice\":\"this event is emitted when a certain amount of tokens is unfrozen on a wallet  the event is emitted by unfreezePartialTokens and batchUnfreezePartialTokens functions  `_userAddress` is the wallet of the investor that is concerned by the freezing status  `_amount` is the amount of tokens that are unfrozen\"},\"UpdatedOnchainID(address)\":{\"notice\":\"this event is emitted when the onchainID  is updated.  the event is emitted by the token init function and by the setOnchainID function  `_newOnchainID` is the address of the onchainID of the token\"}},\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Approve `amount` tokens to be spent by `spender`\"},\"balanceOf(address)\":{\"notice\":\"Get the balance of a specified account.\"},\"burn(address,uint256)\":{\"notice\":\"Burns tokens from a specified address\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"Decrease the allowance provided to `spender` by the caller\"},\"forcedTransfer(address,address,uint256)\":{\"notice\":\"Executes a forced transfer of tokens from one address to another\"},\"freezePartialTokens(address,uint256)\":{\"notice\":\"Freezes a specified amount of tokens in a specified account\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Increase the allowance provided to `spender` by the caller\"},\"mint(address,uint256)\":{\"notice\":\"Mints new tokens and assigns them to a specified address\"},\"pause()\":{\"notice\":\"Pause all token operations\"},\"setAddressFrozen(address,bool)\":{\"notice\":\"Freezes or unfreezes a specified address\"},\"setCompliance(address)\":{\"notice\":\"Sets the Compliance contract address\"},\"setIdentityRegistry(address)\":{\"notice\":\"Sets the Identity Registry contract address\"},\"setOnchainID(address)\":{\"notice\":\"Emits an UpdatedOnchainID event.\"},\"transfer(address,uint256)\":{\"notice\":\"ERC-20 overridden function that include logic to check for trade validity.\"},\"unfreezePartialTokens(address,uint256)\":{\"notice\":\"Unfreezes a specified amount of tokens in a specified account\"},\"unpause()\":{\"notice\":\"Unpause all token operations\"}},\"notice\":\"An ERC-3643 compliant token with onchain validators and compliance checks.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/Token.sol\":\"Token\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"./IIdentity.sol\\\";\\n\\ninterface IClaimIssuer is IIdentity {\\n\\n    /**\\n     * @dev Emitted when a claim is revoked.\\n     *\\n     * Specification: MUST be triggered when revoking a claim.\\n     */\\n    event ClaimRevoked(bytes indexed signature);\\n\\n    /**\\n     * @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\\n     * @notice will fetch the claim from the identity contract (unsafe).\\n     * @param _claimId the id of the claim\\n     * @param _identity the address of the identity contract\\n     * @return isRevoked true when the claim is revoked\\n     */\\n    function revokeClaim(bytes32 _claimId, address _identity) external returns(bool);\\n\\n    /**\\n     * @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\\n     * @param signature the signature of the claim\\n     */\\n    function revokeClaimBySignature(bytes calldata signature) external;\\n\\n    /**\\n     * @dev Returns revocation status of a claim.\\n     * @param _sig the signature of the claim\\n     * @return isRevoked true if the claim is revoked and false otherwise\\n     */\\n    function isClaimRevoked(bytes calldata _sig) external view returns (bool);\\n\\n    /**\\n     * @dev Checks if a claim is valid.\\n     * @param _identity the identity contract related to the claim\\n     * @param claimTopic the claim topic of the claim\\n     * @param sig the signature of the claim\\n     * @param data the data field of the claim\\n     * @return claimValid true if the claim is valid, false otherwise\\n     */\\n    function isClaimValid(\\n        IIdentity _identity,\\n        uint256 claimTopic,\\n        bytes calldata sig,\\n        bytes calldata data)\\n    external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3a12f842236b7ff3579bbd245fb0b243f77e98cd721ea165d679324a099af20d\",\"license\":\"GPL-3.0\"},\"@onchain-id/solidity/contracts/interface/IERC734.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev interface of the ERC734 (Key Holder) standard as defined in the EIP.\\n */\\ninterface IERC734 {\\n\\n    /**\\n     * @dev Emitted when an execution request was approved.\\n     *\\n     * Specification: MUST be triggered when approve was successfully called.\\n     */\\n    event Approved(uint256 indexed executionId, bool approved);\\n\\n    /**\\n     * @dev Emitted when an execute operation was approved and successfully performed.\\n     *\\n     * Specification: MUST be triggered when approve was called and the execution was successfully approved.\\n     */\\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n    /**\\n     * @dev Emitted when an execution request was performed via `execute`.\\n     *\\n     * Specification: MUST be triggered when execute was successfully called.\\n     */\\n    event ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n    /**\\n     * @dev Emitted when an execute operation was called and failed\\n     *\\n     * Specification: MUST be triggered when execute call failed\\n     */\\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n    /**\\n     * @dev Emitted when a key was added to the Identity.\\n     *\\n     * Specification: MUST be triggered when addKey was successfully called.\\n     */\\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n\\n    /**\\n     * @dev Emitted when a key was removed from the Identity.\\n     *\\n     * Specification: MUST be triggered when removeKey was successfully called.\\n     */\\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n\\n    /**\\n     * @dev Adds a _key to the identity. The _purpose specifies the purpose of the key.\\n     *\\n     * Triggers Event: `KeyAdded`\\n     *\\n     * Specification: MUST only be done by keys of purpose 1, or the identity\\n     * itself. If it's the identity itself, the approval process will determine its approval.\\n     */\\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external returns (bool success);\\n\\n    /**\\n    * @dev Approves an execution.\\n    *\\n    * Triggers Event: `Approved`\\n    * Triggers on execution successful Event: `Executed`\\n    * Triggers on execution failure Event: `ExecutionFailed`\\n    */\\n    function approve(uint256 _id, bool _approve) external returns (bool success);\\n\\n    /**\\n     * @dev Removes _purpose for _key from the identity.\\n     *\\n     * Triggers Event: `KeyRemoved`\\n     *\\n     * Specification: MUST only be done by keys of purpose 1, or the identity itself.\\n     * If it's the identity itself, the approval process will determine its approval.\\n     */\\n    function removeKey(bytes32 _key, uint256 _purpose) external returns (bool success);\\n\\n    /**\\n     * @dev Passes an execution instruction to an ERC734 identity.\\n     * How the execution is handled is up to the identity implementation:\\n     * An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to\\n     * approve this execution.\\n     * Execute COULD be used as the only accessor for `addKey` and `removeKey`.\\n     *\\n     * Triggers Event: ExecutionRequested\\n     * Triggers on direct execution Event: Executed\\n     */\\n    function execute(address _to, uint256 _value, bytes calldata _data) external payable returns (uint256 executionId);\\n\\n    /**\\n     * @dev Returns the full key data, if present in the identity.\\n     */\\n    function getKey(bytes32 _key) external view returns (uint256[] memory purposes, uint256 keyType, bytes32 key);\\n\\n    /**\\n     * @dev Returns the list of purposes associated with a key.\\n     */\\n    function getKeyPurposes(bytes32 _key) external view returns(uint256[] memory _purposes);\\n\\n    /**\\n     * @dev Returns an array of public key bytes32 held by this identity.\\n     */\\n    function getKeysByPurpose(uint256 _purpose) external view returns (bytes32[] memory keys);\\n\\n    /**\\n     * @dev Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE.\\n     */\\n    function keyHasPurpose(bytes32 _key, uint256 _purpose) external view returns (bool exists);\\n}\\n\",\"keccak256\":\"0x8c8a5a7951ee25569288c0c6662b59599deec7d0f2fcb74c8f80a8fd9354e8af\",\"license\":\"GPL-3.0\"},\"@onchain-id/solidity/contracts/interface/IERC735.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev interface of the ERC735 (Claim Holder) standard as defined in the EIP.\\n */\\ninterface IERC735 {\\n\\n    /**\\n     * @dev Emitted when a claim was added.\\n     *\\n     * Specification: MUST be triggered when a claim was successfully added.\\n     */\\n    event ClaimAdded(\\n        bytes32 indexed claimId,\\n        uint256 indexed topic,\\n        uint256 scheme,\\n        address indexed issuer,\\n        bytes signature,\\n        bytes data,\\n        string uri);\\n\\n    /**\\n     * @dev Emitted when a claim was removed.\\n     *\\n     * Specification: MUST be triggered when removeClaim was successfully called.\\n     */\\n    event ClaimRemoved(\\n        bytes32 indexed claimId,\\n        uint256 indexed topic,\\n        uint256 scheme,\\n        address indexed issuer,\\n        bytes signature,\\n        bytes data,\\n        string uri);\\n\\n    /**\\n     * @dev Emitted when a claim was changed.\\n     *\\n     * Specification: MUST be triggered when addClaim was successfully called on an existing claimId.\\n     */\\n    event ClaimChanged(\\n        bytes32 indexed claimId,\\n        uint256 indexed topic,\\n        uint256 scheme,\\n        address indexed issuer,\\n        bytes signature,\\n        bytes data,\\n        string uri);\\n\\n    /**\\n     * @dev Add or update a claim.\\n     *\\n     * Triggers Event: `ClaimAdded`, `ClaimChanged`\\n     *\\n     * Specification: Add or update a claim from an issuer.\\n     *\\n     * _signature is a signed message of the following structure:\\n     * `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`.\\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`.\\n     */\\n    function addClaim(\\n        uint256 _topic,\\n        uint256 _scheme,\\n        address issuer,\\n        bytes calldata _signature,\\n        bytes calldata _data,\\n        string calldata _uri)\\n    external returns (bytes32 claimRequestId);\\n\\n    /**\\n     * @dev Removes a claim.\\n     *\\n     * Triggers Event: `ClaimRemoved`\\n     *\\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\\n     */\\n    function removeClaim(bytes32 _claimId) external returns (bool success);\\n\\n    /**\\n     * @dev Get a claim by its ID.\\n     *\\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\\n     */\\n    function getClaim(bytes32 _claimId)\\n    external view returns(\\n        uint256 topic,\\n        uint256 scheme,\\n        address issuer,\\n        bytes memory signature,\\n        bytes memory data,\\n        string memory uri);\\n\\n    /**\\n     * @dev Returns an array of claim IDs by topic.\\n     */\\n    function getClaimIdsByTopic(uint256 _topic) external view returns(bytes32[] memory claimIds);\\n}\\n\",\"keccak256\":\"0xaaea6f3ecdc5f30e795e07aacdfc1b177741ef174910e943e96f6de7a8db6efb\",\"license\":\"GPL-3.0\"},\"@onchain-id/solidity/contracts/interface/IIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC734.sol\\\";\\nimport \\\"./IERC735.sol\\\";\\n\\n// solhint-disable-next-line no-empty-blocks\\ninterface IIdentity is IERC734, IERC735 {\\n    /**\\n     * @dev Checks if a claim is valid.\\n     * @param _identity the identity contract related to the claim\\n     * @param claimTopic the claim topic of the claim\\n     * @param sig the signature of the claim\\n     * @param data the data field of the claim\\n     * @return claimValid true if the claim is valid, false otherwise\\n     */\\n    function isClaimValid(\\n        IIdentity _identity,\\n        uint256 claimTopic,\\n        bytes calldata sig,\\n        bytes calldata data)\\n    external view returns (bool);\\n}\\n\",\"keccak256\":\"0x206c93ed62a48802edcad87e229f53c74817349a49f5ef21ea4780ab27b39cdf\",\"license\":\"GPL-3.0\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x48771281a69d34c4ca41a092e82ebedd783ed5540b3098c97b978345f0257b54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/compliance/interface/ICompliance.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface ICompliance {\\r\\n    /**\\r\\n     *  this event is emitted when a token has been bound to the compliance contract\\r\\n     *  the event is emitted by the bindToken function\\r\\n     *  `_token` is the address of the token to bind\\r\\n     */\\r\\n    event TokenBound(address _token);\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when a token has been unbound from the compliance contract\\r\\n     *  the event is emitted by the unbindToken function\\r\\n     *  `_token` is the address of the token to unbind\\r\\n     */\\r\\n    event TokenUnbound(address _token);\\r\\n\\r\\n    /**\\r\\n     *  @dev binds a token to the compliance contract\\r\\n     *  @param _token address of the token to bind\\r\\n     *  Emits a TokenBound event\\r\\n     */\\r\\n    function bindToken(address _token) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev unbinds a token from the compliance contract\\r\\n     *  @param _token address of the token to unbind\\r\\n     *  Emits a TokenUnbound event\\r\\n     */\\r\\n    function unbindToken(address _token) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev function called whenever tokens are transferred\\r\\n     *  from one wallet to another\\r\\n     *  this function can update state variables in the compliance contract\\r\\n     *  these state variables being used by `canTransfer` to decide if a transfer\\r\\n     *  is compliant or not depending on the values stored in these state variables and on\\r\\n     *  the parameters of the compliance smart contract\\r\\n     *  @param _from The address of the sender\\r\\n     *  @param _to The address of the receiver\\r\\n     *  @param _amount The amount of tokens involved in the transfer\\r\\n     */\\r\\n    function transferred(address _from, address _to, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev function called whenever tokens are created\\r\\n     *  on a wallet\\r\\n     *  this function can update state variables in the compliance contract\\r\\n     *  these state variables being used by `canTransfer` to decide if a transfer\\r\\n     *  is compliant or not depending on the values stored in these state variables and on\\r\\n     *  the parameters of the compliance smart contract\\r\\n     *  @param _to The address of the receiver\\r\\n     *  @param _amount The amount of tokens involved in the transfer\\r\\n     */\\r\\n    function created(address _to, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev function called whenever tokens are destroyed\\r\\n     *  this function can update state variables in the compliance contract\\r\\n     *  these state variables being used by `canTransfer` to decide if a transfer\\r\\n     *  is compliant or not depending on the values stored in these state variables and on\\r\\n     *  the parameters of the compliance smart contract\\r\\n     *  @param _from The address of the receiver\\r\\n     *  @param _amount The amount of tokens involved in the transfer\\r\\n     */\\r\\n    function destroyed(address _from, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns true if the address given corresponds to a token that is bound with the Compliance contract\\r\\n     *  @param _token address of the token\\r\\n     */\\r\\n    function isTokenBound(address _token) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     *  @dev checks that the transfer is compliant.\\r\\n     *  default compliance always returns true\\r\\n     *  READ ONLY FUNCTION, this function cannot be used to increment\\r\\n     *  counters, emit events, ...\\r\\n     *  @param _from The address of the sender\\r\\n     *  @param _to The address of the receiver\\r\\n     *  @param _amount The amount of tokens involved in the transfer\\r\\n     */\\r\\n    function canTransfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xf0d8864da7d223598fcaa0e7c3ae464ef21be0b016c62bfd8e38e51def432607\",\"license\":\"GPL-3.0\"},\"contracts/registry/interface/IClaimIssuersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\\\";\\r\\n\\r\\ninterface IClaimIssuersRegistry {\\r\\n    /**\\r\\n     *  this event is emitted when a claim issuer is added in the registry.\\r\\n     *  the event is emitted by the addClaimIssuer function\\r\\n     *  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract\\r\\n     *  `claimTopics` is the set of claims that the claim issuer is allowed to emit\\r\\n     */\\r\\n    event ClaimIssuerAdded(\\r\\n        IClaimIssuer indexed claimIssuer,\\r\\n        uint256[] claimTopics\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when a claim issuer is removed from the registry.\\r\\n     *  the event is emitted by the removeClaimIssuer function\\r\\n     *  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract\\r\\n     */\\r\\n    event ClaimIssuerRemoved(IClaimIssuer indexed claimIssuer);\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when the set of claim topics is changed for a given claim issuer.\\r\\n     *  the event is emitted by the updateIssuerClaimTopics function\\r\\n     *  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract\\r\\n     *  `claimTopics` is the set of claims that the claim issuer is allowed to emit\\r\\n     */\\r\\n    event ClaimTopicsUpdated(\\r\\n        IClaimIssuer indexed claimIssuer,\\r\\n        uint256[] claimTopics\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  @dev registers a ClaimIssuer contract as claim claim issuer.\\r\\n     *  Requires that a ClaimIssuer contract doesn't already exist\\r\\n     *  Requires that the claimTopics set is not empty\\r\\n     *  Requires that there is no more than 15 claimTopics\\r\\n     *  Requires that there is no more than 50 Claim issuers\\r\\n     *  @param _claimIssuer The ClaimIssuer contract address of the claim claim issuer.\\r\\n     *  @param _claimTopics the set of claim topics that the claim issuer is allowed to emit\\r\\n     *  This function can only be called by the owner of the Claim Issuers Registry contract\\r\\n     *  emits a `ClaimIssuerAdded` event\\r\\n     */\\r\\n    function addClaimIssuer(\\r\\n        IClaimIssuer _claimIssuer,\\r\\n        uint256[] calldata _claimTopics\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Removes the ClaimIssuer contract of a claim claim issuer.\\r\\n     *  Requires that the claim issuer contract to be registered first\\r\\n     *  @param _claimIssuer the claim issuer to remove.\\r\\n     *  This function can only be called by the owner of the Claim Issuers Registry contract\\r\\n     *  emits a `ClaimIssuerRemoved` event\\r\\n     */\\r\\n    function removeClaimIssuer(IClaimIssuer _claimIssuer) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Updates the set of claim topics that a claim issuer is allowed to emit.\\r\\n     *  Requires that this ClaimIssuer contract already exists in the registry\\r\\n     *  Requires that the provided claimTopics set is not empty\\r\\n     *  Requires that there is no more than 15 claimTopics\\r\\n     *  @param _claimIssuer the claim issuer to update.\\r\\n     *  @param _claimTopics the set of claim topics that the claim issuer is allowed to emit\\r\\n     *  This function can only be called by the owner of the Claim Issuers Registry contract\\r\\n     *  emits a `ClaimTopicsUpdated` event\\r\\n     */\\r\\n    function updateIssuerClaimTopics(\\r\\n        IClaimIssuer _claimIssuer,\\r\\n        uint256[] calldata _claimTopics\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Function for getting all the claim claim issuers stored.\\r\\n     *  @return array of all claim issuers registered.\\r\\n     */\\r\\n    function getClaimIssuers() external view returns (IClaimIssuer[] memory);\\r\\n\\r\\n    /**\\r\\n     *  @dev Function for getting all the claim issuer allowed for a given claim topic.\\r\\n     *  @param claimTopic the claim topic to get the claim issuers for.\\r\\n     *  @return array of all claim issuer addresses that are allowed for the given claim topic.\\r\\n     */\\r\\n    function getClaimIssuersForClaimTopic(\\r\\n        uint256 claimTopic\\r\\n    ) external view returns (IClaimIssuer[] memory);\\r\\n\\r\\n    /**\\r\\n     *  @dev Checks if the ClaimIssuer contract is claim\\r\\n     *  @param _issuer the address of the ClaimIssuer contract\\r\\n     *  @return true if the issuer is claim, false otherwise.\\r\\n     */\\r\\n    function isClaimIssuer(IClaimIssuer _issuer) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     *  @dev Function for getting all the claim topic of claim claim issuer\\r\\n     *  Requires the provided ClaimIssuer contract to be registered in the claim issuers registry.\\r\\n     *  @param _claimIssuer the claim issuer concerned.\\r\\n     *  @return The set of claim topics that the claim issuer is allowed to emit\\r\\n     */\\r\\n    function getClaimIssuerClaimTopics(\\r\\n        IClaimIssuer _claimIssuer\\r\\n    ) external view returns (uint256[] memory);\\r\\n\\r\\n    /**\\r\\n     *  @dev Function for checking if the claim claim issuer is allowed\\r\\n     *  to emit a certain claim topic\\r\\n     *  @param _issuer the address of the claim issuer's ClaimIssuer contract\\r\\n     *  @param _claimTopic the Claim Topic that has to be checked to know if the `issuer` is allowed to emit it\\r\\n     *  @return true if the issuer is claim for this claim topic.\\r\\n     */\\r\\n    function hasClaimTopic(\\r\\n        IClaimIssuer _issuer,\\r\\n        uint256 _claimTopic\\r\\n    ) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x36ebccbb89041f7f9f25abcaa7f700d227d4c683dcfc5436a7dfd26bca557dd1\",\"license\":\"GPL-3.0\"},\"contracts/registry/interface/IClaimTopicsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IClaimTopicsRegistry {\\r\\n    /**\\r\\n     *  this event is emitted when a claim topic has been added to the ClaimTopicsRegistry\\r\\n     *  the event is emitted by the 'addClaimTopic' function\\r\\n     *  `claimTopic` is the required claim added to the Claim Topics Registry\\r\\n     */\\r\\n    event ClaimTopicAdded(uint256 indexed claimTopic);\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when a claim topic has been removed from the ClaimTopicsRegistry\\r\\n     *  the event is emitted by the 'removeClaimTopic' function\\r\\n     *  `claimTopic` is the required claim removed from the Claim Topics Registry\\r\\n     */\\r\\n    event ClaimTopicRemoved(uint256 indexed claimTopic);\\r\\n\\r\\n    /**\\r\\n     * @dev Add a claim claim topic (For example: KYC=1, AML=2).\\r\\n     * Only owner can call.\\r\\n     * emits `ClaimTopicAdded` event\\r\\n     * cannot add more than 15 topics for 1 token as adding more could create gas issues\\r\\n     * @param _claimTopic The claim topic index\\r\\n     */\\r\\n    function addClaimTopic(uint256 _claimTopic) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Remove a claim claim topic (For example: KYC=1, AML=2).\\r\\n     *  Only owner can call.\\r\\n     *  emits `ClaimTopicRemoved` event\\r\\n     *  @param _claimTopic The claim topic index\\r\\n     */\\r\\n    function removeClaimTopic(uint256 _claimTopic) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Get the claim claim topics for the security token\\r\\n     *  @return Array of claim claim topics\\r\\n     */\\r\\n    function getClaimTopics() external view returns (uint256[] memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x5354a22fe4706ac81152c7f3f666f9057fde01e68c498f2a4707edf172fdd7a7\",\"license\":\"GPL-3.0\"},\"contracts/registry/interface/IIdentityRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./IClaimIssuersRegistry.sol\\\";\\r\\nimport \\\"./IClaimTopicsRegistry.sol\\\";\\r\\nimport \\\"./IIdentityRegistryStorage.sol\\\";\\r\\n\\r\\nimport \\\"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\\\";\\r\\nimport \\\"@onchain-id/solidity/contracts/interface/IIdentity.sol\\\";\\r\\n\\r\\ninterface IIdentityRegistry {\\r\\n    /**\\r\\n     *  this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry\\r\\n     *  the event is emitted by the IdentityRegistry constructor\\r\\n     *  `claimTopicsRegistry` is the address of the Claim Topics Registry contract\\r\\n     */\\r\\n    event ClaimTopicsRegistrySet(\\r\\n        IClaimTopicsRegistry indexed claimTopicsRegistry\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when the IdentityRegistryStorage has been set for the IdentityRegistry\\r\\n     *  the event is emitted by the IdentityRegistry constructor\\r\\n     *  `identityStorage` is the address of the Identity Registry Storage contract\\r\\n     */\\r\\n    event IdentityStorageSet(IIdentityRegistryStorage indexed identityStorage);\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when the ClaimIssuersRegistry has been set for the IdentityRegistry\\r\\n     *  the event is emitted by the IdentityRegistry constructor\\r\\n     *  `claimIssuersRegistry` is the address of the Claim Issuers Registry contract\\r\\n     */\\r\\n    event ClaimIssuersRegistrySet(\\r\\n        IClaimIssuersRegistry indexed claimIssuersRegistry\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity is registered into the Identity Registry.\\r\\n     *  the event is emitted by the 'registerIdentity' function\\r\\n     *  `investorAddress` is the address of the investor's wallet\\r\\n     *  `identity` is the address of the Identity smart contract (onchainID)\\r\\n     */\\r\\n    event IdentityRegistered(\\r\\n        address indexed investorAddress,\\r\\n        IIdentity indexed identity\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity is removed from the Identity Registry.\\r\\n     *  the event is emitted by the 'deleteIdentity' function\\r\\n     *  `investorAddress` is the address of the investor's wallet\\r\\n     *  `identity` is the address of the Identity smart contract (onchainID)\\r\\n     */\\r\\n    event IdentityRemoved(\\r\\n        address indexed investorAddress,\\r\\n        IIdentity indexed identity\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity has been updated\\r\\n     *  the event is emitted by the 'updateIdentity' function\\r\\n     *  `oldIdentity` is the old Identity contract's address to update\\r\\n     *  `newIdentity` is the new Identity contract's\\r\\n     */\\r\\n    event IdentityUpdated(\\r\\n        IIdentity indexed oldIdentity,\\r\\n        IIdentity indexed newIdentity\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity's country has been updated\\r\\n     *  the event is emitted by the 'updateCountry' function\\r\\n     *  `investorAddress` is the address on which the country has been updated\\r\\n     *  `country` is the numeric code (ISO 3166-1) of the new country\\r\\n     */\\r\\n    event CountryUpdated(\\r\\n        address indexed investorAddress,\\r\\n        uint16 indexed country\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  @dev Register an identity contract corresponding to a user address.\\r\\n     *  Requires that the user doesn't have an identity contract already registered.\\r\\n     *  This function can only be called by a wallet set as agent of the smart contract\\r\\n     *  @param _userAddress The address of the user\\r\\n     *  @param _identity The address of the user's identity contract\\r\\n     *  @param _country The country of the investor\\r\\n     *  emits `IdentityRegistered` event\\r\\n     */\\r\\n    function registerIdentity(\\r\\n        address _userAddress,\\r\\n        IIdentity _identity,\\r\\n        uint16 _country\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Removes an user from the identity registry.\\r\\n     *  Requires that the user have an identity contract already deployed that will be deleted.\\r\\n     *  This function can only be called by a wallet set as agent of the smart contract\\r\\n     *  @param _userAddress The address of the user to be removed\\r\\n     *  emits `IdentityRemoved` event\\r\\n     */\\r\\n    function deleteIdentity(address _userAddress) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Replace the actual identityRegistryStorage contract with a new one.\\r\\n     *  This function can only be called by the wallet set as owner of the smart contract\\r\\n     *  @param _identityRegistryStorage The address of the new Identity Registry Storage\\r\\n     *  emits `IdentityStorageSet` event\\r\\n     */\\r\\n    function setIdentityRegistryStorage(\\r\\n        IIdentityRegistryStorage _identityRegistryStorage\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Replace the actual claimTopicsRegistry contract with a new one.\\r\\n     *  This function can only be called by the wallet set as owner of the smart contract\\r\\n     *  @param _claimTopicsRegistry The address of the new claim Topics Registry\\r\\n     *  emits `ClaimTopicsRegistrySet` event\\r\\n     */\\r\\n    function setClaimTopicsRegistry(\\r\\n        IClaimTopicsRegistry _claimTopicsRegistry\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Replace the actual claimIssuersRegistry contract with a new one.\\r\\n     *  This function can only be called by the wallet set as owner of the smart contract\\r\\n     *  @param _claimIssuersRegistry The address of the new Claim Issuers Registry\\r\\n     *  emits `ClaimIssuersRegistrySet` event\\r\\n     */\\r\\n    function setClaimIssuersRegistry(\\r\\n        IClaimIssuersRegistry _claimIssuersRegistry\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Updates the country corresponding to a user address.\\r\\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\\r\\n     *  This function can only be called by a wallet set as agent of the smart contract\\r\\n     *  @param _userAddress The address of the user\\r\\n     *  @param _country The new country of the user\\r\\n     *  emits `CountryUpdated` event\\r\\n     */\\r\\n    function updateCountry(address _userAddress, uint16 _country) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Updates an identity contract corresponding to a user address.\\r\\n     *  Requires that the user address should be the owner of the identity contract.\\r\\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\\r\\n     *  This function can only be called by a wallet set as agent of the smart contract\\r\\n     *  @param _userAddress The address of the user\\r\\n     *  @param _identity The address of the user's new identity contract\\r\\n     *  emits `IdentityUpdated` event\\r\\n     */\\r\\n    function updateIdentity(address _userAddress, IIdentity _identity) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev function allowing to register identities in batch\\r\\n     *  This function can only be called by a wallet set as agent of the smart contract\\r\\n     *  Requires that none of the users has an identity contract already registered.\\r\\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\\r\\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\r\\n     *  @param _userAddresses The addresses of the users\\r\\n     *  @param _identities The addresses of the corresponding identity contracts\\r\\n     *  @param _countries The countries of the corresponding investors\\r\\n     *  emits _userAddresses.length `IdentityRegistered` events\\r\\n     */\\r\\n    function batchRegisterIdentity(\\r\\n        address[] calldata _userAddresses,\\r\\n        IIdentity[] calldata _identities,\\r\\n        uint16[] calldata _countries\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev This functions checks whether a wallet has its Identity registered or not\\r\\n     *  in the Identity Registry.\\r\\n     *  @param _userAddress The address of the user to be checked.\\r\\n     *  @return 'True' if the address is contained in the Identity Registry, 'false' if not.\\r\\n     */\\r\\n    function contains(address _userAddress) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     *  @dev This functions checks whether an identity contract\\r\\n     *  corresponding to the provided user address has the required claims or not based\\r\\n     *  on the data fetched from claim issuers registry and from the claim topics registry\\r\\n     *  @param _userAddress The address of the user to be verified.\\r\\n     *  @return 'True' if the address is verified, 'false' if not.\\r\\n     */\\r\\n    function isVerified(address _userAddress) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the onchainID of an investor.\\r\\n     *  @param _userAddress The wallet of the investor\\r\\n     */\\r\\n    function identity(address _userAddress) external view returns (IIdentity);\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the country code of an investor.\\r\\n     *  @param _userAddress The wallet of the investor\\r\\n     */\\r\\n    function investorCountry(\\r\\n        address _userAddress\\r\\n    ) external view returns (uint16);\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the IdentityRegistryStorage linked to the current IdentityRegistry.\\r\\n     */\\r\\n    function identityStorage() external view returns (IIdentityRegistryStorage);\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the ClaimIssuersRegistry linked to the current IdentityRegistry.\\r\\n     */\\r\\n    function issuersRegistry() external view returns (IClaimIssuersRegistry);\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the ClaimTopicsRegistry linked to the current IdentityRegistry.\\r\\n     */\\r\\n    function topicsRegistry() external view returns (IClaimTopicsRegistry);\\r\\n}\\r\\n\",\"keccak256\":\"0x336b9143cb5262adf25b607503c5ac56b74fc81d1f663d83318e95a5e3cef309\",\"license\":\"GPL-3.0\"},\"contracts/registry/interface/IIdentityRegistryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@onchain-id/solidity/contracts/interface/IIdentity.sol\\\";\\r\\n\\r\\ninterface IIdentityRegistryStorage {\\r\\n    /// events\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity is registered into the storage contract.\\r\\n     *  the event is emitted by the 'registerIdentity' function\\r\\n     *  `investorAddress` is the address of the investor's wallet\\r\\n     *  `identity` is the address of the Identity smart contract (onchainID)\\r\\n     */\\r\\n    event IdentityStored(\\r\\n        address indexed investorAddress,\\r\\n        IIdentity indexed identity\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity is removed from the storage contract.\\r\\n     *  the event is emitted by the 'deleteIdentity' function\\r\\n     *  `investorAddress` is the address of the investor's wallet\\r\\n     *  `identity` is the address of the Identity smart contract (onchainID)\\r\\n     */\\r\\n    event IdentityUnstored(\\r\\n        address indexed investorAddress,\\r\\n        IIdentity indexed identity\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity has been updated\\r\\n     *  the event is emitted by the 'updateIdentity' function\\r\\n     *  `oldIdentity` is the old Identity contract's address to update\\r\\n     *  `newIdentity` is the new Identity contract's\\r\\n     */\\r\\n    event IdentityModified(\\r\\n        IIdentity indexed oldIdentity,\\r\\n        IIdentity indexed newIdentity\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity's country has been updated\\r\\n     *  the event is emitted by the 'updateCountry' function\\r\\n     *  `investorAddress` is the address on which the country has been updated\\r\\n     *  `country` is the numeric code (ISO 3166-1) of the new country\\r\\n     */\\r\\n    event CountryModified(\\r\\n        address indexed investorAddress,\\r\\n        uint16 indexed country\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity Registry is bound to the storage contract\\r\\n     *  the event is emitted by the 'addIdentityRegistry' function\\r\\n     *  `identityRegistry` is the address of the identity registry added\\r\\n     */\\r\\n    event IdentityRegistryBound(address indexed identityRegistry);\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity Registry is unbound from the storage contract\\r\\n     *  the event is emitted by the 'removeIdentityRegistry' function\\r\\n     *  `identityRegistry` is the address of the identity registry removed\\r\\n     */\\r\\n    event IdentityRegistryUnbound(address indexed identityRegistry);\\r\\n\\r\\n    /// functions\\r\\n\\r\\n    /**\\r\\n     *  @dev adds an identity contract corresponding to a user address in the storage.\\r\\n     *  Requires that the user doesn't have an identity contract already registered.\\r\\n     *  This function can only be called by an address set as agent of the smart contract\\r\\n     *  @param _userAddress The address of the user\\r\\n     *  @param _identity The address of the user's identity contract\\r\\n     *  @param _country The country of the investor\\r\\n     *  emits `IdentityStored` event\\r\\n     */\\r\\n    function addIdentityToStorage(\\r\\n        address _userAddress,\\r\\n        IIdentity _identity,\\r\\n        uint16 _country\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Removes an user from the storage.\\r\\n     *  Requires that the user have an identity contract already deployed that will be deleted.\\r\\n     *  This function can only be called by an address set as agent of the smart contract\\r\\n     *  @param _userAddress The address of the user to be removed\\r\\n     *  emits `IdentityUnstored` event\\r\\n     */\\r\\n    function removeIdentityFromStorage(address _userAddress) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Updates the country corresponding to a user address.\\r\\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\\r\\n     *  This function can only be called by an address set as agent of the smart contract\\r\\n     *  @param _userAddress The address of the user\\r\\n     *  @param _country The new country of the user\\r\\n     *  emits `CountryModified` event\\r\\n     */\\r\\n    function modifyStoredInvestorCountry(\\r\\n        address _userAddress,\\r\\n        uint16 _country\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Updates an identity contract corresponding to a user address.\\r\\n     *  Requires that the user address should be the owner of the identity contract.\\r\\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\\r\\n     *  This function can only be called by an address set as agent of the smart contract\\r\\n     *  @param _userAddress The address of the user\\r\\n     *  @param _identity The address of the user's new identity contract\\r\\n     *  emits `IdentityModified` event\\r\\n     */\\r\\n    function modifyStoredIdentity(\\r\\n        address _userAddress,\\r\\n        IIdentity _identity\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @notice Adds an identity registry as agent of the Identity Registry Storage Contract.\\r\\n     *  This function can only be called by the wallet set as owner of the smart contract\\r\\n     *  This function adds the identity registry to the list of identityRegistries linked to the storage contract\\r\\n     *  cannot bind more than 300 IR to 1 IRS\\r\\n     *  @param _identityRegistry The identity registry address to add.\\r\\n     */\\r\\n    function bindIdentityRegistry(address _identityRegistry) external;\\r\\n\\r\\n    /**\\r\\n     *  @notice Removes an identity registry from being agent of the Identity Registry Storage Contract.\\r\\n     *  This function can only be called by the wallet set as owner of the smart contract\\r\\n     *  This function removes the identity registry from the list of identityRegistries linked to the storage contract\\r\\n     *  @param _identityRegistry The identity registry address to remove.\\r\\n     */\\r\\n    function unbindIdentityRegistry(address _identityRegistry) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the identity registries linked to the storage contract\\r\\n     */\\r\\n    function linkedIdentityRegistries()\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory);\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the onchainID of an investor.\\r\\n     *  @param _userAddress The wallet of the investor\\r\\n     */\\r\\n    function storedIdentity(\\r\\n        address _userAddress\\r\\n    ) external view returns (IIdentity);\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the country code of an investor.\\r\\n     *  @param _userAddress The wallet of the investor\\r\\n     */\\r\\n    function storedInvestorCountry(\\r\\n        address _userAddress\\r\\n    ) external view returns (uint16);\\r\\n}\\r\\n\",\"keccak256\":\"0x8c3b5f11cc5509ee33e63447f2235e42aa81b7656c7d383526a3e7a8adee7cc1\",\"license\":\"GPL-3.0\"},\"contracts/token/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"../registry/interface/IIdentityRegistry.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/// @dev interface\\r\\ninterface IToken is IERC20 {\\r\\n    /// events\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when the onchainID  is updated.\\r\\n     *  the event is emitted by the token init function and by the setOnchainID function\\r\\n     *  `_newOnchainID` is the address of the onchainID of the token\\r\\n     */\\r\\n    event UpdatedOnchainID(address indexed _newOnchainID);\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when the IdentityRegistry has been set for the token\\r\\n     *  the event is emitted by the token constructor and by the setIdentityRegistry function\\r\\n     *  `_identityRegistry` is the address of the Identity Registry of the token\\r\\n     */\\r\\n    event IdentityRegistryAdded(address indexed _identityRegistry);\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when the Compliance has been set for the token\\r\\n     *  the event is emitted by the token constructor and by the setCompliance function\\r\\n     *  `_compliance` is the address of the Compliance contract of the token\\r\\n     */\\r\\n    event ComplianceAdded(address indexed _compliance);\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an investor successfully recovers his tokens\\r\\n     *  the event is emitted by the recoveryAddress function\\r\\n     *  `_lostWallet` is the address of the wallet that the investor lost access to\\r\\n     *  `_newWallet` is the address of the wallet that the investor provided for the recovery\\r\\n     *  `_investorOnchainID` is the address of the onchainID of the investor who asked for a recovery\\r\\n     */\\r\\n    event RecoverySuccess(\\r\\n        address indexed _lostWallet,\\r\\n        address indexed _newWallet,\\r\\n        address indexed _investorOnchainID\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when the wallet of an investor is frozen or unfrozen\\r\\n     *  the event is emitted by setAddressFrozen and batchSetAddressFrozen functions\\r\\n     *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\\r\\n     *  `_isFrozen` is the freezing status of the wallet\\r\\n     *  if `_isFrozen` equals `true` the wallet is frozen after emission of the event\\r\\n     *  if `_isFrozen` equals `false` the wallet is unfrozen after emission of the event\\r\\n     *  `_owner` is the address of the agent who called the function to freeze the wallet\\r\\n     */\\r\\n    event AddressFrozen(\\r\\n        address indexed _userAddress,\\r\\n        bool indexed _isFrozen,\\r\\n        address indexed _owner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when a certain amount of tokens is frozen on a wallet\\r\\n     *  the event is emitted by freezePartialTokens and batchFreezePartialTokens functions\\r\\n     *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\\r\\n     *  `_amount` is the amount of tokens that are frozen\\r\\n     */\\r\\n    event TokensFrozen(address indexed _userAddress, uint256 _amount);\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when a certain amount of tokens is unfrozen on a wallet\\r\\n     *  the event is emitted by unfreezePartialTokens and batchUnfreezePartialTokens functions\\r\\n     *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\\r\\n     *  `_amount` is the amount of tokens that are unfrozen\\r\\n     */\\r\\n    event TokensUnfrozen(address indexed _userAddress, uint256 _amount);\\r\\n\\r\\n    /**\\r\\n     *  @dev sets the onchain ID of the token\\r\\n     *  @param _onchainID the address of the onchain ID to set\\r\\n     *  Only the owner of the token smart contract can call this function\\r\\n     *  emits a `UpdatedTokenInformation` event\\r\\n     */\\r\\n    function setOnchainID(address _onchainID) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev pauses the token contract, when contract is paused investors cannot transfer tokens anymore\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits a `Paused` event\\r\\n     */\\r\\n    function pause() external;\\r\\n\\r\\n    /**\\r\\n     *  @dev unpauses the token contract, when contract is unpaused investors can transfer tokens\\r\\n     *  if their wallet is not blocked & if the amount to transfer is <= to the amount of free tokens\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits an `Unpaused` event\\r\\n     */\\r\\n    function unpause() external;\\r\\n\\r\\n    /**\\r\\n     *  @dev sets an address frozen status for this token.\\r\\n     *  @param _userAddress The address for which to update frozen status\\r\\n     *  @param _freeze Frozen status of the address\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits an `AddressFrozen` event\\r\\n     */\\r\\n    function setAddressFrozen(address _userAddress, bool _freeze) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev freezes token amount specified for given address.\\r\\n     *  @param _userAddress The address for which to update frozen tokens\\r\\n     *  @param _amount Amount of Tokens to be frozen\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits a `TokensFrozen` event\\r\\n     */\\r\\n    function freezePartialTokens(\\r\\n        address _userAddress,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev unfreezes token amount specified for given address\\r\\n     *  @param _userAddress The address for which to update frozen tokens\\r\\n     *  @param _amount Amount of Tokens to be unfrozen\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits a `TokensUnfrozen` event\\r\\n     */\\r\\n    function unfreezePartialTokens(\\r\\n        address _userAddress,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev sets the Identity Registry for the token\\r\\n     *  @param _identityRegistry the address of the Identity Registry to set\\r\\n     *  Only the owner of the token smart contract can call this function\\r\\n     *  emits an `IdentityRegistryAdded` event\\r\\n     */\\r\\n    function setIdentityRegistry(address _identityRegistry) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev sets the compliance contract of the token\\r\\n     *  @param _compliance the address of the compliance contract to set\\r\\n     *  Only the owner of the token smart contract can call this function\\r\\n     *  calls bindToken on the compliance contract\\r\\n     *  emits a `ComplianceAdded` event\\r\\n     */\\r\\n    function setCompliance(address _compliance) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev force a transfer of tokens between 2 whitelisted wallets\\r\\n     *  In case the `from` address has not enough free tokens (unfrozen tokens)\\r\\n     *  but has a total balance higher or equal to the `amount`\\r\\n     *  the amount of frozen tokens is reduced in order to have enough free tokens\\r\\n     *  to proceed the transfer, in such a case, the remaining balance on the `from`\\r\\n     *  account is 100% composed of frozen tokens post-transfer.\\r\\n     *  Require that the `to` address is a verified address,\\r\\n     *  @param _from The address of the sender\\r\\n     *  @param _to The address of the receiver\\r\\n     *  @param _amount The number of tokens to transfer\\r\\n     *  @return `true` if successful and revert if unsuccessful\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_from`\\r\\n     *  emits a `Transfer` event\\r\\n     */\\r\\n    function forcedTransfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     *  @dev mint tokens on a wallet\\r\\n     *  Improved version of default mint method. Tokens can be minted\\r\\n     *  to an address if only it is a verified address as per the security token.\\r\\n     *  @param _to Address to mint the tokens to.\\r\\n     *  @param _amount Amount of tokens to mint.\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits a `Transfer` event\\r\\n     */\\r\\n    function mint(address _to, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev burn tokens on a wallet\\r\\n     *  In case the `account` address has not enough free tokens (unfrozen tokens)\\r\\n     *  but has a total balance higher or equal to the `value` amount\\r\\n     *  the amount of frozen tokens is reduced in order to have enough free tokens\\r\\n     *  to proceed the burn, in such a case, the remaining balance on the `account`\\r\\n     *  is 100% composed of frozen tokens post-transaction.\\r\\n     *  @param _userAddress Address to burn the tokens from.\\r\\n     *  @param _amount Amount of tokens to burn.\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_userAddress`\\r\\n     *  emits a `Transfer` event\\r\\n     */\\r\\n    function burn(address _userAddress, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev recovery function used to force transfer tokens from a\\r\\n     *  lost wallet to a new wallet for an investor.\\r\\n     *  @param _lostWallet the wallet that the investor lost\\r\\n     *  @param _newWallet the newly provided wallet on which tokens have to be transferred\\r\\n     *  @param _investorOnchainID the onchainID of the investor asking for a recovery\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits a `TokensUnfrozen` event if there is some frozen tokens on the lost wallet if the recovery process is successful\\r\\n     *  emits a `Transfer` event if the recovery process is successful\\r\\n     *  emits a `RecoverySuccess` event if the recovery process is successful\\r\\n     *  emits a `RecoveryFails` event if the recovery process fails\\r\\n     */\\r\\n    function recoveryAddress(\\r\\n        address _lostWallet,\\r\\n        address _newWallet,\\r\\n        address _investorOnchainID\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     *  @dev function allowing to issue transfers in batch\\r\\n     *  Require that the msg.sender and `to` addresses are not frozen.\\r\\n     *  Require that the total value should not exceed available balance.\\r\\n     *  Require that the `to` addresses are all verified addresses,\\r\\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,\\r\\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\r\\n     *  @param _toList The addresses of the receivers\\r\\n     *  @param _amounts The number of tokens to transfer to the corresponding receiver\\r\\n     *  emits _toList.length `Transfer` events\\r\\n     */\\r\\n    function batchTransfer(\\r\\n        address[] calldata _toList,\\r\\n        uint256[] calldata _amounts\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev function allowing to issue forced transfers in batch\\r\\n     *  Require that `_amounts[i]` should not exceed available balance of `_fromList[i]`.\\r\\n     *  Require that the `_toList` addresses are all verified addresses\\r\\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_fromList.length` IS TOO HIGH,\\r\\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\r\\n     *  @param _fromList The addresses of the senders\\r\\n     *  @param _toList The addresses of the receivers\\r\\n     *  @param _amounts The number of tokens to transfer to the corresponding receiver\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits `TokensUnfrozen` events if `_amounts[i]` is higher than the free balance of `_fromList[i]`\\r\\n     *  emits _fromList.length `Transfer` events\\r\\n     */\\r\\n    function batchForcedTransfer(\\r\\n        address[] calldata _fromList,\\r\\n        address[] calldata _toList,\\r\\n        uint256[] calldata _amounts\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev function allowing to mint tokens in batch\\r\\n     *  Require that the `_toList` addresses are all verified addresses\\r\\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,\\r\\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\r\\n     *  @param _toList The addresses of the receivers\\r\\n     *  @param _amounts The number of tokens to mint to the corresponding receiver\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits _toList.length `Transfer` events\\r\\n     */\\r\\n    function batchMint(\\r\\n        address[] calldata _toList,\\r\\n        uint256[] calldata _amounts\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev function allowing to burn tokens in batch\\r\\n     *  Require that the `_userAddresses` addresses are all verified addresses\\r\\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\\r\\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\r\\n     *  @param _userAddresses The addresses of the wallets concerned by the burn\\r\\n     *  @param _amounts The number of tokens to burn from the corresponding wallets\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits _userAddresses.length `Transfer` events\\r\\n     */\\r\\n    function batchBurn(\\r\\n        address[] calldata _userAddresses,\\r\\n        uint256[] calldata _amounts\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev function allowing to set frozen addresses in batch\\r\\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\\r\\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\r\\n     *  @param _userAddresses The addresses for which to update frozen status\\r\\n     *  @param _freeze Frozen status of the corresponding address\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits _userAddresses.length `AddressFrozen` events\\r\\n     */\\r\\n    function batchSetAddressFrozen(\\r\\n        address[] calldata _userAddresses,\\r\\n        bool[] calldata _freeze\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev function allowing to freeze tokens partially in batch\\r\\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\\r\\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\r\\n     *  @param _userAddresses The addresses on which tokens need to be frozen\\r\\n     *  @param _amounts the amount of tokens to freeze on the corresponding address\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits _userAddresses.length `TokensFrozen` events\\r\\n     */\\r\\n    function batchFreezePartialTokens(\\r\\n        address[] calldata _userAddresses,\\r\\n        uint256[] calldata _amounts\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev function allowing to unfreeze tokens partially in batch\\r\\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\\r\\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\r\\n     *  @param _userAddresses The addresses on which tokens need to be unfrozen\\r\\n     *  @param _amounts the amount of tokens to unfreeze on the corresponding address\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits _userAddresses.length `TokensUnfrozen` events\\r\\n     */\\r\\n    function batchUnfreezePartialTokens(\\r\\n        address[] calldata _userAddresses,\\r\\n        uint256[] calldata _amounts\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 1 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * balanceOf() and transfer().\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the onchainID of the token.\\r\\n     * the onchainID of the token gives all the information available\\r\\n     * about the token and is managed by the token issuer or his agent.\\r\\n     */\\r\\n    function onchainID() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the TREX version of the token.\\r\\n     * current version is 3.0.0\\r\\n     */\\r\\n    function version() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the Identity Registry linked to the token\\r\\n     */\\r\\n    function identityRegistry() external view returns (IIdentityRegistry);\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the Compliance contract linked to the token\\r\\n     */\\r\\n    function compliance() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the freezing status of a wallet\\r\\n     *  if isFrozen returns `true` the wallet is frozen\\r\\n     *  if isFrozen returns `false` the wallet is not frozen\\r\\n     *  isFrozen returning `true` doesn't mean that the balance is free, tokens could be blocked by\\r\\n     *  a partial freeze or the whole token could be blocked by pause\\r\\n     *  @param _userAddress the address of the wallet on which isFrozen is called\\r\\n     */\\r\\n    function isFrozen(address _userAddress) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the amount of tokens that are partially frozen on a wallet\\r\\n     *  the amount of frozen tokens is always <= to the total balance of the wallet\\r\\n     *  @param _userAddress the address of the wallet on which getFrozenTokens is called\\r\\n     */\\r\\n    function getFrozenTokens(\\r\\n        address _userAddress\\r\\n    ) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x5c43f33c6ee7eba5714c907c2f94090e0bc4927ddbb3a9548b92c40435ea3ae4\",\"license\":\"GPL-3.0\"},\"contracts/token/Token.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./IToken.sol\\\";\\r\\nimport \\\"@onchain-id/solidity/contracts/interface/IIdentity.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\n\\r\\nimport \\\"../compliance/interface/ICompliance.sol\\\";\\r\\n\\r\\n/// @title ERC-3643 - T-Rex Token (Version RAPTOR-5.0.0)\\r\\n/// @notice An ERC-3643 compliant token with onchain validators and compliance checks.\\r\\ncontract Token is IToken, AccessControl, Pausable {\\r\\n    /// @dev ERC20 basic variables\\r\\n    mapping(address => uint256) private _balances;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    /// @dev Variables of freeze and pause functions\\r\\n    mapping(address => bool) private _frozen;\\r\\n    mapping(address => uint256) private _frozenAmounts;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    /// @dev Token information\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private immutable _decimals;\\r\\n    address private _onchainID;\\r\\n    string private constant _TOKEN_VERSION = \\\"RAPTOR-5.0.0\\\";\\r\\n\\r\\n    // keccak256(AGENT_ROLE)\\r\\n    bytes32 public constant AGENT_ROLE =\\r\\n        0xcab5a0bfe0b79d2c4b1c2e02599fa044d115b7511f9659307cb4276950967709;\\r\\n\\r\\n    // keccak256(OWNER_ROLE)\\r\\n    bytes32 public constant OWNER_ROLE =\\r\\n        0xb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e;\\r\\n\\r\\n    /// @dev Identity Registry contract used by the onchain validator system\\r\\n    IIdentityRegistry private _identityRegistry;\\r\\n\\r\\n    /// @dev Compliance contract linked to the onchain validator system\\r\\n    ICompliance private _compliance;\\r\\n\\r\\n    /// @dev the constructor initiates the token contract\\r\\n    /// _msgSender() is set automatically as the owner of the smart contract\\r\\n    /// @param identityRegistry_ the address of the Identity registry linked to the token\\r\\n    /// @param compliance_ the address of the compliance contract linked to the token\\r\\n    /// @param name_ the name of the token\\r\\n    /// @param symbol_ the symbol of the token\\r\\n    /// @param decimals_ the decimals of the token\\r\\n    /// @param onchainID_ the address of the onchainID of the token\\r\\n    /// emits an `UpdatedTokenInformation` event\\r\\n    /// emits an `IdentityRegistryAdded` event\\r\\n    /// emits a `ComplianceAdded` event\\r\\n    constructor(\\r\\n        address identityRegistry_,\\r\\n        address compliance_,\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        uint8 decimals_,\\r\\n        address onchainID_\\r\\n    ) {\\r\\n        require(\\r\\n            identityRegistry_ != address(0) && compliance_ != address(0),\\r\\n            \\\"ERC-3643: Invalid zero address\\\"\\r\\n        );\\r\\n\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _decimals = decimals_;\\r\\n        _onchainID = onchainID_;\\r\\n\\r\\n        _grantRole(bytes32(0), _msgSender());\\r\\n        _grantRole(OWNER_ROLE, _msgSender());\\r\\n        _grantRole(AGENT_ROLE, _msgSender());\\r\\n\\r\\n        _identityRegistry = IIdentityRegistry(identityRegistry_);\\r\\n        _compliance = ICompliance(compliance_);\\r\\n        _compliance.bindToken(address(this));\\r\\n\\r\\n        emit IdentityRegistryAdded(identityRegistry_);\\r\\n        emit ComplianceAdded(compliance_);\\r\\n        emit UpdatedOnchainID(_onchainID);\\r\\n    }\\r\\n\\r\\n    /// @notice Approve `amount` tokens to be spent by `spender`\\r\\n    /// @param spender The address of the account allowed to spend the tokens\\r\\n    /// @param amount The number of tokens to be spent\\r\\n    /// @return A boolean that indicates if the operation was successful.\\r\\n    function approve(address spender, uint256 amount) external returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @notice ERC-20 overridden function that include logic to check for trade validity.\\r\\n    /// @dev Transfer tokens to another address. Requires that the _msgSender()\\r\\n    /// and to addresses are not frozen and that the value should not exceed available balance.\\r\\n    /// @param to The address of the receiver.\\r\\n    /// @param amount The number of tokens to transfer.\\r\\n    /// @return true if the transfer is successful.\\r\\n    function transfer(\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external whenNotPaused returns (bool) {\\r\\n        _transfer(_msgSender(), to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @dev ERC-20 overridden function that include logic to check for trade validity\\r\\n    /// @dev Transfer tokens from one address to another. Requires that the `from` and `to` addresses are not frozen\\r\\n    /// and that the value should not exceed available balance.\\r\\n    /// @param from The address of the sender.\\r\\n    /// @param to The address of the receiver.\\r\\n    /// @param amount The number of tokens to transfer.\\r\\n    /// @return true if the transfer is successful.\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external whenNotPaused returns (bool) {\\r\\n        _spendAllowance(from, _msgSender(), amount);\\r\\n        _transfer(from, to, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @notice Increase the allowance provided to `spender` by the caller\\r\\n    /// @param spender The address of the account allowed to spend the tokens\\r\\n    /// @param _addedValue The increase in allowance\\r\\n    /// @return A boolean that indicates if the operation was successful.\\r\\n    function increaseAllowance(\\r\\n        address spender,\\r\\n        uint256 _addedValue\\r\\n    ) external returns (bool) {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender] + (_addedValue)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @notice Decrease the allowance provided to `spender` by the caller\\r\\n    /// @param spender The address of the account allowed to spend the tokens\\r\\n    /// @param _subtractedValue The decrease in allowance\\r\\n    /// @return A boolean that indicates if the operation was successful.\\r\\n    function decreaseAllowance(\\r\\n        address spender,\\r\\n        uint256 _subtractedValue\\r\\n    ) external returns (bool) {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender] - _subtractedValue\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @dev Set the onchainID of a token. Can only be called by an owner of the contract.\\r\\n    /// @param onchainID_ The address of the onchainID.\\r\\n    /// @notice Emits an UpdatedOnchainID event.\\r\\n    function setOnchainID(address onchainID_) external onlyRole(OWNER_ROLE) {\\r\\n        _onchainID = onchainID_;\\r\\n        emit UpdatedOnchainID(onchainID_);\\r\\n    }\\r\\n\\r\\n    /// @notice Pause all token operations\\r\\n    /// @dev Can only be called by an agent of the contract\\r\\n    function pause() external onlyRole(AGENT_ROLE) {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /// @notice Unpause all token operations\\r\\n    /// @dev Can only be called by an agent of the contract\\r\\n    function unpause() external onlyRole(AGENT_ROLE) {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    // @dev Perform a batch transfer of tokens.\\r\\n    /// @param toList An array of receiver addresses.\\r\\n    /// @param amounts An array of amounts to transfer.\\r\\n    function batchTransfer(\\r\\n        address[] calldata toList,\\r\\n        uint256[] calldata amounts\\r\\n    ) external whenNotPaused {\\r\\n        uint length = toList.length;\\r\\n        require(length == amounts.length, \\\"ERC-3643: Array size mismatch\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < length; ) {\\r\\n            _transfer(_msgSender(), toList[i], amounts[i]);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Perform a batch forced transfer of tokens.\\r\\n    /// @param fromList An array of sender addresses.\\r\\n    /// @param toList An array of receiver addresses.\\r\\n    /// @param amounts An array of amounts to transfer.\\r\\n    function batchTransferFrom(\\r\\n        address[] calldata fromList,\\r\\n        address[] calldata toList,\\r\\n        uint256[] calldata amounts\\r\\n    ) external whenNotPaused {\\r\\n        uint length = fromList.length;\\r\\n        require(length == toList.length, \\\"ERC-3643: Array size mismatch\\\");\\r\\n        require(length == amounts.length, \\\"ERC-3643: Array size mismatch\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < length; ) {\\r\\n            _spendAllowance(fromList[i], _msgSender(), amounts[i]);\\r\\n            _transfer(fromList[i], toList[i], amounts[i]);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Perform a batch forced transfer of tokens.\\r\\n    /// @param fromList An array of sender addresses.\\r\\n    /// @param toList An array of receiver addresses.\\r\\n    /// @param amounts An array of amounts to transfer.\\r\\n    function batchForcedTransfer(\\r\\n        address[] calldata fromList,\\r\\n        address[] calldata toList,\\r\\n        uint256[] calldata amounts\\r\\n    ) external onlyRole(AGENT_ROLE) {\\r\\n        uint length = fromList.length;\\r\\n        require(length == toList.length, \\\"ERC-3643: Array size mismatch\\\");\\r\\n        require(length == amounts.length, \\\"ERC-3643: Array size mismatch\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < length; ) {\\r\\n            _forcedTransfer(fromList[i], toList[i], amounts[i]);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Perform a batch minting of tokens.\\r\\n    /// @param toList An array of receiver addresses.\\r\\n    /// @param amounts An array of amounts to mint.\\r\\n    function batchMint(\\r\\n        address[] calldata toList,\\r\\n        uint256[] calldata amounts\\r\\n    ) external onlyRole(AGENT_ROLE) {\\r\\n        uint length = toList.length;\\r\\n        require(length == amounts.length, \\\"ERC-3643: Array size mismatch\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < length; ) {\\r\\n            _mint(toList[i], amounts[i]);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Perform a batch burn of tokens.\\r\\n    /// @param accounts An array of addresses from which to burn tokens.\\r\\n    /// @param amounts An array of amounts to burn.\\r\\n    function batchBurn(\\r\\n        address[] calldata accounts,\\r\\n        uint256[] calldata amounts\\r\\n    ) external onlyRole(AGENT_ROLE) {\\r\\n        uint length = accounts.length;\\r\\n        require(length == amounts.length, \\\"ERC-3643: Array size mismatch\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < length; ) {\\r\\n            _burn(accounts[i], amounts[i]);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Perform a batch freezing / unfreezing of addresses.\\r\\n    /// @param accounts An array of addresses to freeze.\\r\\n    /// @param freeze An array of boolean values indicating whether to freeze the corresponding address.\\r\\n    function batchSetAddressFrozen(\\r\\n        address[] calldata accounts,\\r\\n        bool[] calldata freeze\\r\\n    ) external onlyRole(AGENT_ROLE) {\\r\\n        uint length = accounts.length;\\r\\n        require(length == freeze.length, \\\"ERC-3643: Array size mismatch\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < length; ) {\\r\\n            _setAddressFrozen(accounts[i], freeze[i]);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Perform a batch freezing of partial tokens from multiple addresses.\\r\\n    /// @param accounts An array of addresses from which to freeze tokens.\\r\\n    /// @param amounts An array of amounts to freeze.\\r\\n    function batchFreezePartialTokens(\\r\\n        address[] calldata accounts,\\r\\n        uint256[] calldata amounts\\r\\n    ) external onlyRole(AGENT_ROLE) {\\r\\n        uint length = accounts.length;\\r\\n        require(length == amounts.length, \\\"ERC-3643: Array size mismatch\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < length; ) {\\r\\n            _freezePartialTokens(accounts[i], amounts[i]);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Perform a batch unfreezing of partial tokens from multiple addresses.\\r\\n    /// @param accounts An array of addresses from which to unfreeze tokens.\\r\\n    /// @param amounts An array of amounts to unfreeze.\\r\\n    function batchUnfreezePartialTokens(\\r\\n        address[] calldata accounts,\\r\\n        uint256[] calldata amounts\\r\\n    ) external onlyRole(AGENT_ROLE) {\\r\\n        uint length = accounts.length;\\r\\n        require(length == amounts.length, \\\"ERC-3643: Array size mismatch\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < length; ) {\\r\\n            _unfreezePartialTokens(accounts[i], amounts[i]);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Recover tokens from a lost wallet and transfer them to a new wallet. Can only be called by an agent of the contract.\\r\\n    /// @param lostWallet The address of the lost wallet.\\r\\n    /// @param newWallet The address of the new wallet.\\r\\n    /// @param investorOnchainID The onchainID of the investor.\\r\\n    /// @return true if the recovery is successful.\\r\\n    function recoveryAddress(\\r\\n        address lostWallet,\\r\\n        address newWallet,\\r\\n        address investorOnchainID\\r\\n    ) external onlyRole(AGENT_ROLE) returns (bool) {\\r\\n        uint256 investorBalance = _balances[lostWallet];\\r\\n        require(investorBalance != 0, \\\"ERC-3643: No tokens to recover\\\");\\r\\n\\r\\n        IIdentity identity = IIdentity(investorOnchainID);\\r\\n\\r\\n        bool isLostWalletFrozen = _frozen[lostWallet];\\r\\n        bytes32 _key = keccak256(abi.encode(newWallet));\\r\\n        \\r\\n        require(\\r\\n            identity.keyHasPurpose(_key, 1),\\r\\n            \\\"ERC-3643: Recovery not possible\\\"\\r\\n        );\\r\\n        uint256 frozenTokens = _frozenAmounts[lostWallet];\\r\\n\\r\\n        _identityRegistry.registerIdentity(\\r\\n            newWallet,\\r\\n            identity,\\r\\n            _identityRegistry.investorCountry(lostWallet)\\r\\n        );\\r\\n\\r\\n        if (isLostWalletFrozen) _frozen[lostWallet] = false;\\r\\n\\r\\n        _forcedTransfer(lostWallet, newWallet, investorBalance);\\r\\n\\r\\n        if (frozenTokens != 0) {\\r\\n            _freezePartialTokens(newWallet, frozenTokens);\\r\\n        }\\r\\n        if (isLostWalletFrozen == true) {\\r\\n            _setAddressFrozen(newWallet, true);\\r\\n        }\\r\\n        _identityRegistry.deleteIdentity(lostWallet);\\r\\n\\r\\n        emit RecoverySuccess(lostWallet, newWallet, investorOnchainID);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @notice Executes a forced transfer of tokens from one address to another\\r\\n    /// @param from The address from which the tokens will be transferred\\r\\n    /// @param to The address to which the tokens will be transferred\\r\\n    /// @param amount The number of tokens to be transferred\\r\\n    /// @return Returns true if the transfer was successful, otherwise false\\r\\n    function forcedTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external onlyRole(AGENT_ROLE) returns (bool) {\\r\\n        return _forcedTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Mints new tokens and assigns them to a specified address\\r\\n    /// @param _to The address that will receive the minted tokens\\r\\n    /// @param amount The number of tokens to be minted\\r\\n    function mint(address _to, uint256 amount) external onlyRole(AGENT_ROLE) {\\r\\n        _mint(_to, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Burns tokens from a specified address\\r\\n    /// @param account The address from which the tokens will be burned\\r\\n    /// @param amount The number of tokens to be burned\\r\\n    function burn(\\r\\n        address account,\\r\\n        uint256 amount\\r\\n    ) external onlyRole(AGENT_ROLE) {\\r\\n        _burn(account, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Freezes or unfreezes a specified address\\r\\n    /// @param account The address to be frozen or unfrozen\\r\\n    /// @param freeze The boolean value indicating whether to freeze (true) or unfreeze (false) the account\\r\\n    function setAddressFrozen(\\r\\n        address account,\\r\\n        bool freeze\\r\\n    ) external onlyRole(AGENT_ROLE) {\\r\\n        _frozen[account] = freeze;\\r\\n\\r\\n        emit AddressFrozen(account, freeze, _msgSender());\\r\\n    }\\r\\n\\r\\n    /// @notice Freezes a specified amount of tokens in a specified account\\r\\n    /// @param account The account in which the tokens will be frozen\\r\\n    /// @param amount The amount of tokens to be frozen\\r\\n    function freezePartialTokens(\\r\\n        address account,\\r\\n        uint256 amount\\r\\n    ) external onlyRole(AGENT_ROLE) {\\r\\n        _freezePartialTokens(account, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Unfreezes a specified amount of tokens in a specified account\\r\\n    /// @param account The account from which the tokens will be unfrozen\\r\\n    /// @param amount The amount of tokens to be unfrozen\\r\\n    function unfreezePartialTokens(\\r\\n        address account,\\r\\n        uint256 amount\\r\\n    ) external onlyRole(AGENT_ROLE) {\\r\\n        _unfreezePartialTokens(account, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the Identity Registry contract address\\r\\n    /// @param newIdentityRegistry The address of the new Identity Registry contract\\r\\n    function setIdentityRegistry(\\r\\n        address newIdentityRegistry\\r\\n    ) external onlyRole(OWNER_ROLE) {\\r\\n        _identityRegistry = IIdentityRegistry(newIdentityRegistry);\\r\\n        emit IdentityRegistryAdded(newIdentityRegistry);\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the Compliance contract address\\r\\n    /// @param newCompliance The address of the new Compliance contract\\r\\n    function setCompliance(\\r\\n        address newCompliance\\r\\n    ) external onlyRole(OWNER_ROLE) {\\r\\n        require(newCompliance != address(0), \\\"ERC-3643: Invalid zero address\\\");\\r\\n\\r\\n        _compliance.unbindToken(address(this));\\r\\n        _compliance = ICompliance(newCompliance);\\r\\n        _compliance.bindToken(address(this));\\r\\n        emit ComplianceAdded(newCompliance);\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the name of the token.\\r\\n    function name() external view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the symbol of the token.\\r\\n    function symbol() external view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the number of decimals the token uses.\\r\\n    function decimals() external view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the onchainID of the token.\\r\\n    function onchainID() external view returns (address) {\\r\\n        return _onchainID;\\r\\n    }\\r\\n\\r\\n    /// @notice Get the balance of a specified account.\\r\\n    /// @param account The address of the account.\\r\\n    /// @return uint256 The balance of the specified account.\\r\\n    function balanceOf(address account) external view returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the total supply of the token.\\r\\n    function totalSupply() external view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the allowance of tokens that an owner has allowed a spender to spend.\\r\\n    /// @param owner The address of the owner.\\r\\n    /// @param spender The address of the spender.\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /// @dev Returns whether an address is frozen.\\r\\n    /// @param account The address to check.\\r\\n    function isFrozen(address account) external view returns (bool) {\\r\\n        return _frozen[account];\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the number of frozen tokens of an address.\\r\\n    /// @param account The address to check.\\r\\n    function getFrozenTokens(address account) external view returns (uint256) {\\r\\n        return _frozenAmounts[account];\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the current Compliance contract linked to the token.\\r\\n    function compliance() external view returns (address) {\\r\\n        return address(_compliance);\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the current Identity Registry contract linked to the token.\\r\\n    function identityRegistry() external view returns (IIdentityRegistry) {\\r\\n        return _identityRegistry;\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the version of the token.\\r\\n    function version() external pure returns (string memory) {\\r\\n        return _TOKEN_VERSION;\\r\\n    }\\r\\n\\r\\n    /// @notice ERC-20 overridden function that include logic to check for trade validity.\\r\\n    /// Require that the `from` and `to` addresses are not frozen.\\r\\n    /// Require that the `amount` should not exceed available balance .\\r\\n    /// Require that the `to` address is a verified address\\r\\n    /// @param from The address of the sender\\r\\n    /// @param to The address of the receiver\\r\\n    /// @param amount The number of tokens to transfer\\r\\n    function _transfer(address from, address to, uint256 amount) private {\\r\\n        require(from != address(0), \\\"ERC-3643: transfer from zero address\\\");\\r\\n        require(to != address(0), \\\"ERC-3643: transfer to zero address\\\");\\r\\n\\r\\n        require(!_frozen[to] && !_frozen[from], \\\"ERC-3643: Wallet frozen\\\");\\r\\n        uint256 fromBalance = _balances[from];\\r\\n\\r\\n        require(fromBalance >= amount, \\\"ERC-3643: amount exceeds balance\\\");\\r\\n        require(\\r\\n            amount <= fromBalance - (_frozenAmounts[from]),\\r\\n            \\\"ERC-3643: Freezed balance\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            _identityRegistry.isVerified(to),\\r\\n            \\\"ERC-3643: Unverified identity\\\"\\r\\n        );\\r\\n        require(\\r\\n            _compliance.canTransfer(from, to, amount),\\r\\n            \\\"ERC-3643: Compliance failure\\\"\\r\\n        );\\r\\n\\r\\n        unchecked {\\r\\n            _balances[from] = fromBalance - amount;\\r\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\r\\n            // decrementing then incrementing.\\r\\n            _balances[to] += amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, amount);\\r\\n        _compliance.transferred(_msgSender(), to, amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Mints the amount of tokens to the `account`\\r\\n    /// @param account The address of the receiver\\r\\n    /// @param amount The number of tokens to mint\\r\\n    function _mint(address account, uint256 amount) private {\\r\\n        require(account != address(0), \\\"ERC-3643: mint to zero address\\\");\\r\\n        require(\\r\\n            _identityRegistry.isVerified(account),\\r\\n            \\\"ERC-3643: Unverified identity\\\"\\r\\n        );\\r\\n        require(\\r\\n            _compliance.canTransfer(address(0), account, amount),\\r\\n            \\\"ERC-3643: Compliance failure\\\"\\r\\n        );\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n\\r\\n        emit Transfer(address(0), account, amount);\\r\\n        _compliance.created(account, amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Burns the amount of tokens from the sender's account\\r\\n    /// @param account The address of the sender\\r\\n    /// @param amount The number of tokens to burn\\r\\n    function _burn(address account, uint256 amount) private {\\r\\n        require(account != address(0), \\\"ERC-3643: burn from the zero address\\\");\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC-3643: burn exceeds balance\\\");\\r\\n\\r\\n        uint256 freeBalance = accountBalance - _frozenAmounts[account];\\r\\n        if (amount > freeBalance) {\\r\\n            uint256 tokensToUnfreeze = amount - (freeBalance);\\r\\n            _frozenAmounts[account] =\\r\\n                _frozenAmounts[account] -\\r\\n                (tokensToUnfreeze);\\r\\n            emit TokensUnfrozen(account, tokensToUnfreeze);\\r\\n        }\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\r\\n            _totalSupply -= amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n        _compliance.destroyed(account, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Approve a specified amount for a spender.\\r\\n    /// @dev private function that approves a specified amount for a spender.\\r\\n    /// Emits an Approval event.\\r\\n    /// @param owner The address of the owner.\\r\\n    /// @param spender The address of the spender.\\r\\n    /// @param amount The amount to approve.\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        require(owner != address(0), \\\"ERC-3643: approve from zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC-3643: approve to zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Forced transfer of a specified amount from one address to another.\\r\\n    /// @dev Private function to transfer tokens from one address to another.\\r\\n    /// Requires that the `from` address has enough balance. Adjusts frozen tokens if necessary.\\r\\n    /// @param from The address to transfer from.\\r\\n    /// @param to The address to transfer to.\\r\\n    /// @param amount The amount to transfer.\\r\\n    /// @return true if the forced transfer is successful.\\r\\n    function _forcedTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) private returns (bool) {\\r\\n        uint fromBalance = _balances[from];\\r\\n\\r\\n        require(fromBalance >= amount, \\\"ERC-3643: Sender low balance\\\");\\r\\n        uint256 freeBalance = fromBalance - (_frozenAmounts[from]);\\r\\n        if (amount > freeBalance) {\\r\\n            uint256 tokensToUnfreeze = amount - (freeBalance);\\r\\n            _frozenAmounts[from] = _frozenAmounts[from] - (tokensToUnfreeze);\\r\\n            emit TokensUnfrozen(from, tokensToUnfreeze);\\r\\n        }\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @dev Decreases the allowance of the spender for the sender's tokens\\r\\n    /// @param owner The address of the sender\\r\\n    /// @param spender The address of the spender\\r\\n    /// @param amount The number of tokens to decrease the allowance by\\r\\n    function _spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        uint256 currentAllowance = _allowances[owner][spender];\\r\\n\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(\\r\\n                currentAllowance >= amount,\\r\\n                \\\"ERC3643: Insufficient allowance\\\"\\r\\n            );\\r\\n            unchecked {\\r\\n                _approve(owner, spender, currentAllowance - amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Freezes or unfreezes the account\\r\\n    /// @param account The address of the account\\r\\n    /// @param freeze The boolean value of whether to freeze or unfreeze the account\\r\\n    function _setAddressFrozen(address account, bool freeze) private {\\r\\n        _frozen[account] = freeze;\\r\\n\\r\\n        emit AddressFrozen(account, freeze, _msgSender());\\r\\n    }\\r\\n\\r\\n    /// @dev Freezes the amount of tokens in the account\\r\\n    /// @param account The address of the account\\r\\n    /// @param amount The number of tokens to freeze\\r\\n    function _freezePartialTokens(address account, uint256 amount) private {\\r\\n        uint256 balance = _balances[account];\\r\\n        require(\\r\\n            balance >= _frozenAmounts[account] + amount,\\r\\n            \\\"Amount exceeds available balance\\\"\\r\\n        );\\r\\n        _frozenAmounts[account] = _frozenAmounts[account] + (amount);\\r\\n        emit TokensFrozen(account, amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Unfreezes the amount of tokens in the account\\r\\n    /// @param account The address of the account\\r\\n    /// @param amount The number of tokens to unfreeze\\r\\n    function _unfreezePartialTokens(address account, uint256 amount) private {\\r\\n        require(\\r\\n            _frozenAmounts[account] >= amount,\\r\\n            \\\"Amount should be less than or equal to frozen tokens\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _frozenAmounts[account] = _frozenAmounts[account] - (amount);\\r\\n        }\\r\\n        emit TokensUnfrozen(account, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x119a67679d61f2dd9e142343d0cc7fdb63f04cc61a30185859e454e19593f943\",\"license\":\"GPL-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200345938038062003459833981016040819052620000349162000409565b6001805460ff191690556001600160a01b038616158015906200005f57506001600160a01b03851615155b620000b05760405162461bcd60e51b815260206004820152601e60248201527f4552432d333634333a20496e76616c6964207a65726f20616464726573730000604482015260640160405180910390fd5b6007620000be858262000553565b506008620000cd848262000553565b5060ff8216608052600980546001600160a01b0319166001600160a01b038316179055620001046000620000fe3390565b62000286565b620001307fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e3362000286565b6200015c7fcab5a0bfe0b79d2c4b1c2e02599fa044d115b7511f9659307cb42769509677093362000286565b600a80546001600160a01b038881166001600160a01b031992831617909255600b80549288169290911682179055604051631ffad50160e11b8152306004820152633ff5aa0290602401600060405180830381600087803b158015620001c157600080fd5b505af1158015620001d6573d6000803e3d6000fd5b50506040516001600160a01b03891692507fd2be862d755bca7e0d39772b2cab3a5578da9c285f69199f4c063c2294a7f36c9150600090a26040516001600160a01b038616907f7f3a888862559648ec01d97deb7b5012bff86dc91e654a1de397170db40e35b690600090a26009546040516001600160a01b03909116907fb940e1b0e9139123c237455ad6e58e547d9c648af37c0a5d7fa9a885a5adf50f90600090a25050505050506200061f565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000323576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002e23390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b80516001600160a01b03811681146200033f57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200036c57600080fd5b81516001600160401b038082111562000389576200038962000344565b604051601f8301601f19908116603f01168101908282118183101715620003b457620003b462000344565b81604052838152602092508683858801011115620003d157600080fd5b600091505b83821015620003f55785820183015181830184015290820190620003d6565b600093810190920192909252949350505050565b60008060008060008060c087890312156200042357600080fd5b6200042e8762000327565b95506200043e6020880162000327565b60408801519095506001600160401b03808211156200045c57600080fd5b6200046a8a838b016200035a565b955060608901519150808211156200048157600080fd5b506200049089828a016200035a565b935050608087015160ff81168114620004a857600080fd5b9150620004b860a0880162000327565b90509295509295509295565b600181811c90821680620004d957607f821691505b602082108103620004fa57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200054e57600081815260208120601f850160051c81016020861015620005295750805b601f850160051c820191505b818110156200054a5782815560010162000535565b5050505b505050565b81516001600160401b038111156200056f576200056f62000344565b6200058781620005808454620004c4565b8462000500565b602080601f831160018114620005bf5760008415620005a65750858301515b600019600386901b1c1916600185901b1785556200054a565b600085815260208120601f198616915b82811015620005f057888601518255948401946001909101908401620005cf565b50858210156200060f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051612e1e6200063b60003960006103ee0152612e1e6000f3fe608060405234801561001057600080fd5b50600436106102955760003560e01c80635c975abb11610167578063a457c2d7116100ce578063d547741f11610087578063d547741f1461060c578063dd62ed3e1461061f578063e58378bb14610658578063e58398361461066d578063f898178914610699578063fc7e5fa8146106ac57600080fd5b8063a457c2d71461059c578063a9059cbb146105af578063aba63705146105c2578063b818f9e4146105d3578063c69c09cf146105e6578063cbf3f861146105f957600080fd5b806391d148541161012057806391d14854146105405780639285948a1461055357806395d89b41146105665780639dc29fac1461056e5780639fc1d0e714610581578063a217fddf1461059457600080fd5b80635c975abb146104cd5780636290865d146104d857806368573107146104e957806370a08231146104fc5780638456cb591461052557806388d695b21461052d57600080fd5b8063248a9ca31161020b5780633f4ba83a116101c45780633f4ba83a1461045157806340c10f191461045957806342a47abc1461046c5780634710362d1461047f5780634a6cc6771461049257806354fd4d50146104a557600080fd5b8063248a9ca3146103b15780632f2ff15d146103d4578063313ce567146103e757806336568abe14610418578063395093511461042b5780633d1ddc5b1461043e57600080fd5b8063158b1a571161025d578063158b1a571461032457806318160ddd1461035b5780631a7af379146103635780631fe56f7d1461037657806322459e181461038957806323b872dd1461039e57600080fd5b806301ffc9a71461029a57806306fdde03146102c2578063095ea7b3146102d7578063125c4a33146102ea578063134e18f4146102ff575b600080fd5b6102ad6102a8366004612867565b6106bf565b60405190151581526020015b60405180910390f35b6102ca6106f6565b6040516102b991906128b5565b6102ad6102e5366004612904565b610788565b6102fd6102f8366004612904565b61079e565b005b600a546001600160a01b03165b6040516001600160a01b0390911681526020016102b9565b61034d61033236600461292e565b6001600160a01b031660009081526005602052604090205490565b6040519081526020016102b9565b60065461034d565b6102fd610371366004612995565b6107c5565b6102fd610384366004612904565b610878565b61034d600080516020612dc983398151915281565b6102ad6103ac366004612a01565b61089a565b61034d6103bf366004612a3d565b60009081526020819052604090206001015490565b6102fd6103e2366004612a56565b6108c4565b60405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020016102b9565b6102fd610426366004612a56565b6108e9565b6102ad610439366004612904565b610967565b6102fd61044c36600461292e565b6109a3565b6102fd610a06565b6102fd610467366004612904565b610a29565b6102fd61047a366004612a82565b610a4b565b6102fd61048d366004612995565b610b30565b6102fd6104a0366004612995565b610bc3565b60408051808201909152600c81526b0524150544f522d352e302e360a41b60208201526102ca565b60015460ff166102ad565b600b546001600160a01b031661030c565b6102fd6104f7366004612995565b610c56565b61034d61050a36600461292e565b6001600160a01b031660009081526002602052604090205490565b6102fd610ce9565b6102fd61053b366004612995565b610d09565b6102ad61054e366004612a56565b610d96565b6102ad610561366004612b1c565b610dbf565b6102ca611151565b6102fd61057c366004612904565b611160565b6102ad61058f366004612a01565b611182565b61034d600081565b6102ad6105aa366004612904565b6111b0565b6102ad6105bd366004612904565b6111e7565b6009546001600160a01b031661030c565b6102fd6105e1366004612a82565b6111fc565b6102fd6105f4366004612b6d565b6112d3565b6102fd61060736600461292e565b611341565b6102fd61061a366004612a56565b6113a4565b61034d61062d366004612ba4565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b61034d600080516020612da983398151915281565b6102ad61067b36600461292e565b6001600160a01b031660009081526004602052604090205460ff1690565b6102fd6106a736600461292e565b6113c9565b6102fd6106ba366004612995565b61153a565b60006001600160e01b03198216637965db0b60e01b14806106f057506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606007805461070590612bce565b80601f016020809104026020016040519081016040528092919081815260200182805461073190612bce565b801561077e5780601f106107535761010080835404028352916020019161077e565b820191906000526020600020905b81548152906001019060200180831161076157829003601f168201915b5050505050905090565b60006107953384846115cd565b50600192915050565b600080516020612dc98339815191526107b6816116f0565b6107c083836116fa565b505050565b600080516020612dc98339815191526107dd816116f0565b838281146108065760405162461bcd60e51b81526004016107fd90612c08565b60405180910390fd5b60005b8181101561086f5761086787878381811061082657610826612c3f565b905060200201602081019061083b919061292e565b86868481811061084d5761084d612c3f565b90506020020160208101906108629190612c55565b6117f9565b600101610809565b50505050505050565b600080516020612dc9833981519152610890816116f0565b6107c0838361184e565b60006108a4611930565b6108af843384611978565b6108ba848484611a0a565b5060019392505050565b6000828152602081905260409020600101546108df816116f0565b6107c08383611e8a565b6001600160a01b03811633146109595760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107fd565b6109638282611f0e565b5050565b3360008181526003602090815260408083206001600160a01b0387168452909152812054909161079591859061099e908690612c88565b6115cd565b600080516020612da98339815191526109bb816116f0565b600980546001600160a01b0319166001600160a01b0384169081179091556040517fb940e1b0e9139123c237455ad6e58e547d9c648af37c0a5d7fa9a885a5adf50f90600090a25050565b600080516020612dc9833981519152610a1e816116f0565b610a26611f73565b50565b600080516020612dc9833981519152610a41816116f0565b6107c08383611fc5565b600080516020612dc9833981519152610a63816116f0565b85848114610a835760405162461bcd60e51b81526004016107fd90612c08565b808314610aa25760405162461bcd60e51b81526004016107fd90612c08565b60005b81811015610b2557610b1c898983818110610ac257610ac2612c3f565b9050602002016020810190610ad7919061292e565b888884818110610ae957610ae9612c3f565b9050602002016020810190610afe919061292e565b878785818110610b1057610b10612c3f565b90506020020135612284565b50600101610aa5565b505050505050505050565b600080516020612dc9833981519152610b48816116f0565b83828114610b685760405162461bcd60e51b81526004016107fd90612c08565b60005b8181101561086f57610bbb878783818110610b8857610b88612c3f565b9050602002016020810190610b9d919061292e565b868684818110610baf57610baf612c3f565b9050602002013561184e565b600101610b6b565b600080516020612dc9833981519152610bdb816116f0565b83828114610bfb5760405162461bcd60e51b81526004016107fd90612c08565b60005b8181101561086f57610c4e878783818110610c1b57610c1b612c3f565b9050602002016020810190610c30919061292e565b868684818110610c4257610c42612c3f565b905060200201356123bd565b600101610bfe565b600080516020612dc9833981519152610c6e816116f0565b83828114610c8e5760405162461bcd60e51b81526004016107fd90612c08565b60005b8181101561086f57610ce1878783818110610cae57610cae612c3f565b9050602002016020810190610cc3919061292e565b868684818110610cd557610cd5612c3f565b90506020020135611fc5565b600101610c91565b600080516020612dc9833981519152610d01816116f0565b610a266125d5565b610d11611930565b82818114610d315760405162461bcd60e51b81526004016107fd90612c08565b60005b81811015610d8e57610d86335b878784818110610d5357610d53612c3f565b9050602002016020810190610d68919061292e565b868685818110610d7a57610d7a612c3f565b90506020020135611a0a565b600101610d34565b505050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000600080516020612dc9833981519152610dd9816116f0565b6001600160a01b03851660009081526002602052604081205490819003610e425760405162461bcd60e51b815260206004820152601e60248201527f4552432d333634333a204e6f20746f6b656e7320746f207265636f766572000060448201526064016107fd565b6001600160a01b038681166000908152600460209081526040808320548151948a1692850192909252879360ff90921692910160408051808303601f1901815290829052805160209091012063d202158d60e01b8252600482018190526001602483015291506001600160a01b0384169063d202158d90604401602060405180830381865afa158015610ed9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efd9190612c9b565b610f495760405162461bcd60e51b815260206004820152601f60248201527f4552432d333634333a205265636f76657279206e6f7420706f737369626c650060448201526064016107fd565b6001600160a01b03808a166000818152600560205260409081902054600a549151637e42683b60e01b8152600481019390935292169063454a03e0908b9087908490637e42683b90602401602060405180830381865afa158015610fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd59190612cb8565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015261ffff166044820152606401600060405180830381600087803b15801561102857600080fd5b505af115801561103c573d6000803e3d6000fd5b505050508215611067576001600160a01b038a166000908152600460205260409020805460ff191690555b6110728a8a87612284565b5080156110835761108389826116fa565b821515600103611098576110988960016117f9565b600a5460405163a8d29d1d60e01b81526001600160a01b038c811660048301529091169063a8d29d1d90602401600060405180830381600087803b1580156110df57600080fd5b505af11580156110f3573d6000803e3d6000fd5b50505050876001600160a01b0316896001600160a01b03168b6001600160a01b03167ff0c9129a94f30f1caaceb63e44b9811d0a3edf1d6c23757f346093af5553fed060405160405180910390a45060019998505050505050505050565b60606008805461070590612bce565b600080516020612dc9833981519152611178816116f0565b6107c083836123bd565b6000600080516020612dc983398151915261119c816116f0565b6111a7858585612284565b95945050505050565b3360008181526003602090815260408083206001600160a01b0387168452909152812054909161079591859061099e908690612cdc565b60006111f1611930565b610795338484611a0a565b611204611930565b848381146112245760405162461bcd60e51b81526004016107fd90612c08565b8082146112435760405162461bcd60e51b81526004016107fd90612c08565b60005b818110156112c95761129788888381811061126357611263612c3f565b9050602002016020810190611278919061292e565b3386868581811061128b5761128b612c3f565b90506020020135611978565b6112c18888838181106112ac576112ac612c3f565b9050602002016020810190610d41919061292e565b600101611246565b5050505050505050565b600080516020612dc98339815191526112eb816116f0565b6001600160a01b038316600081815260046020526040808220805460ff19168615159081179091559051339391927f7fa523c84ab8d7fc5b72f08b9e46dbbf10c39e119a075b3e317002d14bc9f43691a4505050565b600080516020612da9833981519152611359816116f0565b600a80546001600160a01b0319166001600160a01b0384169081179091556040517fd2be862d755bca7e0d39772b2cab3a5578da9c285f69199f4c063c2294a7f36c90600090a25050565b6000828152602081905260409020600101546113bf816116f0565b6107c08383611f0e565b600080516020612da98339815191526113e1816116f0565b6001600160a01b0382166114375760405162461bcd60e51b815260206004820152601e60248201527f4552432d333634333a20496e76616c6964207a65726f2061646472657373000060448201526064016107fd565b600b5460405163040db3b560e41b81523060048201526001600160a01b03909116906340db3b5090602401600060405180830381600087803b15801561147c57600080fd5b505af1158015611490573d6000803e3d6000fd5b5050600b80546001600160a01b0319166001600160a01b038616908117909155604051631ffad50160e11b8152306004820152909250633ff5aa029150602401600060405180830381600087803b1580156114ea57600080fd5b505af11580156114fe573d6000803e3d6000fd5b50506040516001600160a01b03851692507f7f3a888862559648ec01d97deb7b5012bff86dc91e654a1de397170db40e35b69150600090a25050565b600080516020612dc9833981519152611552816116f0565b838281146115725760405162461bcd60e51b81526004016107fd90612c08565b60005b8181101561086f576115c587878381811061159257611592612c3f565b90506020020160208101906115a7919061292e565b8686848181106115b9576115b9612c3f565b905060200201356116fa565b600101611575565b6001600160a01b03831661162f5760405162461bcd60e51b815260206004820152602360248201527f4552432d333634333a20617070726f76652066726f6d207a65726f206164647260448201526265737360e81b60648201526084016107fd565b6001600160a01b03821661168f5760405162461bcd60e51b815260206004820152602160248201527f4552432d333634333a20617070726f766520746f207a65726f206164647265736044820152607360f81b60648201526084016107fd565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b610a268133612610565b6001600160a01b03821660009081526002602090815260408083205460059092529091205461172a908390612c88565b8110156117795760405162461bcd60e51b815260206004820181905260248201527f416d6f756e74206578636565647320617661696c61626c652062616c616e636560448201526064016107fd565b6001600160a01b03831660009081526005602052604090205461179d908390612c88565b6001600160a01b038416600081815260056020526040908190209290925590517fa065e63c631c86f1b9f66a4a2f63f2093bf1c2168d23290259dbd969e0222a45906117ec9085815260200190565b60405180910390a2505050565b6001600160a01b038216600081815260046020526040808220805460ff19168515159081179091559051339391927f7fa523c84ab8d7fc5b72f08b9e46dbbf10c39e119a075b3e317002d14bc9f43691a45050565b6001600160a01b0382166000908152600560205260409020548111156118d35760405162461bcd60e51b815260206004820152603460248201527f416d6f756e742073686f756c64206265206c657373207468616e206f7220657160448201527375616c20746f2066726f7a656e20746f6b656e7360601b60648201526084016107fd565b6001600160a01b0382166000818152600560205260409081902080548490039055517f9bed35cb62ad0dba04f9d5bfee4b5bc91443e77da8a65c4c84834c51bb08b0d6906119249084815260200190565b60405180910390a25050565b60015460ff16156119765760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107fd565b565b6001600160a01b038084166000908152600360209081526040808320938616835292905220546000198114611a0457818110156119f75760405162461bcd60e51b815260206004820152601f60248201527f455243333634333a20496e73756666696369656e7420616c6c6f77616e63650060448201526064016107fd565b611a0484848484036115cd565b50505050565b6001600160a01b038316611a6c5760405162461bcd60e51b8152602060048201526024808201527f4552432d333634333a207472616e736665722066726f6d207a65726f206164646044820152637265737360e01b60648201526084016107fd565b6001600160a01b038216611acd5760405162461bcd60e51b815260206004820152602260248201527f4552432d333634333a207472616e7366657220746f207a65726f206164647265604482015261737360f01b60648201526084016107fd565b6001600160a01b03821660009081526004602052604090205460ff16158015611b0f57506001600160a01b03831660009081526004602052604090205460ff16155b611b5b5760405162461bcd60e51b815260206004820152601760248201527f4552432d333634333a2057616c6c65742066726f7a656e00000000000000000060448201526064016107fd565b6001600160a01b03831660009081526002602052604090205481811015611bc45760405162461bcd60e51b815260206004820181905260248201527f4552432d333634333a20616d6f756e7420657863656564732062616c616e636560448201526064016107fd565b6001600160a01b038416600090815260056020526040902054611be79082612cdc565b821115611c365760405162461bcd60e51b815260206004820152601960248201527f4552432d333634333a20467265657a65642062616c616e63650000000000000060448201526064016107fd565b600a5460405163b9209e3360e01b81526001600160a01b0385811660048301529091169063b9209e3390602401602060405180830381865afa158015611c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca49190612c9b565b611cf05760405162461bcd60e51b815260206004820152601d60248201527f4552432d333634333a20556e7665726966696564206964656e7469747900000060448201526064016107fd565b600b546040516372331c7360e11b81526001600160a01b0386811660048301528581166024830152604482018590529091169063e46638e690606401602060405180830381865afa158015611d49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6d9190612c9b565b611db95760405162461bcd60e51b815260206004820152601c60248201527f4552432d333634333a20436f6d706c69616e6365206661696c7572650000000060448201526064016107fd565b6001600160a01b0380851660008181526002602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611e199086815260200190565b60405180910390a3600b546040516322ebca6d60e21b81523360048201526001600160a01b0385811660248301526044820185905290911690638baf29b4906064015b600060405180830381600087803b158015611e7657600080fd5b505af11580156112c9573d6000803e3d6000fd5b611e948282610d96565b610963576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611eca3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611f188282610d96565b15610963576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b611f7b612669565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b03821661201b5760405162461bcd60e51b815260206004820152601e60248201527f4552432d333634333a206d696e7420746f207a65726f2061646472657373000060448201526064016107fd565b600a5460405163b9209e3360e01b81526001600160a01b0384811660048301529091169063b9209e3390602401602060405180830381865afa158015612065573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120899190612c9b565b6120d55760405162461bcd60e51b815260206004820152601d60248201527f4552432d333634333a20556e7665726966696564206964656e7469747900000060448201526064016107fd565b600b546040516372331c7360e11b8152600060048201526001600160a01b038481166024830152604482018490529091169063e46638e690606401602060405180830381865afa15801561212d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121519190612c9b565b61219d5760405162461bcd60e51b815260206004820152601c60248201527f4552432d333634333a20436f6d706c69616e6365206661696c7572650000000060448201526064016107fd565b80600660008282546121af9190612c88565b90915550506001600160a01b038216600090815260026020526040812080548392906121dc908490612c88565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3600b54604051635f8dead360e01b81526001600160a01b0384811660048301526024820184905290911690635f8dead390604401600060405180830381600087803b15801561227057600080fd5b505af1158015610d8e573d6000803e3d6000fd5b6001600160a01b038316600090815260026020526040812054828110156122ed5760405162461bcd60e51b815260206004820152601c60248201527f4552432d333634333a2053656e646572206c6f772062616c616e63650000000060448201526064016107fd565b6001600160a01b0385166000908152600560205260408120546123109083612cdc565b9050808411156123a65760006123268286612cdc565b6001600160a01b03881660009081526005602052604090205490915061234d908290612cdc565b6001600160a01b038816600081815260056020526040908190209290925590517f9bed35cb62ad0dba04f9d5bfee4b5bc91443e77da8a65c4c84834c51bb08b0d69061239c9084815260200190565b60405180910390a2505b6123b1868686611a0a565b50600195945050505050565b6001600160a01b03821661241f5760405162461bcd60e51b8152602060048201526024808201527f4552432d333634333a206275726e2066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016107fd565b6001600160a01b038216600090815260026020526040902054818110156124885760405162461bcd60e51b815260206004820152601e60248201527f4552432d333634333a206275726e20657863656564732062616c616e6365000060448201526064016107fd565b6001600160a01b0383166000908152600560205260408120546124ab9083612cdc565b9050808311156125415760006124c18285612cdc565b6001600160a01b0386166000908152600560205260409020549091506124e8908290612cdc565b6001600160a01b038616600081815260056020526040908190209290925590517f9bed35cb62ad0dba04f9d5bfee4b5bc91443e77da8a65c4c84834c51bb08b0d6906125379084815260200190565b60405180910390a2505b6001600160a01b03841660008181526002602090815260408083208787039055600680548890039055518681529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3600b5460405163469753b960e11b81526001600160a01b0386811660048301526024820186905290911690638d2ea77290604401611e5c565b6125dd611930565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833611fa8565b61261a8282610d96565b61096357612627816126b2565b6126328360206126c4565b604051602001612643929190612cef565b60408051601f198184030181529082905262461bcd60e51b82526107fd916004016128b5565b60015460ff166119765760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016107fd565b60606106f06001600160a01b03831660145b606060006126d3836002612d64565b6126de906002612c88565b67ffffffffffffffff8111156126f6576126f6612d7b565b6040519080825280601f01601f191660200182016040528015612720576020820181803683370190505b509050600360fc1b8160008151811061273b5761273b612c3f565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061276a5761276a612c3f565b60200101906001600160f81b031916908160001a905350600061278e846002612d64565b612799906001612c88565b90505b6001811115612811576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106127cd576127cd612c3f565b1a60f81b8282815181106127e3576127e3612c3f565b60200101906001600160f81b031916908160001a90535060049490941c9361280a81612d91565b905061279c565b5083156128605760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107fd565b9392505050565b60006020828403121561287957600080fd5b81356001600160e01b03198116811461286057600080fd5b60005b838110156128ac578181015183820152602001612894565b50506000910152565b60208152600082518060208401526128d4816040850160208701612891565b601f01601f19169190910160400192915050565b80356001600160a01b03811681146128ff57600080fd5b919050565b6000806040838503121561291757600080fd5b612920836128e8565b946020939093013593505050565b60006020828403121561294057600080fd5b612860826128e8565b60008083601f84011261295b57600080fd5b50813567ffffffffffffffff81111561297357600080fd5b6020830191508360208260051b850101111561298e57600080fd5b9250929050565b600080600080604085870312156129ab57600080fd5b843567ffffffffffffffff808211156129c357600080fd5b6129cf88838901612949565b909650945060208701359150808211156129e857600080fd5b506129f587828801612949565b95989497509550505050565b600080600060608486031215612a1657600080fd5b612a1f846128e8565b9250612a2d602085016128e8565b9150604084013590509250925092565b600060208284031215612a4f57600080fd5b5035919050565b60008060408385031215612a6957600080fd5b82359150612a79602084016128e8565b90509250929050565b60008060008060008060608789031215612a9b57600080fd5b863567ffffffffffffffff80821115612ab357600080fd5b612abf8a838b01612949565b90985096506020890135915080821115612ad857600080fd5b612ae48a838b01612949565b90965094506040890135915080821115612afd57600080fd5b50612b0a89828a01612949565b979a9699509497509295939492505050565b600080600060608486031215612b3157600080fd5b612b3a846128e8565b9250612b48602085016128e8565b9150612b56604085016128e8565b90509250925092565b8015158114610a2657600080fd5b60008060408385031215612b8057600080fd5b612b89836128e8565b91506020830135612b9981612b5f565b809150509250929050565b60008060408385031215612bb757600080fd5b612bc0836128e8565b9150612a79602084016128e8565b600181811c90821680612be257607f821691505b602082108103612c0257634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601d908201527f4552432d333634333a2041727261792073697a65206d69736d61746368000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612c6757600080fd5b813561286081612b5f565b634e487b7160e01b600052601160045260246000fd5b808201808211156106f0576106f0612c72565b600060208284031215612cad57600080fd5b815161286081612b5f565b600060208284031215612cca57600080fd5b815161ffff8116811461286057600080fd5b818103818111156106f0576106f0612c72565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612d27816017850160208801612891565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612d58816028840160208801612891565b01602801949350505050565b80820281158282048414176106f0576106f0612c72565b634e487b7160e01b600052604160045260246000fd5b600081612da057612da0612c72565b50600019019056feb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214ecab5a0bfe0b79d2c4b1c2e02599fa044d115b7511f9659307cb4276950967709a2646970667358221220c5843cfc7e852816c984bfd64b859e0d1fe0dd70faafcfad1754ba0b292def3164736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102955760003560e01c80635c975abb11610167578063a457c2d7116100ce578063d547741f11610087578063d547741f1461060c578063dd62ed3e1461061f578063e58378bb14610658578063e58398361461066d578063f898178914610699578063fc7e5fa8146106ac57600080fd5b8063a457c2d71461059c578063a9059cbb146105af578063aba63705146105c2578063b818f9e4146105d3578063c69c09cf146105e6578063cbf3f861146105f957600080fd5b806391d148541161012057806391d14854146105405780639285948a1461055357806395d89b41146105665780639dc29fac1461056e5780639fc1d0e714610581578063a217fddf1461059457600080fd5b80635c975abb146104cd5780636290865d146104d857806368573107146104e957806370a08231146104fc5780638456cb591461052557806388d695b21461052d57600080fd5b8063248a9ca31161020b5780633f4ba83a116101c45780633f4ba83a1461045157806340c10f191461045957806342a47abc1461046c5780634710362d1461047f5780634a6cc6771461049257806354fd4d50146104a557600080fd5b8063248a9ca3146103b15780632f2ff15d146103d4578063313ce567146103e757806336568abe14610418578063395093511461042b5780633d1ddc5b1461043e57600080fd5b8063158b1a571161025d578063158b1a571461032457806318160ddd1461035b5780631a7af379146103635780631fe56f7d1461037657806322459e181461038957806323b872dd1461039e57600080fd5b806301ffc9a71461029a57806306fdde03146102c2578063095ea7b3146102d7578063125c4a33146102ea578063134e18f4146102ff575b600080fd5b6102ad6102a8366004612867565b6106bf565b60405190151581526020015b60405180910390f35b6102ca6106f6565b6040516102b991906128b5565b6102ad6102e5366004612904565b610788565b6102fd6102f8366004612904565b61079e565b005b600a546001600160a01b03165b6040516001600160a01b0390911681526020016102b9565b61034d61033236600461292e565b6001600160a01b031660009081526005602052604090205490565b6040519081526020016102b9565b60065461034d565b6102fd610371366004612995565b6107c5565b6102fd610384366004612904565b610878565b61034d600080516020612dc983398151915281565b6102ad6103ac366004612a01565b61089a565b61034d6103bf366004612a3d565b60009081526020819052604090206001015490565b6102fd6103e2366004612a56565b6108c4565b60405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020016102b9565b6102fd610426366004612a56565b6108e9565b6102ad610439366004612904565b610967565b6102fd61044c36600461292e565b6109a3565b6102fd610a06565b6102fd610467366004612904565b610a29565b6102fd61047a366004612a82565b610a4b565b6102fd61048d366004612995565b610b30565b6102fd6104a0366004612995565b610bc3565b60408051808201909152600c81526b0524150544f522d352e302e360a41b60208201526102ca565b60015460ff166102ad565b600b546001600160a01b031661030c565b6102fd6104f7366004612995565b610c56565b61034d61050a36600461292e565b6001600160a01b031660009081526002602052604090205490565b6102fd610ce9565b6102fd61053b366004612995565b610d09565b6102ad61054e366004612a56565b610d96565b6102ad610561366004612b1c565b610dbf565b6102ca611151565b6102fd61057c366004612904565b611160565b6102ad61058f366004612a01565b611182565b61034d600081565b6102ad6105aa366004612904565b6111b0565b6102ad6105bd366004612904565b6111e7565b6009546001600160a01b031661030c565b6102fd6105e1366004612a82565b6111fc565b6102fd6105f4366004612b6d565b6112d3565b6102fd61060736600461292e565b611341565b6102fd61061a366004612a56565b6113a4565b61034d61062d366004612ba4565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b61034d600080516020612da983398151915281565b6102ad61067b36600461292e565b6001600160a01b031660009081526004602052604090205460ff1690565b6102fd6106a736600461292e565b6113c9565b6102fd6106ba366004612995565b61153a565b60006001600160e01b03198216637965db0b60e01b14806106f057506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606007805461070590612bce565b80601f016020809104026020016040519081016040528092919081815260200182805461073190612bce565b801561077e5780601f106107535761010080835404028352916020019161077e565b820191906000526020600020905b81548152906001019060200180831161076157829003601f168201915b5050505050905090565b60006107953384846115cd565b50600192915050565b600080516020612dc98339815191526107b6816116f0565b6107c083836116fa565b505050565b600080516020612dc98339815191526107dd816116f0565b838281146108065760405162461bcd60e51b81526004016107fd90612c08565b60405180910390fd5b60005b8181101561086f5761086787878381811061082657610826612c3f565b905060200201602081019061083b919061292e565b86868481811061084d5761084d612c3f565b90506020020160208101906108629190612c55565b6117f9565b600101610809565b50505050505050565b600080516020612dc9833981519152610890816116f0565b6107c0838361184e565b60006108a4611930565b6108af843384611978565b6108ba848484611a0a565b5060019392505050565b6000828152602081905260409020600101546108df816116f0565b6107c08383611e8a565b6001600160a01b03811633146109595760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107fd565b6109638282611f0e565b5050565b3360008181526003602090815260408083206001600160a01b0387168452909152812054909161079591859061099e908690612c88565b6115cd565b600080516020612da98339815191526109bb816116f0565b600980546001600160a01b0319166001600160a01b0384169081179091556040517fb940e1b0e9139123c237455ad6e58e547d9c648af37c0a5d7fa9a885a5adf50f90600090a25050565b600080516020612dc9833981519152610a1e816116f0565b610a26611f73565b50565b600080516020612dc9833981519152610a41816116f0565b6107c08383611fc5565b600080516020612dc9833981519152610a63816116f0565b85848114610a835760405162461bcd60e51b81526004016107fd90612c08565b808314610aa25760405162461bcd60e51b81526004016107fd90612c08565b60005b81811015610b2557610b1c898983818110610ac257610ac2612c3f565b9050602002016020810190610ad7919061292e565b888884818110610ae957610ae9612c3f565b9050602002016020810190610afe919061292e565b878785818110610b1057610b10612c3f565b90506020020135612284565b50600101610aa5565b505050505050505050565b600080516020612dc9833981519152610b48816116f0565b83828114610b685760405162461bcd60e51b81526004016107fd90612c08565b60005b8181101561086f57610bbb878783818110610b8857610b88612c3f565b9050602002016020810190610b9d919061292e565b868684818110610baf57610baf612c3f565b9050602002013561184e565b600101610b6b565b600080516020612dc9833981519152610bdb816116f0565b83828114610bfb5760405162461bcd60e51b81526004016107fd90612c08565b60005b8181101561086f57610c4e878783818110610c1b57610c1b612c3f565b9050602002016020810190610c30919061292e565b868684818110610c4257610c42612c3f565b905060200201356123bd565b600101610bfe565b600080516020612dc9833981519152610c6e816116f0565b83828114610c8e5760405162461bcd60e51b81526004016107fd90612c08565b60005b8181101561086f57610ce1878783818110610cae57610cae612c3f565b9050602002016020810190610cc3919061292e565b868684818110610cd557610cd5612c3f565b90506020020135611fc5565b600101610c91565b600080516020612dc9833981519152610d01816116f0565b610a266125d5565b610d11611930565b82818114610d315760405162461bcd60e51b81526004016107fd90612c08565b60005b81811015610d8e57610d86335b878784818110610d5357610d53612c3f565b9050602002016020810190610d68919061292e565b868685818110610d7a57610d7a612c3f565b90506020020135611a0a565b600101610d34565b505050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000600080516020612dc9833981519152610dd9816116f0565b6001600160a01b03851660009081526002602052604081205490819003610e425760405162461bcd60e51b815260206004820152601e60248201527f4552432d333634333a204e6f20746f6b656e7320746f207265636f766572000060448201526064016107fd565b6001600160a01b038681166000908152600460209081526040808320548151948a1692850192909252879360ff90921692910160408051808303601f1901815290829052805160209091012063d202158d60e01b8252600482018190526001602483015291506001600160a01b0384169063d202158d90604401602060405180830381865afa158015610ed9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efd9190612c9b565b610f495760405162461bcd60e51b815260206004820152601f60248201527f4552432d333634333a205265636f76657279206e6f7420706f737369626c650060448201526064016107fd565b6001600160a01b03808a166000818152600560205260409081902054600a549151637e42683b60e01b8152600481019390935292169063454a03e0908b9087908490637e42683b90602401602060405180830381865afa158015610fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd59190612cb8565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015261ffff166044820152606401600060405180830381600087803b15801561102857600080fd5b505af115801561103c573d6000803e3d6000fd5b505050508215611067576001600160a01b038a166000908152600460205260409020805460ff191690555b6110728a8a87612284565b5080156110835761108389826116fa565b821515600103611098576110988960016117f9565b600a5460405163a8d29d1d60e01b81526001600160a01b038c811660048301529091169063a8d29d1d90602401600060405180830381600087803b1580156110df57600080fd5b505af11580156110f3573d6000803e3d6000fd5b50505050876001600160a01b0316896001600160a01b03168b6001600160a01b03167ff0c9129a94f30f1caaceb63e44b9811d0a3edf1d6c23757f346093af5553fed060405160405180910390a45060019998505050505050505050565b60606008805461070590612bce565b600080516020612dc9833981519152611178816116f0565b6107c083836123bd565b6000600080516020612dc983398151915261119c816116f0565b6111a7858585612284565b95945050505050565b3360008181526003602090815260408083206001600160a01b0387168452909152812054909161079591859061099e908690612cdc565b60006111f1611930565b610795338484611a0a565b611204611930565b848381146112245760405162461bcd60e51b81526004016107fd90612c08565b8082146112435760405162461bcd60e51b81526004016107fd90612c08565b60005b818110156112c95761129788888381811061126357611263612c3f565b9050602002016020810190611278919061292e565b3386868581811061128b5761128b612c3f565b90506020020135611978565b6112c18888838181106112ac576112ac612c3f565b9050602002016020810190610d41919061292e565b600101611246565b5050505050505050565b600080516020612dc98339815191526112eb816116f0565b6001600160a01b038316600081815260046020526040808220805460ff19168615159081179091559051339391927f7fa523c84ab8d7fc5b72f08b9e46dbbf10c39e119a075b3e317002d14bc9f43691a4505050565b600080516020612da9833981519152611359816116f0565b600a80546001600160a01b0319166001600160a01b0384169081179091556040517fd2be862d755bca7e0d39772b2cab3a5578da9c285f69199f4c063c2294a7f36c90600090a25050565b6000828152602081905260409020600101546113bf816116f0565b6107c08383611f0e565b600080516020612da98339815191526113e1816116f0565b6001600160a01b0382166114375760405162461bcd60e51b815260206004820152601e60248201527f4552432d333634333a20496e76616c6964207a65726f2061646472657373000060448201526064016107fd565b600b5460405163040db3b560e41b81523060048201526001600160a01b03909116906340db3b5090602401600060405180830381600087803b15801561147c57600080fd5b505af1158015611490573d6000803e3d6000fd5b5050600b80546001600160a01b0319166001600160a01b038616908117909155604051631ffad50160e11b8152306004820152909250633ff5aa029150602401600060405180830381600087803b1580156114ea57600080fd5b505af11580156114fe573d6000803e3d6000fd5b50506040516001600160a01b03851692507f7f3a888862559648ec01d97deb7b5012bff86dc91e654a1de397170db40e35b69150600090a25050565b600080516020612dc9833981519152611552816116f0565b838281146115725760405162461bcd60e51b81526004016107fd90612c08565b60005b8181101561086f576115c587878381811061159257611592612c3f565b90506020020160208101906115a7919061292e565b8686848181106115b9576115b9612c3f565b905060200201356116fa565b600101611575565b6001600160a01b03831661162f5760405162461bcd60e51b815260206004820152602360248201527f4552432d333634333a20617070726f76652066726f6d207a65726f206164647260448201526265737360e81b60648201526084016107fd565b6001600160a01b03821661168f5760405162461bcd60e51b815260206004820152602160248201527f4552432d333634333a20617070726f766520746f207a65726f206164647265736044820152607360f81b60648201526084016107fd565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b610a268133612610565b6001600160a01b03821660009081526002602090815260408083205460059092529091205461172a908390612c88565b8110156117795760405162461bcd60e51b815260206004820181905260248201527f416d6f756e74206578636565647320617661696c61626c652062616c616e636560448201526064016107fd565b6001600160a01b03831660009081526005602052604090205461179d908390612c88565b6001600160a01b038416600081815260056020526040908190209290925590517fa065e63c631c86f1b9f66a4a2f63f2093bf1c2168d23290259dbd969e0222a45906117ec9085815260200190565b60405180910390a2505050565b6001600160a01b038216600081815260046020526040808220805460ff19168515159081179091559051339391927f7fa523c84ab8d7fc5b72f08b9e46dbbf10c39e119a075b3e317002d14bc9f43691a45050565b6001600160a01b0382166000908152600560205260409020548111156118d35760405162461bcd60e51b815260206004820152603460248201527f416d6f756e742073686f756c64206265206c657373207468616e206f7220657160448201527375616c20746f2066726f7a656e20746f6b656e7360601b60648201526084016107fd565b6001600160a01b0382166000818152600560205260409081902080548490039055517f9bed35cb62ad0dba04f9d5bfee4b5bc91443e77da8a65c4c84834c51bb08b0d6906119249084815260200190565b60405180910390a25050565b60015460ff16156119765760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107fd565b565b6001600160a01b038084166000908152600360209081526040808320938616835292905220546000198114611a0457818110156119f75760405162461bcd60e51b815260206004820152601f60248201527f455243333634333a20496e73756666696369656e7420616c6c6f77616e63650060448201526064016107fd565b611a0484848484036115cd565b50505050565b6001600160a01b038316611a6c5760405162461bcd60e51b8152602060048201526024808201527f4552432d333634333a207472616e736665722066726f6d207a65726f206164646044820152637265737360e01b60648201526084016107fd565b6001600160a01b038216611acd5760405162461bcd60e51b815260206004820152602260248201527f4552432d333634333a207472616e7366657220746f207a65726f206164647265604482015261737360f01b60648201526084016107fd565b6001600160a01b03821660009081526004602052604090205460ff16158015611b0f57506001600160a01b03831660009081526004602052604090205460ff16155b611b5b5760405162461bcd60e51b815260206004820152601760248201527f4552432d333634333a2057616c6c65742066726f7a656e00000000000000000060448201526064016107fd565b6001600160a01b03831660009081526002602052604090205481811015611bc45760405162461bcd60e51b815260206004820181905260248201527f4552432d333634333a20616d6f756e7420657863656564732062616c616e636560448201526064016107fd565b6001600160a01b038416600090815260056020526040902054611be79082612cdc565b821115611c365760405162461bcd60e51b815260206004820152601960248201527f4552432d333634333a20467265657a65642062616c616e63650000000000000060448201526064016107fd565b600a5460405163b9209e3360e01b81526001600160a01b0385811660048301529091169063b9209e3390602401602060405180830381865afa158015611c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca49190612c9b565b611cf05760405162461bcd60e51b815260206004820152601d60248201527f4552432d333634333a20556e7665726966696564206964656e7469747900000060448201526064016107fd565b600b546040516372331c7360e11b81526001600160a01b0386811660048301528581166024830152604482018590529091169063e46638e690606401602060405180830381865afa158015611d49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6d9190612c9b565b611db95760405162461bcd60e51b815260206004820152601c60248201527f4552432d333634333a20436f6d706c69616e6365206661696c7572650000000060448201526064016107fd565b6001600160a01b0380851660008181526002602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611e199086815260200190565b60405180910390a3600b546040516322ebca6d60e21b81523360048201526001600160a01b0385811660248301526044820185905290911690638baf29b4906064015b600060405180830381600087803b158015611e7657600080fd5b505af11580156112c9573d6000803e3d6000fd5b611e948282610d96565b610963576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611eca3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611f188282610d96565b15610963576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b611f7b612669565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b03821661201b5760405162461bcd60e51b815260206004820152601e60248201527f4552432d333634333a206d696e7420746f207a65726f2061646472657373000060448201526064016107fd565b600a5460405163b9209e3360e01b81526001600160a01b0384811660048301529091169063b9209e3390602401602060405180830381865afa158015612065573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120899190612c9b565b6120d55760405162461bcd60e51b815260206004820152601d60248201527f4552432d333634333a20556e7665726966696564206964656e7469747900000060448201526064016107fd565b600b546040516372331c7360e11b8152600060048201526001600160a01b038481166024830152604482018490529091169063e46638e690606401602060405180830381865afa15801561212d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121519190612c9b565b61219d5760405162461bcd60e51b815260206004820152601c60248201527f4552432d333634333a20436f6d706c69616e6365206661696c7572650000000060448201526064016107fd565b80600660008282546121af9190612c88565b90915550506001600160a01b038216600090815260026020526040812080548392906121dc908490612c88565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3600b54604051635f8dead360e01b81526001600160a01b0384811660048301526024820184905290911690635f8dead390604401600060405180830381600087803b15801561227057600080fd5b505af1158015610d8e573d6000803e3d6000fd5b6001600160a01b038316600090815260026020526040812054828110156122ed5760405162461bcd60e51b815260206004820152601c60248201527f4552432d333634333a2053656e646572206c6f772062616c616e63650000000060448201526064016107fd565b6001600160a01b0385166000908152600560205260408120546123109083612cdc565b9050808411156123a65760006123268286612cdc565b6001600160a01b03881660009081526005602052604090205490915061234d908290612cdc565b6001600160a01b038816600081815260056020526040908190209290925590517f9bed35cb62ad0dba04f9d5bfee4b5bc91443e77da8a65c4c84834c51bb08b0d69061239c9084815260200190565b60405180910390a2505b6123b1868686611a0a565b50600195945050505050565b6001600160a01b03821661241f5760405162461bcd60e51b8152602060048201526024808201527f4552432d333634333a206275726e2066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016107fd565b6001600160a01b038216600090815260026020526040902054818110156124885760405162461bcd60e51b815260206004820152601e60248201527f4552432d333634333a206275726e20657863656564732062616c616e6365000060448201526064016107fd565b6001600160a01b0383166000908152600560205260408120546124ab9083612cdc565b9050808311156125415760006124c18285612cdc565b6001600160a01b0386166000908152600560205260409020549091506124e8908290612cdc565b6001600160a01b038616600081815260056020526040908190209290925590517f9bed35cb62ad0dba04f9d5bfee4b5bc91443e77da8a65c4c84834c51bb08b0d6906125379084815260200190565b60405180910390a2505b6001600160a01b03841660008181526002602090815260408083208787039055600680548890039055518681529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3600b5460405163469753b960e11b81526001600160a01b0386811660048301526024820186905290911690638d2ea77290604401611e5c565b6125dd611930565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833611fa8565b61261a8282610d96565b61096357612627816126b2565b6126328360206126c4565b604051602001612643929190612cef565b60408051601f198184030181529082905262461bcd60e51b82526107fd916004016128b5565b60015460ff166119765760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016107fd565b60606106f06001600160a01b03831660145b606060006126d3836002612d64565b6126de906002612c88565b67ffffffffffffffff8111156126f6576126f6612d7b565b6040519080825280601f01601f191660200182016040528015612720576020820181803683370190505b509050600360fc1b8160008151811061273b5761273b612c3f565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061276a5761276a612c3f565b60200101906001600160f81b031916908160001a905350600061278e846002612d64565b612799906001612c88565b90505b6001811115612811576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106127cd576127cd612c3f565b1a60f81b8282815181106127e3576127e3612c3f565b60200101906001600160f81b031916908160001a90535060049490941c9361280a81612d91565b905061279c565b5083156128605760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107fd565b9392505050565b60006020828403121561287957600080fd5b81356001600160e01b03198116811461286057600080fd5b60005b838110156128ac578181015183820152602001612894565b50506000910152565b60208152600082518060208401526128d4816040850160208701612891565b601f01601f19169190910160400192915050565b80356001600160a01b03811681146128ff57600080fd5b919050565b6000806040838503121561291757600080fd5b612920836128e8565b946020939093013593505050565b60006020828403121561294057600080fd5b612860826128e8565b60008083601f84011261295b57600080fd5b50813567ffffffffffffffff81111561297357600080fd5b6020830191508360208260051b850101111561298e57600080fd5b9250929050565b600080600080604085870312156129ab57600080fd5b843567ffffffffffffffff808211156129c357600080fd5b6129cf88838901612949565b909650945060208701359150808211156129e857600080fd5b506129f587828801612949565b95989497509550505050565b600080600060608486031215612a1657600080fd5b612a1f846128e8565b9250612a2d602085016128e8565b9150604084013590509250925092565b600060208284031215612a4f57600080fd5b5035919050565b60008060408385031215612a6957600080fd5b82359150612a79602084016128e8565b90509250929050565b60008060008060008060608789031215612a9b57600080fd5b863567ffffffffffffffff80821115612ab357600080fd5b612abf8a838b01612949565b90985096506020890135915080821115612ad857600080fd5b612ae48a838b01612949565b90965094506040890135915080821115612afd57600080fd5b50612b0a89828a01612949565b979a9699509497509295939492505050565b600080600060608486031215612b3157600080fd5b612b3a846128e8565b9250612b48602085016128e8565b9150612b56604085016128e8565b90509250925092565b8015158114610a2657600080fd5b60008060408385031215612b8057600080fd5b612b89836128e8565b91506020830135612b9981612b5f565b809150509250929050565b60008060408385031215612bb757600080fd5b612bc0836128e8565b9150612a79602084016128e8565b600181811c90821680612be257607f821691505b602082108103612c0257634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601d908201527f4552432d333634333a2041727261792073697a65206d69736d61746368000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612c6757600080fd5b813561286081612b5f565b634e487b7160e01b600052601160045260246000fd5b808201808211156106f0576106f0612c72565b600060208284031215612cad57600080fd5b815161286081612b5f565b600060208284031215612cca57600080fd5b815161ffff8116811461286057600080fd5b818103818111156106f0576106f0612c72565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612d27816017850160208801612891565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612d58816028840160208801612891565b01602801949350505050565b80820281158282048414176106f0576106f0612c72565b634e487b7160e01b600052604160045260246000fd5b600081612da057612da0612c72565b50600019019056feb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214ecab5a0bfe0b79d2c4b1c2e02599fa044d115b7511f9659307cb4276950967709a2646970667358221220c5843cfc7e852816c984bfd64b859e0d1fe0dd70faafcfad1754ba0b292def3164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Returns the allowance of tokens that an owner has allowed a spender to spend.",
        "params": {
          "owner": "The address of the owner.",
          "spender": "The address of the spender."
        }
      },
      "approve(address,uint256)": {
        "params": {
          "amount": "The number of tokens to be spent",
          "spender": "The address of the account allowed to spend the tokens"
        },
        "returns": {
          "_0": "A boolean that indicates if the operation was successful."
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account."
        },
        "returns": {
          "_0": "uint256 The balance of the specified account."
        }
      },
      "batchBurn(address[],uint256[])": {
        "details": "Perform a batch burn of tokens.",
        "params": {
          "accounts": "An array of addresses from which to burn tokens.",
          "amounts": "An array of amounts to burn."
        }
      },
      "batchForcedTransfer(address[],address[],uint256[])": {
        "details": "Perform a batch forced transfer of tokens.",
        "params": {
          "amounts": "An array of amounts to transfer.",
          "fromList": "An array of sender addresses.",
          "toList": "An array of receiver addresses."
        }
      },
      "batchFreezePartialTokens(address[],uint256[])": {
        "details": "Perform a batch freezing of partial tokens from multiple addresses.",
        "params": {
          "accounts": "An array of addresses from which to freeze tokens.",
          "amounts": "An array of amounts to freeze."
        }
      },
      "batchMint(address[],uint256[])": {
        "details": "Perform a batch minting of tokens.",
        "params": {
          "amounts": "An array of amounts to mint.",
          "toList": "An array of receiver addresses."
        }
      },
      "batchSetAddressFrozen(address[],bool[])": {
        "details": "Perform a batch freezing / unfreezing of addresses.",
        "params": {
          "accounts": "An array of addresses to freeze.",
          "freeze": "An array of boolean values indicating whether to freeze the corresponding address."
        }
      },
      "batchTransfer(address[],uint256[])": {
        "params": {
          "amounts": "An array of amounts to transfer.",
          "toList": "An array of receiver addresses."
        }
      },
      "batchTransferFrom(address[],address[],uint256[])": {
        "details": "Perform a batch forced transfer of tokens.",
        "params": {
          "amounts": "An array of amounts to transfer.",
          "fromList": "An array of sender addresses.",
          "toList": "An array of receiver addresses."
        }
      },
      "batchUnfreezePartialTokens(address[],uint256[])": {
        "details": "Perform a batch unfreezing of partial tokens from multiple addresses.",
        "params": {
          "accounts": "An array of addresses from which to unfreeze tokens.",
          "amounts": "An array of amounts to unfreeze."
        }
      },
      "burn(address,uint256)": {
        "params": {
          "account": "The address from which the tokens will be burned",
          "amount": "The number of tokens to be burned"
        }
      },
      "compliance()": {
        "details": "Returns the current Compliance contract linked to the token."
      },
      "constructor": {
        "details": "the constructor initiates the token contract _msgSender() is set automatically as the owner of the smart contract",
        "params": {
          "compliance_": "the address of the compliance contract linked to the token",
          "decimals_": "the decimals of the token",
          "identityRegistry_": "the address of the Identity registry linked to the token",
          "name_": "the name of the token",
          "onchainID_": "the address of the onchainID of the token emits an `UpdatedTokenInformation` event emits an `IdentityRegistryAdded` event emits a `ComplianceAdded` event",
          "symbol_": "the symbol of the token"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals the token uses."
      },
      "decreaseAllowance(address,uint256)": {
        "params": {
          "_subtractedValue": "The decrease in allowance",
          "spender": "The address of the account allowed to spend the tokens"
        },
        "returns": {
          "_0": "A boolean that indicates if the operation was successful."
        }
      },
      "forcedTransfer(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to be transferred",
          "from": "The address from which the tokens will be transferred",
          "to": "The address to which the tokens will be transferred"
        },
        "returns": {
          "_0": "Returns true if the transfer was successful, otherwise false"
        }
      },
      "freezePartialTokens(address,uint256)": {
        "params": {
          "account": "The account in which the tokens will be frozen",
          "amount": "The amount of tokens to be frozen"
        }
      },
      "getFrozenTokens(address)": {
        "details": "Returns the number of frozen tokens of an address.",
        "params": {
          "account": "The address to check."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "identityRegistry()": {
        "details": "Returns the current Identity Registry contract linked to the token."
      },
      "increaseAllowance(address,uint256)": {
        "params": {
          "_addedValue": "The increase in allowance",
          "spender": "The address of the account allowed to spend the tokens"
        },
        "returns": {
          "_0": "A boolean that indicates if the operation was successful."
        }
      },
      "isFrozen(address)": {
        "details": "Returns whether an address is frozen.",
        "params": {
          "account": "The address to check."
        }
      },
      "mint(address,uint256)": {
        "params": {
          "_to": "The address that will receive the minted tokens",
          "amount": "The number of tokens to be minted"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "onchainID()": {
        "details": "Returns the onchainID of the token."
      },
      "pause()": {
        "details": "Can only be called by an agent of the contract"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "recoveryAddress(address,address,address)": {
        "details": "Recover tokens from a lost wallet and transfer them to a new wallet. Can only be called by an agent of the contract.",
        "params": {
          "investorOnchainID": "The onchainID of the investor.",
          "lostWallet": "The address of the lost wallet.",
          "newWallet": "The address of the new wallet."
        },
        "returns": {
          "_0": "true if the recovery is successful."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setAddressFrozen(address,bool)": {
        "params": {
          "account": "The address to be frozen or unfrozen",
          "freeze": "The boolean value indicating whether to freeze (true) or unfreeze (false) the account"
        }
      },
      "setCompliance(address)": {
        "params": {
          "newCompliance": "The address of the new Compliance contract"
        }
      },
      "setIdentityRegistry(address)": {
        "params": {
          "newIdentityRegistry": "The address of the new Identity Registry contract"
        }
      },
      "setOnchainID(address)": {
        "details": "Set the onchainID of a token. Can only be called by an owner of the contract.",
        "params": {
          "onchainID_": "The address of the onchainID."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Returns the symbol of the token."
      },
      "totalSupply()": {
        "details": "Returns the total supply of the token."
      },
      "transfer(address,uint256)": {
        "details": "Transfer tokens to another address. Requires that the _msgSender() and to addresses are not frozen and that the value should not exceed available balance.",
        "params": {
          "amount": "The number of tokens to transfer.",
          "to": "The address of the receiver."
        },
        "returns": {
          "_0": "true if the transfer is successful."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "ERC-20 overridden function that include logic to check for trade validityTransfer tokens from one address to another. Requires that the `from` and `to` addresses are not frozen and that the value should not exceed available balance.",
        "params": {
          "amount": "The number of tokens to transfer.",
          "from": "The address of the sender.",
          "to": "The address of the receiver."
        },
        "returns": {
          "_0": "true if the transfer is successful."
        }
      },
      "unfreezePartialTokens(address,uint256)": {
        "params": {
          "account": "The account from which the tokens will be unfrozen",
          "amount": "The amount of tokens to be unfrozen"
        }
      },
      "unpause()": {
        "details": "Can only be called by an agent of the contract"
      },
      "version()": {
        "details": "Returns the version of the token."
      }
    },
    "stateVariables": {
      "_balances": {
        "details": "ERC20 basic variables"
      },
      "_compliance": {
        "details": "Compliance contract linked to the onchain validator system"
      },
      "_frozen": {
        "details": "Variables of freeze and pause functions"
      },
      "_identityRegistry": {
        "details": "Identity Registry contract used by the onchain validator system"
      },
      "_name": {
        "details": "Token information"
      }
    },
    "title": "ERC-3643 - T-Rex Token (Version RAPTOR-5.0.0)",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AddressFrozen(address,bool,address)": {
        "notice": "this event is emitted when the wallet of an investor is frozen or unfrozen  the event is emitted by setAddressFrozen and batchSetAddressFrozen functions  `_userAddress` is the wallet of the investor that is concerned by the freezing status  `_isFrozen` is the freezing status of the wallet  if `_isFrozen` equals `true` the wallet is frozen after emission of the event  if `_isFrozen` equals `false` the wallet is unfrozen after emission of the event  `_owner` is the address of the agent who called the function to freeze the wallet"
      },
      "ComplianceAdded(address)": {
        "notice": "this event is emitted when the Compliance has been set for the token  the event is emitted by the token constructor and by the setCompliance function  `_compliance` is the address of the Compliance contract of the token"
      },
      "IdentityRegistryAdded(address)": {
        "notice": "this event is emitted when the IdentityRegistry has been set for the token  the event is emitted by the token constructor and by the setIdentityRegistry function  `_identityRegistry` is the address of the Identity Registry of the token"
      },
      "RecoverySuccess(address,address,address)": {
        "notice": "this event is emitted when an investor successfully recovers his tokens  the event is emitted by the recoveryAddress function  `_lostWallet` is the address of the wallet that the investor lost access to  `_newWallet` is the address of the wallet that the investor provided for the recovery  `_investorOnchainID` is the address of the onchainID of the investor who asked for a recovery"
      },
      "TokensFrozen(address,uint256)": {
        "notice": "this event is emitted when a certain amount of tokens is frozen on a wallet  the event is emitted by freezePartialTokens and batchFreezePartialTokens functions  `_userAddress` is the wallet of the investor that is concerned by the freezing status  `_amount` is the amount of tokens that are frozen"
      },
      "TokensUnfrozen(address,uint256)": {
        "notice": "this event is emitted when a certain amount of tokens is unfrozen on a wallet  the event is emitted by unfreezePartialTokens and batchUnfreezePartialTokens functions  `_userAddress` is the wallet of the investor that is concerned by the freezing status  `_amount` is the amount of tokens that are unfrozen"
      },
      "UpdatedOnchainID(address)": {
        "notice": "this event is emitted when the onchainID  is updated.  the event is emitted by the token init function and by the setOnchainID function  `_newOnchainID` is the address of the onchainID of the token"
      }
    },
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Approve `amount` tokens to be spent by `spender`"
      },
      "balanceOf(address)": {
        "notice": "Get the balance of a specified account."
      },
      "burn(address,uint256)": {
        "notice": "Burns tokens from a specified address"
      },
      "decreaseAllowance(address,uint256)": {
        "notice": "Decrease the allowance provided to `spender` by the caller"
      },
      "forcedTransfer(address,address,uint256)": {
        "notice": "Executes a forced transfer of tokens from one address to another"
      },
      "freezePartialTokens(address,uint256)": {
        "notice": "Freezes a specified amount of tokens in a specified account"
      },
      "increaseAllowance(address,uint256)": {
        "notice": "Increase the allowance provided to `spender` by the caller"
      },
      "mint(address,uint256)": {
        "notice": "Mints new tokens and assigns them to a specified address"
      },
      "pause()": {
        "notice": "Pause all token operations"
      },
      "setAddressFrozen(address,bool)": {
        "notice": "Freezes or unfreezes a specified address"
      },
      "setCompliance(address)": {
        "notice": "Sets the Compliance contract address"
      },
      "setIdentityRegistry(address)": {
        "notice": "Sets the Identity Registry contract address"
      },
      "setOnchainID(address)": {
        "notice": "Emits an UpdatedOnchainID event."
      },
      "transfer(address,uint256)": {
        "notice": "ERC-20 overridden function that include logic to check for trade validity."
      },
      "unfreezePartialTokens(address,uint256)": {
        "notice": "Unfreezes a specified amount of tokens in a specified account"
      },
      "unpause()": {
        "notice": "Unpause all token operations"
      }
    },
    "notice": "An ERC-3643 compliant token with onchain validators and compliance checks.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 354,
        "contract": "contracts/token/Token.sol:Token",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)349_storage)"
      },
      {
        "astId": 736,
        "contract": "contracts/token/Token.sol:Token",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 4561,
        "contract": "contracts/token/Token.sol:Token",
        "label": "_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4567,
        "contract": "contracts/token/Token.sol:Token",
        "label": "_allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4572,
        "contract": "contracts/token/Token.sol:Token",
        "label": "_frozen",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4576,
        "contract": "contracts/token/Token.sol:Token",
        "label": "_frozenAmounts",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4578,
        "contract": "contracts/token/Token.sol:Token",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4581,
        "contract": "contracts/token/Token.sol:Token",
        "label": "_name",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 4583,
        "contract": "contracts/token/Token.sol:Token",
        "label": "_symbol",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 4587,
        "contract": "contracts/token/Token.sol:Token",
        "label": "_onchainID",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 4600,
        "contract": "contracts/token/Token.sol:Token",
        "label": "_identityRegistry",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IIdentityRegistry)4148"
      },
      {
        "astId": 4604,
        "contract": "contracts/token/Token.sol:Token",
        "label": "_compliance",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(ICompliance)2633"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICompliance)2633": {
        "encoding": "inplace",
        "label": "contract ICompliance",
        "numberOfBytes": "20"
      },
      "t_contract(IIdentityRegistry)4148": {
        "encoding": "inplace",
        "label": "contract IIdentityRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)349_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)349_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)349_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 346,
            "contract": "contracts/token/Token.sol:Token",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 348,
            "contract": "contracts/token/Token.sol:Token",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}