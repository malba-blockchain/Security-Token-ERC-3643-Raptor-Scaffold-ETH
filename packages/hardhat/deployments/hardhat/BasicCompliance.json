{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "TokenBound",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "TokenUnbound",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "bindToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "canTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "created",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "destroyed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isTokenBound",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenBound",
      "outputs": [
        {
          "internalType": "contract IToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferred",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "unbindToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x39d88e5ecfeb389d697e4e572827732eaae4968e9c11033a3cf7e88e53c3cad7",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "787650",
    "logsBloom": "0x
    "blockHash": "0xf5da3c93ad03e0fa6fdbaf9e62a3279172f6e35eb217c8deb21902ceaa551a16",
    "transactionHash": "0x39d88e5ecfeb389d697e4e572827732eaae4968e9c11033a3cf7e88e53c3cad7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0x39d88e5ecfeb389d697e4e572827732eaae4968e9c11033a3cf7e88e53c3cad7",
        "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf5da3c93ad03e0fa6fdbaf9e62a3279172f6e35eb217c8deb21902ceaa551a16"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0x39d88e5ecfeb389d697e4e572827732eaae4968e9c11033a3cf7e88e53c3cad7",
        "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xf5da3c93ad03e0fa6fdbaf9e62a3279172f6e35eb217c8deb21902ceaa551a16"
      }
    ],
    "blockNumber": 9,
    "cumulativeGasUsed": "787650",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d310b4fa677a3832b165feff486fc26b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"TokenBound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"TokenUnbound\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"bindToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"canTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"created\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"destroyed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenBound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBound\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"unbindToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bindToken(address)\":{\"details\":\"See {ICompliance-bindToken}.\"},\"canTransfer(address,address,uint256)\":{\"details\":\"See {ICompliance-canTransfer}.\"},\"created(address,uint256)\":{\"details\":\"See {ICompliance-created}.\"},\"destroyed(address,uint256)\":{\"details\":\"See {ICompliance-destroyed}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isTokenBound(address)\":{\"details\":\"See {ICompliance-isTokenBound}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unbindToken(address)\":{\"details\":\"See {ICompliance-unbindToken}.\"}},\"version\":1},\"userdoc\":{\"events\":{\"TokenBound(address)\":{\"notice\":\"this event is emitted when a token has been bound to the compliance contract  the event is emitted by the bindToken function  `_token` is the address of the token to bind\"},\"TokenUnbound(address)\":{\"notice\":\"this event is emitted when a token has been unbound from the compliance contract  the event is emitted by the unbindToken function  `_token` is the address of the token to unbind\"}},\"kind\":\"user\",\"methods\":{\"tokenBound()\":{\"notice\":\"Mapping of tokens linked to the compliance contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/compliance/BasicCompliance.sol\":\"BasicCompliance\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"./IIdentity.sol\\\";\\n\\ninterface IClaimIssuer is IIdentity {\\n\\n    /**\\n     * @dev Emitted when a claim is revoked.\\n     *\\n     * Specification: MUST be triggered when revoking a claim.\\n     */\\n    event ClaimRevoked(bytes indexed signature);\\n\\n    /**\\n     * @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\\n     * @notice will fetch the claim from the identity contract (unsafe).\\n     * @param _claimId the id of the claim\\n     * @param _identity the address of the identity contract\\n     * @return isRevoked true when the claim is revoked\\n     */\\n    function revokeClaim(bytes32 _claimId, address _identity) external returns(bool);\\n\\n    /**\\n     * @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\\n     * @param signature the signature of the claim\\n     */\\n    function revokeClaimBySignature(bytes calldata signature) external;\\n\\n    /**\\n     * @dev Returns revocation status of a claim.\\n     * @param _sig the signature of the claim\\n     * @return isRevoked true if the claim is revoked and false otherwise\\n     */\\n    function isClaimRevoked(bytes calldata _sig) external view returns (bool);\\n\\n    /**\\n     * @dev Checks if a claim is valid.\\n     * @param _identity the identity contract related to the claim\\n     * @param claimTopic the claim topic of the claim\\n     * @param sig the signature of the claim\\n     * @param data the data field of the claim\\n     * @return claimValid true if the claim is valid, false otherwise\\n     */\\n    function isClaimValid(\\n        IIdentity _identity,\\n        uint256 claimTopic,\\n        bytes calldata sig,\\n        bytes calldata data)\\n    external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3a12f842236b7ff3579bbd245fb0b243f77e98cd721ea165d679324a099af20d\",\"license\":\"GPL-3.0\"},\"@onchain-id/solidity/contracts/interface/IERC734.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev interface of the ERC734 (Key Holder) standard as defined in the EIP.\\n */\\ninterface IERC734 {\\n\\n    /**\\n     * @dev Emitted when an execution request was approved.\\n     *\\n     * Specification: MUST be triggered when approve was successfully called.\\n     */\\n    event Approved(uint256 indexed executionId, bool approved);\\n\\n    /**\\n     * @dev Emitted when an execute operation was approved and successfully performed.\\n     *\\n     * Specification: MUST be triggered when approve was called and the execution was successfully approved.\\n     */\\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n    /**\\n     * @dev Emitted when an execution request was performed via `execute`.\\n     *\\n     * Specification: MUST be triggered when execute was successfully called.\\n     */\\n    event ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n    /**\\n     * @dev Emitted when an execute operation was called and failed\\n     *\\n     * Specification: MUST be triggered when execute call failed\\n     */\\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n    /**\\n     * @dev Emitted when a key was added to the Identity.\\n     *\\n     * Specification: MUST be triggered when addKey was successfully called.\\n     */\\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n\\n    /**\\n     * @dev Emitted when a key was removed from the Identity.\\n     *\\n     * Specification: MUST be triggered when removeKey was successfully called.\\n     */\\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n\\n    /**\\n     * @dev Adds a _key to the identity. The _purpose specifies the purpose of the key.\\n     *\\n     * Triggers Event: `KeyAdded`\\n     *\\n     * Specification: MUST only be done by keys of purpose 1, or the identity\\n     * itself. If it's the identity itself, the approval process will determine its approval.\\n     */\\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external returns (bool success);\\n\\n    /**\\n    * @dev Approves an execution.\\n    *\\n    * Triggers Event: `Approved`\\n    * Triggers on execution successful Event: `Executed`\\n    * Triggers on execution failure Event: `ExecutionFailed`\\n    */\\n    function approve(uint256 _id, bool _approve) external returns (bool success);\\n\\n    /**\\n     * @dev Removes _purpose for _key from the identity.\\n     *\\n     * Triggers Event: `KeyRemoved`\\n     *\\n     * Specification: MUST only be done by keys of purpose 1, or the identity itself.\\n     * If it's the identity itself, the approval process will determine its approval.\\n     */\\n    function removeKey(bytes32 _key, uint256 _purpose) external returns (bool success);\\n\\n    /**\\n     * @dev Passes an execution instruction to an ERC734 identity.\\n     * How the execution is handled is up to the identity implementation:\\n     * An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to\\n     * approve this execution.\\n     * Execute COULD be used as the only accessor for `addKey` and `removeKey`.\\n     *\\n     * Triggers Event: ExecutionRequested\\n     * Triggers on direct execution Event: Executed\\n     */\\n    function execute(address _to, uint256 _value, bytes calldata _data) external payable returns (uint256 executionId);\\n\\n    /**\\n     * @dev Returns the full key data, if present in the identity.\\n     */\\n    function getKey(bytes32 _key) external view returns (uint256[] memory purposes, uint256 keyType, bytes32 key);\\n\\n    /**\\n     * @dev Returns the list of purposes associated with a key.\\n     */\\n    function getKeyPurposes(bytes32 _key) external view returns(uint256[] memory _purposes);\\n\\n    /**\\n     * @dev Returns an array of public key bytes32 held by this identity.\\n     */\\n    function getKeysByPurpose(uint256 _purpose) external view returns (bytes32[] memory keys);\\n\\n    /**\\n     * @dev Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE.\\n     */\\n    function keyHasPurpose(bytes32 _key, uint256 _purpose) external view returns (bool exists);\\n}\\n\",\"keccak256\":\"0x8c8a5a7951ee25569288c0c6662b59599deec7d0f2fcb74c8f80a8fd9354e8af\",\"license\":\"GPL-3.0\"},\"@onchain-id/solidity/contracts/interface/IERC735.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev interface of the ERC735 (Claim Holder) standard as defined in the EIP.\\n */\\ninterface IERC735 {\\n\\n    /**\\n     * @dev Emitted when a claim was added.\\n     *\\n     * Specification: MUST be triggered when a claim was successfully added.\\n     */\\n    event ClaimAdded(\\n        bytes32 indexed claimId,\\n        uint256 indexed topic,\\n        uint256 scheme,\\n        address indexed issuer,\\n        bytes signature,\\n        bytes data,\\n        string uri);\\n\\n    /**\\n     * @dev Emitted when a claim was removed.\\n     *\\n     * Specification: MUST be triggered when removeClaim was successfully called.\\n     */\\n    event ClaimRemoved(\\n        bytes32 indexed claimId,\\n        uint256 indexed topic,\\n        uint256 scheme,\\n        address indexed issuer,\\n        bytes signature,\\n        bytes data,\\n        string uri);\\n\\n    /**\\n     * @dev Emitted when a claim was changed.\\n     *\\n     * Specification: MUST be triggered when addClaim was successfully called on an existing claimId.\\n     */\\n    event ClaimChanged(\\n        bytes32 indexed claimId,\\n        uint256 indexed topic,\\n        uint256 scheme,\\n        address indexed issuer,\\n        bytes signature,\\n        bytes data,\\n        string uri);\\n\\n    /**\\n     * @dev Add or update a claim.\\n     *\\n     * Triggers Event: `ClaimAdded`, `ClaimChanged`\\n     *\\n     * Specification: Add or update a claim from an issuer.\\n     *\\n     * _signature is a signed message of the following structure:\\n     * `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`.\\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`.\\n     */\\n    function addClaim(\\n        uint256 _topic,\\n        uint256 _scheme,\\n        address issuer,\\n        bytes calldata _signature,\\n        bytes calldata _data,\\n        string calldata _uri)\\n    external returns (bytes32 claimRequestId);\\n\\n    /**\\n     * @dev Removes a claim.\\n     *\\n     * Triggers Event: `ClaimRemoved`\\n     *\\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\\n     */\\n    function removeClaim(bytes32 _claimId) external returns (bool success);\\n\\n    /**\\n     * @dev Get a claim by its ID.\\n     *\\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\\n     */\\n    function getClaim(bytes32 _claimId)\\n    external view returns(\\n        uint256 topic,\\n        uint256 scheme,\\n        address issuer,\\n        bytes memory signature,\\n        bytes memory data,\\n        string memory uri);\\n\\n    /**\\n     * @dev Returns an array of claim IDs by topic.\\n     */\\n    function getClaimIdsByTopic(uint256 _topic) external view returns(bytes32[] memory claimIds);\\n}\\n\",\"keccak256\":\"0xaaea6f3ecdc5f30e795e07aacdfc1b177741ef174910e943e96f6de7a8db6efb\",\"license\":\"GPL-3.0\"},\"@onchain-id/solidity/contracts/interface/IIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC734.sol\\\";\\nimport \\\"./IERC735.sol\\\";\\n\\n// solhint-disable-next-line no-empty-blocks\\ninterface IIdentity is IERC734, IERC735 {\\n    /**\\n     * @dev Checks if a claim is valid.\\n     * @param _identity the identity contract related to the claim\\n     * @param claimTopic the claim topic of the claim\\n     * @param sig the signature of the claim\\n     * @param data the data field of the claim\\n     * @return claimValid true if the claim is valid, false otherwise\\n     */\\n    function isClaimValid(\\n        IIdentity _identity,\\n        uint256 claimTopic,\\n        bytes calldata sig,\\n        bytes calldata data)\\n    external view returns (bool);\\n}\\n\",\"keccak256\":\"0x206c93ed62a48802edcad87e229f53c74817349a49f5ef21ea4780ab27b39cdf\",\"license\":\"GPL-3.0\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x48771281a69d34c4ca41a092e82ebedd783ed5540b3098c97b978345f0257b54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/compliance/BasicCompliance.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./interface/ICompliance.sol\\\";\\r\\nimport \\\"../token/IToken.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract BasicCompliance is ICompliance, AccessControl {\\r\\n    /// Mapping between agents and their statuses\\r\\n    mapping(address => bool) private _tokenAgentsList;\\r\\n    /// Mapping of tokens linked to the compliance contract\\r\\n    IToken public tokenBound;\\r\\n\\r\\n    // keccak256(ADMIN_ROLE)\\r\\n    bytes32 public constant ADMIN_ROLE =\\r\\n        0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775;\\r\\n\\r\\n    // keccak256(TOKEN_ROLE)\\r\\n    bytes32 public constant TOKEN_ROLE =\\r\\n        0xa7197c38d9c4c7450c7f2cd20d0a17cbe7c344190d6c82a6b49a146e62439ae4;\\r\\n\\r\\n    constructor() {\\r\\n        _grantRole(0x00, _msgSender());\\r\\n        _grantRole(ADMIN_ROLE, _msgSender());\\r\\n        console.log(\\\"GOT INTO CONSTRUCTOR\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @dev See {ICompliance-bindToken}.\\r\\n     */\\r\\n    function bindToken(address _token) external {\\r\\n        require(\\r\\n            hasRole(ADMIN_ROLE, _msgSender()) ||\\r\\n                address(tokenBound) == address(0),\\r\\n            \\\"ERC-3643: Caller not authorized\\\"\\r\\n        );\\r\\n        tokenBound = IToken(_token);\\r\\n        emit TokenBound(_token);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @dev See {ICompliance-unbindToken}.\\r\\n     */\\r\\n    function unbindToken(address _token) external {\\r\\n        require(\\r\\n            hasRole(ADMIN_ROLE, _msgSender()) ||\\r\\n                hasRole(TOKEN_ROLE, _msgSender()),\\r\\n            \\\"ERC-3643: Caller not authorized\\\"\\r\\n        );\\r\\n        require(_token == address(tokenBound), \\\"ERC-3643: Token not bound\\\");\\r\\n        delete tokenBound;\\r\\n        emit TokenUnbound(_token);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     *  @dev See {ICompliance-transferred}.\\r\\n     */\\r\\n    function transferred(address _from, address _to, uint256 _value) external {}\\r\\n\\r\\n    /**\\r\\n     *  @dev See {ICompliance-created}.\\r\\n     */\\r\\n\\r\\n    function created(address _to, uint256 _value) external {}\\r\\n\\r\\n    /**\\r\\n     *  @dev See {ICompliance-destroyed}.\\r\\n     */\\r\\n    function destroyed(address _from, uint256 _value) external {}\\r\\n\\r\\n    /**\\r\\n     *  @dev See {ICompliance-canTransfer}.\\r\\n     */\\r\\n    function canTransfer(\\r\\n        address /*_from*/,\\r\\n        address /*_to*/,\\r\\n        uint256 /*_value*/\\r\\n    ) external view returns (bool) {\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @dev See {ICompliance-isTokenBound}.\\r\\n     */\\r\\n    function isTokenBound(address _token) external view returns (bool) {\\r\\n        return (_token == address(tokenBound));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x275648617a4e6982d6f325f61102bf863dff8207a3df58fa5ed0c4f188dd6225\",\"license\":\"GPL-3.0\"},\"contracts/compliance/interface/ICompliance.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface ICompliance {\\r\\n    /**\\r\\n     *  this event is emitted when a token has been bound to the compliance contract\\r\\n     *  the event is emitted by the bindToken function\\r\\n     *  `_token` is the address of the token to bind\\r\\n     */\\r\\n    event TokenBound(address _token);\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when a token has been unbound from the compliance contract\\r\\n     *  the event is emitted by the unbindToken function\\r\\n     *  `_token` is the address of the token to unbind\\r\\n     */\\r\\n    event TokenUnbound(address _token);\\r\\n\\r\\n    /**\\r\\n     *  @dev binds a token to the compliance contract\\r\\n     *  @param _token address of the token to bind\\r\\n     *  Emits a TokenBound event\\r\\n     */\\r\\n    function bindToken(address _token) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev unbinds a token from the compliance contract\\r\\n     *  @param _token address of the token to unbind\\r\\n     *  Emits a TokenUnbound event\\r\\n     */\\r\\n    function unbindToken(address _token) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev function called whenever tokens are transferred\\r\\n     *  from one wallet to another\\r\\n     *  this function can update state variables in the compliance contract\\r\\n     *  these state variables being used by `canTransfer` to decide if a transfer\\r\\n     *  is compliant or not depending on the values stored in these state variables and on\\r\\n     *  the parameters of the compliance smart contract\\r\\n     *  @param _from The address of the sender\\r\\n     *  @param _to The address of the receiver\\r\\n     *  @param _amount The amount of tokens involved in the transfer\\r\\n     */\\r\\n    function transferred(address _from, address _to, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev function called whenever tokens are created\\r\\n     *  on a wallet\\r\\n     *  this function can update state variables in the compliance contract\\r\\n     *  these state variables being used by `canTransfer` to decide if a transfer\\r\\n     *  is compliant or not depending on the values stored in these state variables and on\\r\\n     *  the parameters of the compliance smart contract\\r\\n     *  @param _to The address of the receiver\\r\\n     *  @param _amount The amount of tokens involved in the transfer\\r\\n     */\\r\\n    function created(address _to, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev function called whenever tokens are destroyed\\r\\n     *  this function can update state variables in the compliance contract\\r\\n     *  these state variables being used by `canTransfer` to decide if a transfer\\r\\n     *  is compliant or not depending on the values stored in these state variables and on\\r\\n     *  the parameters of the compliance smart contract\\r\\n     *  @param _from The address of the receiver\\r\\n     *  @param _amount The amount of tokens involved in the transfer\\r\\n     */\\r\\n    function destroyed(address _from, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns true if the address given corresponds to a token that is bound with the Compliance contract\\r\\n     *  @param _token address of the token\\r\\n     */\\r\\n    function isTokenBound(address _token) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     *  @dev checks that the transfer is compliant.\\r\\n     *  default compliance always returns true\\r\\n     *  READ ONLY FUNCTION, this function cannot be used to increment\\r\\n     *  counters, emit events, ...\\r\\n     *  @param _from The address of the sender\\r\\n     *  @param _to The address of the receiver\\r\\n     *  @param _amount The amount of tokens involved in the transfer\\r\\n     */\\r\\n    function canTransfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xf0d8864da7d223598fcaa0e7c3ae464ef21be0b016c62bfd8e38e51def432607\",\"license\":\"GPL-3.0\"},\"contracts/registry/interface/IClaimIssuersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\\\";\\r\\n\\r\\ninterface IClaimIssuersRegistry {\\r\\n    /**\\r\\n     *  this event is emitted when a claim issuer is added in the registry.\\r\\n     *  the event is emitted by the addClaimIssuer function\\r\\n     *  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract\\r\\n     *  `claimTopics` is the set of claims that the claim issuer is allowed to emit\\r\\n     */\\r\\n    event ClaimIssuerAdded(\\r\\n        IClaimIssuer indexed claimIssuer,\\r\\n        uint256[] claimTopics\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when a claim issuer is removed from the registry.\\r\\n     *  the event is emitted by the removeClaimIssuer function\\r\\n     *  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract\\r\\n     */\\r\\n    event ClaimIssuerRemoved(IClaimIssuer indexed claimIssuer);\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when the set of claim topics is changed for a given claim issuer.\\r\\n     *  the event is emitted by the updateIssuerClaimTopics function\\r\\n     *  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract\\r\\n     *  `claimTopics` is the set of claims that the claim issuer is allowed to emit\\r\\n     */\\r\\n    event ClaimTopicsUpdated(\\r\\n        IClaimIssuer indexed claimIssuer,\\r\\n        uint256[] claimTopics\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  @dev registers a ClaimIssuer contract as claim claim issuer.\\r\\n     *  Requires that a ClaimIssuer contract doesn't already exist\\r\\n     *  Requires that the claimTopics set is not empty\\r\\n     *  Requires that there is no more than 15 claimTopics\\r\\n     *  Requires that there is no more than 50 Claim issuers\\r\\n     *  @param _claimIssuer The ClaimIssuer contract address of the claim claim issuer.\\r\\n     *  @param _claimTopics the set of claim topics that the claim issuer is allowed to emit\\r\\n     *  This function can only be called by the owner of the Claim Issuers Registry contract\\r\\n     *  emits a `ClaimIssuerAdded` event\\r\\n     */\\r\\n    function addClaimIssuer(\\r\\n        IClaimIssuer _claimIssuer,\\r\\n        uint256[] calldata _claimTopics\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Removes the ClaimIssuer contract of a claim claim issuer.\\r\\n     *  Requires that the claim issuer contract to be registered first\\r\\n     *  @param _claimIssuer the claim issuer to remove.\\r\\n     *  This function can only be called by the owner of the Claim Issuers Registry contract\\r\\n     *  emits a `ClaimIssuerRemoved` event\\r\\n     */\\r\\n    function removeClaimIssuer(IClaimIssuer _claimIssuer) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Updates the set of claim topics that a claim issuer is allowed to emit.\\r\\n     *  Requires that this ClaimIssuer contract already exists in the registry\\r\\n     *  Requires that the provided claimTopics set is not empty\\r\\n     *  Requires that there is no more than 15 claimTopics\\r\\n     *  @param _claimIssuer the claim issuer to update.\\r\\n     *  @param _claimTopics the set of claim topics that the claim issuer is allowed to emit\\r\\n     *  This function can only be called by the owner of the Claim Issuers Registry contract\\r\\n     *  emits a `ClaimTopicsUpdated` event\\r\\n     */\\r\\n    function updateIssuerClaimTopics(\\r\\n        IClaimIssuer _claimIssuer,\\r\\n        uint256[] calldata _claimTopics\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Function for getting all the claim claim issuers stored.\\r\\n     *  @return array of all claim issuers registered.\\r\\n     */\\r\\n    function getClaimIssuers() external view returns (IClaimIssuer[] memory);\\r\\n\\r\\n    /**\\r\\n     *  @dev Function for getting all the claim issuer allowed for a given claim topic.\\r\\n     *  @param claimTopic the claim topic to get the claim issuers for.\\r\\n     *  @return array of all claim issuer addresses that are allowed for the given claim topic.\\r\\n     */\\r\\n    function getClaimIssuersForClaimTopic(\\r\\n        uint256 claimTopic\\r\\n    ) external view returns (IClaimIssuer[] memory);\\r\\n\\r\\n    /**\\r\\n     *  @dev Checks if the ClaimIssuer contract is claim\\r\\n     *  @param _issuer the address of the ClaimIssuer contract\\r\\n     *  @return true if the issuer is claim, false otherwise.\\r\\n     */\\r\\n    function isClaimIssuer(IClaimIssuer _issuer) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     *  @dev Function for getting all the claim topic of claim claim issuer\\r\\n     *  Requires the provided ClaimIssuer contract to be registered in the claim issuers registry.\\r\\n     *  @param _claimIssuer the claim issuer concerned.\\r\\n     *  @return The set of claim topics that the claim issuer is allowed to emit\\r\\n     */\\r\\n    function getClaimIssuerClaimTopics(\\r\\n        IClaimIssuer _claimIssuer\\r\\n    ) external view returns (uint256[] memory);\\r\\n\\r\\n    /**\\r\\n     *  @dev Function for checking if the claim claim issuer is allowed\\r\\n     *  to emit a certain claim topic\\r\\n     *  @param _issuer the address of the claim issuer's ClaimIssuer contract\\r\\n     *  @param _claimTopic the Claim Topic that has to be checked to know if the `issuer` is allowed to emit it\\r\\n     *  @return true if the issuer is claim for this claim topic.\\r\\n     */\\r\\n    function hasClaimTopic(\\r\\n        IClaimIssuer _issuer,\\r\\n        uint256 _claimTopic\\r\\n    ) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x36ebccbb89041f7f9f25abcaa7f700d227d4c683dcfc5436a7dfd26bca557dd1\",\"license\":\"GPL-3.0\"},\"contracts/registry/interface/IClaimTopicsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IClaimTopicsRegistry {\\r\\n    /**\\r\\n     *  this event is emitted when a claim topic has been added to the ClaimTopicsRegistry\\r\\n     *  the event is emitted by the 'addClaimTopic' function\\r\\n     *  `claimTopic` is the required claim added to the Claim Topics Registry\\r\\n     */\\r\\n    event ClaimTopicAdded(uint256 indexed claimTopic);\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when a claim topic has been removed from the ClaimTopicsRegistry\\r\\n     *  the event is emitted by the 'removeClaimTopic' function\\r\\n     *  `claimTopic` is the required claim removed from the Claim Topics Registry\\r\\n     */\\r\\n    event ClaimTopicRemoved(uint256 indexed claimTopic);\\r\\n\\r\\n    /**\\r\\n     * @dev Add a claim claim topic (For example: KYC=1, AML=2).\\r\\n     * Only owner can call.\\r\\n     * emits `ClaimTopicAdded` event\\r\\n     * cannot add more than 15 topics for 1 token as adding more could create gas issues\\r\\n     * @param _claimTopic The claim topic index\\r\\n     */\\r\\n    function addClaimTopic(uint256 _claimTopic) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Remove a claim claim topic (For example: KYC=1, AML=2).\\r\\n     *  Only owner can call.\\r\\n     *  emits `ClaimTopicRemoved` event\\r\\n     *  @param _claimTopic The claim topic index\\r\\n     */\\r\\n    function removeClaimTopic(uint256 _claimTopic) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Get the claim claim topics for the security token\\r\\n     *  @return Array of claim claim topics\\r\\n     */\\r\\n    function getClaimTopics() external view returns (uint256[] memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x5354a22fe4706ac81152c7f3f666f9057fde01e68c498f2a4707edf172fdd7a7\",\"license\":\"GPL-3.0\"},\"contracts/registry/interface/IIdentityRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./IClaimIssuersRegistry.sol\\\";\\r\\nimport \\\"./IClaimTopicsRegistry.sol\\\";\\r\\nimport \\\"./IIdentityRegistryStorage.sol\\\";\\r\\n\\r\\nimport \\\"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\\\";\\r\\nimport \\\"@onchain-id/solidity/contracts/interface/IIdentity.sol\\\";\\r\\n\\r\\ninterface IIdentityRegistry {\\r\\n    /**\\r\\n     *  this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry\\r\\n     *  the event is emitted by the IdentityRegistry constructor\\r\\n     *  `claimTopicsRegistry` is the address of the Claim Topics Registry contract\\r\\n     */\\r\\n    event ClaimTopicsRegistrySet(\\r\\n        IClaimTopicsRegistry indexed claimTopicsRegistry\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when the IdentityRegistryStorage has been set for the IdentityRegistry\\r\\n     *  the event is emitted by the IdentityRegistry constructor\\r\\n     *  `identityStorage` is the address of the Identity Registry Storage contract\\r\\n     */\\r\\n    event IdentityStorageSet(IIdentityRegistryStorage indexed identityStorage);\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when the ClaimIssuersRegistry has been set for the IdentityRegistry\\r\\n     *  the event is emitted by the IdentityRegistry constructor\\r\\n     *  `claimIssuersRegistry` is the address of the Claim Issuers Registry contract\\r\\n     */\\r\\n    event ClaimIssuersRegistrySet(\\r\\n        IClaimIssuersRegistry indexed claimIssuersRegistry\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity is registered into the Identity Registry.\\r\\n     *  the event is emitted by the 'registerIdentity' function\\r\\n     *  `investorAddress` is the address of the investor's wallet\\r\\n     *  `identity` is the address of the Identity smart contract (onchainID)\\r\\n     */\\r\\n    event IdentityRegistered(\\r\\n        address indexed investorAddress,\\r\\n        IIdentity indexed identity\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity is removed from the Identity Registry.\\r\\n     *  the event is emitted by the 'deleteIdentity' function\\r\\n     *  `investorAddress` is the address of the investor's wallet\\r\\n     *  `identity` is the address of the Identity smart contract (onchainID)\\r\\n     */\\r\\n    event IdentityRemoved(\\r\\n        address indexed investorAddress,\\r\\n        IIdentity indexed identity\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity has been updated\\r\\n     *  the event is emitted by the 'updateIdentity' function\\r\\n     *  `oldIdentity` is the old Identity contract's address to update\\r\\n     *  `newIdentity` is the new Identity contract's\\r\\n     */\\r\\n    event IdentityUpdated(\\r\\n        IIdentity indexed oldIdentity,\\r\\n        IIdentity indexed newIdentity\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity's country has been updated\\r\\n     *  the event is emitted by the 'updateCountry' function\\r\\n     *  `investorAddress` is the address on which the country has been updated\\r\\n     *  `country` is the numeric code (ISO 3166-1) of the new country\\r\\n     */\\r\\n    event CountryUpdated(\\r\\n        address indexed investorAddress,\\r\\n        uint16 indexed country\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  @dev Register an identity contract corresponding to a user address.\\r\\n     *  Requires that the user doesn't have an identity contract already registered.\\r\\n     *  This function can only be called by a wallet set as agent of the smart contract\\r\\n     *  @param _userAddress The address of the user\\r\\n     *  @param _identity The address of the user's identity contract\\r\\n     *  @param _country The country of the investor\\r\\n     *  emits `IdentityRegistered` event\\r\\n     */\\r\\n    function registerIdentity(\\r\\n        address _userAddress,\\r\\n        IIdentity _identity,\\r\\n        uint16 _country\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Removes an user from the identity registry.\\r\\n     *  Requires that the user have an identity contract already deployed that will be deleted.\\r\\n     *  This function can only be called by a wallet set as agent of the smart contract\\r\\n     *  @param _userAddress The address of the user to be removed\\r\\n     *  emits `IdentityRemoved` event\\r\\n     */\\r\\n    function deleteIdentity(address _userAddress) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Replace the actual identityRegistryStorage contract with a new one.\\r\\n     *  This function can only be called by the wallet set as owner of the smart contract\\r\\n     *  @param _identityRegistryStorage The address of the new Identity Registry Storage\\r\\n     *  emits `IdentityStorageSet` event\\r\\n     */\\r\\n    function setIdentityRegistryStorage(\\r\\n        IIdentityRegistryStorage _identityRegistryStorage\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Replace the actual claimTopicsRegistry contract with a new one.\\r\\n     *  This function can only be called by the wallet set as owner of the smart contract\\r\\n     *  @param _claimTopicsRegistry The address of the new claim Topics Registry\\r\\n     *  emits `ClaimTopicsRegistrySet` event\\r\\n     */\\r\\n    function setClaimTopicsRegistry(\\r\\n        IClaimTopicsRegistry _claimTopicsRegistry\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Replace the actual claimIssuersRegistry contract with a new one.\\r\\n     *  This function can only be called by the wallet set as owner of the smart contract\\r\\n     *  @param _claimIssuersRegistry The address of the new Claim Issuers Registry\\r\\n     *  emits `ClaimIssuersRegistrySet` event\\r\\n     */\\r\\n    function setClaimIssuersRegistry(\\r\\n        IClaimIssuersRegistry _claimIssuersRegistry\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Updates the country corresponding to a user address.\\r\\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\\r\\n     *  This function can only be called by a wallet set as agent of the smart contract\\r\\n     *  @param _userAddress The address of the user\\r\\n     *  @param _country The new country of the user\\r\\n     *  emits `CountryUpdated` event\\r\\n     */\\r\\n    function updateCountry(address _userAddress, uint16 _country) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Updates an identity contract corresponding to a user address.\\r\\n     *  Requires that the user address should be the owner of the identity contract.\\r\\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\\r\\n     *  This function can only be called by a wallet set as agent of the smart contract\\r\\n     *  @param _userAddress The address of the user\\r\\n     *  @param _identity The address of the user's new identity contract\\r\\n     *  emits `IdentityUpdated` event\\r\\n     */\\r\\n    function updateIdentity(address _userAddress, IIdentity _identity) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev function allowing to register identities in batch\\r\\n     *  This function can only be called by a wallet set as agent of the smart contract\\r\\n     *  Requires that none of the users has an identity contract already registered.\\r\\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\\r\\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\r\\n     *  @param _userAddresses The addresses of the users\\r\\n     *  @param _identities The addresses of the corresponding identity contracts\\r\\n     *  @param _countries The countries of the corresponding investors\\r\\n     *  emits _userAddresses.length `IdentityRegistered` events\\r\\n     */\\r\\n    function batchRegisterIdentity(\\r\\n        address[] calldata _userAddresses,\\r\\n        IIdentity[] calldata _identities,\\r\\n        uint16[] calldata _countries\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev This functions checks whether a wallet has its Identity registered or not\\r\\n     *  in the Identity Registry.\\r\\n     *  @param _userAddress The address of the user to be checked.\\r\\n     *  @return 'True' if the address is contained in the Identity Registry, 'false' if not.\\r\\n     */\\r\\n    function contains(address _userAddress) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     *  @dev This functions checks whether an identity contract\\r\\n     *  corresponding to the provided user address has the required claims or not based\\r\\n     *  on the data fetched from claim issuers registry and from the claim topics registry\\r\\n     *  @param _userAddress The address of the user to be verified.\\r\\n     *  @return 'True' if the address is verified, 'false' if not.\\r\\n     */\\r\\n    function isVerified(address _userAddress) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the onchainID of an investor.\\r\\n     *  @param _userAddress The wallet of the investor\\r\\n     */\\r\\n    function identity(address _userAddress) external view returns (IIdentity);\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the country code of an investor.\\r\\n     *  @param _userAddress The wallet of the investor\\r\\n     */\\r\\n    function investorCountry(\\r\\n        address _userAddress\\r\\n    ) external view returns (uint16);\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the IdentityRegistryStorage linked to the current IdentityRegistry.\\r\\n     */\\r\\n    function identityStorage() external view returns (IIdentityRegistryStorage);\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the ClaimIssuersRegistry linked to the current IdentityRegistry.\\r\\n     */\\r\\n    function issuersRegistry() external view returns (IClaimIssuersRegistry);\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the ClaimTopicsRegistry linked to the current IdentityRegistry.\\r\\n     */\\r\\n    function topicsRegistry() external view returns (IClaimTopicsRegistry);\\r\\n}\\r\\n\",\"keccak256\":\"0x336b9143cb5262adf25b607503c5ac56b74fc81d1f663d83318e95a5e3cef309\",\"license\":\"GPL-3.0\"},\"contracts/registry/interface/IIdentityRegistryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@onchain-id/solidity/contracts/interface/IIdentity.sol\\\";\\r\\n\\r\\ninterface IIdentityRegistryStorage {\\r\\n    /// events\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity is registered into the storage contract.\\r\\n     *  the event is emitted by the 'registerIdentity' function\\r\\n     *  `investorAddress` is the address of the investor's wallet\\r\\n     *  `identity` is the address of the Identity smart contract (onchainID)\\r\\n     */\\r\\n    event IdentityStored(\\r\\n        address indexed investorAddress,\\r\\n        IIdentity indexed identity\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity is removed from the storage contract.\\r\\n     *  the event is emitted by the 'deleteIdentity' function\\r\\n     *  `investorAddress` is the address of the investor's wallet\\r\\n     *  `identity` is the address of the Identity smart contract (onchainID)\\r\\n     */\\r\\n    event IdentityUnstored(\\r\\n        address indexed investorAddress,\\r\\n        IIdentity indexed identity\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity has been updated\\r\\n     *  the event is emitted by the 'updateIdentity' function\\r\\n     *  `oldIdentity` is the old Identity contract's address to update\\r\\n     *  `newIdentity` is the new Identity contract's\\r\\n     */\\r\\n    event IdentityModified(\\r\\n        IIdentity indexed oldIdentity,\\r\\n        IIdentity indexed newIdentity\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity's country has been updated\\r\\n     *  the event is emitted by the 'updateCountry' function\\r\\n     *  `investorAddress` is the address on which the country has been updated\\r\\n     *  `country` is the numeric code (ISO 3166-1) of the new country\\r\\n     */\\r\\n    event CountryModified(\\r\\n        address indexed investorAddress,\\r\\n        uint16 indexed country\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity Registry is bound to the storage contract\\r\\n     *  the event is emitted by the 'addIdentityRegistry' function\\r\\n     *  `identityRegistry` is the address of the identity registry added\\r\\n     */\\r\\n    event IdentityRegistryBound(address indexed identityRegistry);\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity Registry is unbound from the storage contract\\r\\n     *  the event is emitted by the 'removeIdentityRegistry' function\\r\\n     *  `identityRegistry` is the address of the identity registry removed\\r\\n     */\\r\\n    event IdentityRegistryUnbound(address indexed identityRegistry);\\r\\n\\r\\n    /// functions\\r\\n\\r\\n    /**\\r\\n     *  @dev adds an identity contract corresponding to a user address in the storage.\\r\\n     *  Requires that the user doesn't have an identity contract already registered.\\r\\n     *  This function can only be called by an address set as agent of the smart contract\\r\\n     *  @param _userAddress The address of the user\\r\\n     *  @param _identity The address of the user's identity contract\\r\\n     *  @param _country The country of the investor\\r\\n     *  emits `IdentityStored` event\\r\\n     */\\r\\n    function addIdentityToStorage(\\r\\n        address _userAddress,\\r\\n        IIdentity _identity,\\r\\n        uint16 _country\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Removes an user from the storage.\\r\\n     *  Requires that the user have an identity contract already deployed that will be deleted.\\r\\n     *  This function can only be called by an address set as agent of the smart contract\\r\\n     *  @param _userAddress The address of the user to be removed\\r\\n     *  emits `IdentityUnstored` event\\r\\n     */\\r\\n    function removeIdentityFromStorage(address _userAddress) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Updates the country corresponding to a user address.\\r\\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\\r\\n     *  This function can only be called by an address set as agent of the smart contract\\r\\n     *  @param _userAddress The address of the user\\r\\n     *  @param _country The new country of the user\\r\\n     *  emits `CountryModified` event\\r\\n     */\\r\\n    function modifyStoredInvestorCountry(\\r\\n        address _userAddress,\\r\\n        uint16 _country\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Updates an identity contract corresponding to a user address.\\r\\n     *  Requires that the user address should be the owner of the identity contract.\\r\\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\\r\\n     *  This function can only be called by an address set as agent of the smart contract\\r\\n     *  @param _userAddress The address of the user\\r\\n     *  @param _identity The address of the user's new identity contract\\r\\n     *  emits `IdentityModified` event\\r\\n     */\\r\\n    function modifyStoredIdentity(\\r\\n        address _userAddress,\\r\\n        IIdentity _identity\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @notice Adds an identity registry as agent of the Identity Registry Storage Contract.\\r\\n     *  This function can only be called by the wallet set as owner of the smart contract\\r\\n     *  This function adds the identity registry to the list of identityRegistries linked to the storage contract\\r\\n     *  cannot bind more than 300 IR to 1 IRS\\r\\n     *  @param _identityRegistry The identity registry address to add.\\r\\n     */\\r\\n    function bindIdentityRegistry(address _identityRegistry) external;\\r\\n\\r\\n    /**\\r\\n     *  @notice Removes an identity registry from being agent of the Identity Registry Storage Contract.\\r\\n     *  This function can only be called by the wallet set as owner of the smart contract\\r\\n     *  This function removes the identity registry from the list of identityRegistries linked to the storage contract\\r\\n     *  @param _identityRegistry The identity registry address to remove.\\r\\n     */\\r\\n    function unbindIdentityRegistry(address _identityRegistry) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the identity registries linked to the storage contract\\r\\n     */\\r\\n    function linkedIdentityRegistries()\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory);\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the onchainID of an investor.\\r\\n     *  @param _userAddress The wallet of the investor\\r\\n     */\\r\\n    function storedIdentity(\\r\\n        address _userAddress\\r\\n    ) external view returns (IIdentity);\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the country code of an investor.\\r\\n     *  @param _userAddress The wallet of the investor\\r\\n     */\\r\\n    function storedInvestorCountry(\\r\\n        address _userAddress\\r\\n    ) external view returns (uint16);\\r\\n}\\r\\n\",\"keccak256\":\"0x8c3b5f11cc5509ee33e63447f2235e42aa81b7656c7d383526a3e7a8adee7cc1\",\"license\":\"GPL-3.0\"},\"contracts/token/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"../registry/interface/IIdentityRegistry.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/// @dev interface\\r\\ninterface IToken is IERC20 {\\r\\n    /// events\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when the onchainID  is updated.\\r\\n     *  the event is emitted by the token init function and by the setOnchainID function\\r\\n     *  `_newOnchainID` is the address of the onchainID of the token\\r\\n     */\\r\\n    event UpdatedOnchainID(address indexed _newOnchainID);\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when the IdentityRegistry has been set for the token\\r\\n     *  the event is emitted by the token constructor and by the setIdentityRegistry function\\r\\n     *  `_identityRegistry` is the address of the Identity Registry of the token\\r\\n     */\\r\\n    event IdentityRegistryAdded(address indexed _identityRegistry);\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when the Compliance has been set for the token\\r\\n     *  the event is emitted by the token constructor and by the setCompliance function\\r\\n     *  `_compliance` is the address of the Compliance contract of the token\\r\\n     */\\r\\n    event ComplianceAdded(address indexed _compliance);\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an investor successfully recovers his tokens\\r\\n     *  the event is emitted by the recoveryAddress function\\r\\n     *  `_lostWallet` is the address of the wallet that the investor lost access to\\r\\n     *  `_newWallet` is the address of the wallet that the investor provided for the recovery\\r\\n     *  `_investorOnchainID` is the address of the onchainID of the investor who asked for a recovery\\r\\n     */\\r\\n    event RecoverySuccess(\\r\\n        address indexed _lostWallet,\\r\\n        address indexed _newWallet,\\r\\n        address indexed _investorOnchainID\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when the wallet of an investor is frozen or unfrozen\\r\\n     *  the event is emitted by setAddressFrozen and batchSetAddressFrozen functions\\r\\n     *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\\r\\n     *  `_isFrozen` is the freezing status of the wallet\\r\\n     *  if `_isFrozen` equals `true` the wallet is frozen after emission of the event\\r\\n     *  if `_isFrozen` equals `false` the wallet is unfrozen after emission of the event\\r\\n     *  `_owner` is the address of the agent who called the function to freeze the wallet\\r\\n     */\\r\\n    event AddressFrozen(\\r\\n        address indexed _userAddress,\\r\\n        bool indexed _isFrozen,\\r\\n        address indexed _owner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when a certain amount of tokens is frozen on a wallet\\r\\n     *  the event is emitted by freezePartialTokens and batchFreezePartialTokens functions\\r\\n     *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\\r\\n     *  `_amount` is the amount of tokens that are frozen\\r\\n     */\\r\\n    event TokensFrozen(address indexed _userAddress, uint256 _amount);\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when a certain amount of tokens is unfrozen on a wallet\\r\\n     *  the event is emitted by unfreezePartialTokens and batchUnfreezePartialTokens functions\\r\\n     *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\\r\\n     *  `_amount` is the amount of tokens that are unfrozen\\r\\n     */\\r\\n    event TokensUnfrozen(address indexed _userAddress, uint256 _amount);\\r\\n\\r\\n    /**\\r\\n     *  @dev sets the onchain ID of the token\\r\\n     *  @param _onchainID the address of the onchain ID to set\\r\\n     *  Only the owner of the token smart contract can call this function\\r\\n     *  emits a `UpdatedTokenInformation` event\\r\\n     */\\r\\n    function setOnchainID(address _onchainID) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev pauses the token contract, when contract is paused investors cannot transfer tokens anymore\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits a `Paused` event\\r\\n     */\\r\\n    function pause() external;\\r\\n\\r\\n    /**\\r\\n     *  @dev unpauses the token contract, when contract is unpaused investors can transfer tokens\\r\\n     *  if their wallet is not blocked & if the amount to transfer is <= to the amount of free tokens\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits an `Unpaused` event\\r\\n     */\\r\\n    function unpause() external;\\r\\n\\r\\n    /**\\r\\n     *  @dev sets an address frozen status for this token.\\r\\n     *  @param _userAddress The address for which to update frozen status\\r\\n     *  @param _freeze Frozen status of the address\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits an `AddressFrozen` event\\r\\n     */\\r\\n    function setAddressFrozen(address _userAddress, bool _freeze) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev freezes token amount specified for given address.\\r\\n     *  @param _userAddress The address for which to update frozen tokens\\r\\n     *  @param _amount Amount of Tokens to be frozen\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits a `TokensFrozen` event\\r\\n     */\\r\\n    function freezePartialTokens(\\r\\n        address _userAddress,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev unfreezes token amount specified for given address\\r\\n     *  @param _userAddress The address for which to update frozen tokens\\r\\n     *  @param _amount Amount of Tokens to be unfrozen\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits a `TokensUnfrozen` event\\r\\n     */\\r\\n    function unfreezePartialTokens(\\r\\n        address _userAddress,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev sets the Identity Registry for the token\\r\\n     *  @param _identityRegistry the address of the Identity Registry to set\\r\\n     *  Only the owner of the token smart contract can call this function\\r\\n     *  emits an `IdentityRegistryAdded` event\\r\\n     */\\r\\n    function setIdentityRegistry(address _identityRegistry) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev sets the compliance contract of the token\\r\\n     *  @param _compliance the address of the compliance contract to set\\r\\n     *  Only the owner of the token smart contract can call this function\\r\\n     *  calls bindToken on the compliance contract\\r\\n     *  emits a `ComplianceAdded` event\\r\\n     */\\r\\n    function setCompliance(address _compliance) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev force a transfer of tokens between 2 whitelisted wallets\\r\\n     *  In case the `from` address has not enough free tokens (unfrozen tokens)\\r\\n     *  but has a total balance higher or equal to the `amount`\\r\\n     *  the amount of frozen tokens is reduced in order to have enough free tokens\\r\\n     *  to proceed the transfer, in such a case, the remaining balance on the `from`\\r\\n     *  account is 100% composed of frozen tokens post-transfer.\\r\\n     *  Require that the `to` address is a verified address,\\r\\n     *  @param _from The address of the sender\\r\\n     *  @param _to The address of the receiver\\r\\n     *  @param _amount The number of tokens to transfer\\r\\n     *  @return `true` if successful and revert if unsuccessful\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_from`\\r\\n     *  emits a `Transfer` event\\r\\n     */\\r\\n    function forcedTransfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     *  @dev mint tokens on a wallet\\r\\n     *  Improved version of default mint method. Tokens can be minted\\r\\n     *  to an address if only it is a verified address as per the security token.\\r\\n     *  @param _to Address to mint the tokens to.\\r\\n     *  @param _amount Amount of tokens to mint.\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits a `Transfer` event\\r\\n     */\\r\\n    function mint(address _to, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev burn tokens on a wallet\\r\\n     *  In case the `account` address has not enough free tokens (unfrozen tokens)\\r\\n     *  but has a total balance higher or equal to the `value` amount\\r\\n     *  the amount of frozen tokens is reduced in order to have enough free tokens\\r\\n     *  to proceed the burn, in such a case, the remaining balance on the `account`\\r\\n     *  is 100% composed of frozen tokens post-transaction.\\r\\n     *  @param _userAddress Address to burn the tokens from.\\r\\n     *  @param _amount Amount of tokens to burn.\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_userAddress`\\r\\n     *  emits a `Transfer` event\\r\\n     */\\r\\n    function burn(address _userAddress, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev recovery function used to force transfer tokens from a\\r\\n     *  lost wallet to a new wallet for an investor.\\r\\n     *  @param _lostWallet the wallet that the investor lost\\r\\n     *  @param _newWallet the newly provided wallet on which tokens have to be transferred\\r\\n     *  @param _investorOnchainID the onchainID of the investor asking for a recovery\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits a `TokensUnfrozen` event if there is some frozen tokens on the lost wallet if the recovery process is successful\\r\\n     *  emits a `Transfer` event if the recovery process is successful\\r\\n     *  emits a `RecoverySuccess` event if the recovery process is successful\\r\\n     *  emits a `RecoveryFails` event if the recovery process fails\\r\\n     */\\r\\n    function recoveryAddress(\\r\\n        address _lostWallet,\\r\\n        address _newWallet,\\r\\n        address _investorOnchainID\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     *  @dev function allowing to issue transfers in batch\\r\\n     *  Require that the msg.sender and `to` addresses are not frozen.\\r\\n     *  Require that the total value should not exceed available balance.\\r\\n     *  Require that the `to` addresses are all verified addresses,\\r\\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,\\r\\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\r\\n     *  @param _toList The addresses of the receivers\\r\\n     *  @param _amounts The number of tokens to transfer to the corresponding receiver\\r\\n     *  emits _toList.length `Transfer` events\\r\\n     */\\r\\n    function batchTransfer(\\r\\n        address[] calldata _toList,\\r\\n        uint256[] calldata _amounts\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev function allowing to issue forced transfers in batch\\r\\n     *  Require that `_amounts[i]` should not exceed available balance of `_fromList[i]`.\\r\\n     *  Require that the `_toList` addresses are all verified addresses\\r\\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_fromList.length` IS TOO HIGH,\\r\\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\r\\n     *  @param _fromList The addresses of the senders\\r\\n     *  @param _toList The addresses of the receivers\\r\\n     *  @param _amounts The number of tokens to transfer to the corresponding receiver\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits `TokensUnfrozen` events if `_amounts[i]` is higher than the free balance of `_fromList[i]`\\r\\n     *  emits _fromList.length `Transfer` events\\r\\n     */\\r\\n    function batchForcedTransfer(\\r\\n        address[] calldata _fromList,\\r\\n        address[] calldata _toList,\\r\\n        uint256[] calldata _amounts\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev function allowing to mint tokens in batch\\r\\n     *  Require that the `_toList` addresses are all verified addresses\\r\\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,\\r\\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\r\\n     *  @param _toList The addresses of the receivers\\r\\n     *  @param _amounts The number of tokens to mint to the corresponding receiver\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits _toList.length `Transfer` events\\r\\n     */\\r\\n    function batchMint(\\r\\n        address[] calldata _toList,\\r\\n        uint256[] calldata _amounts\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev function allowing to burn tokens in batch\\r\\n     *  Require that the `_userAddresses` addresses are all verified addresses\\r\\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\\r\\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\r\\n     *  @param _userAddresses The addresses of the wallets concerned by the burn\\r\\n     *  @param _amounts The number of tokens to burn from the corresponding wallets\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits _userAddresses.length `Transfer` events\\r\\n     */\\r\\n    function batchBurn(\\r\\n        address[] calldata _userAddresses,\\r\\n        uint256[] calldata _amounts\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev function allowing to set frozen addresses in batch\\r\\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\\r\\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\r\\n     *  @param _userAddresses The addresses for which to update frozen status\\r\\n     *  @param _freeze Frozen status of the corresponding address\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits _userAddresses.length `AddressFrozen` events\\r\\n     */\\r\\n    function batchSetAddressFrozen(\\r\\n        address[] calldata _userAddresses,\\r\\n        bool[] calldata _freeze\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev function allowing to freeze tokens partially in batch\\r\\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\\r\\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\r\\n     *  @param _userAddresses The addresses on which tokens need to be frozen\\r\\n     *  @param _amounts the amount of tokens to freeze on the corresponding address\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits _userAddresses.length `TokensFrozen` events\\r\\n     */\\r\\n    function batchFreezePartialTokens(\\r\\n        address[] calldata _userAddresses,\\r\\n        uint256[] calldata _amounts\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev function allowing to unfreeze tokens partially in batch\\r\\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\\r\\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\r\\n     *  @param _userAddresses The addresses on which tokens need to be unfrozen\\r\\n     *  @param _amounts the amount of tokens to unfreeze on the corresponding address\\r\\n     *  This function can only be called by a wallet set as agent of the token\\r\\n     *  emits _userAddresses.length `TokensUnfrozen` events\\r\\n     */\\r\\n    function batchUnfreezePartialTokens(\\r\\n        address[] calldata _userAddresses,\\r\\n        uint256[] calldata _amounts\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 1 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * balanceOf() and transfer().\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the onchainID of the token.\\r\\n     * the onchainID of the token gives all the information available\\r\\n     * about the token and is managed by the token issuer or his agent.\\r\\n     */\\r\\n    function onchainID() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the TREX version of the token.\\r\\n     * current version is 3.0.0\\r\\n     */\\r\\n    function version() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the Identity Registry linked to the token\\r\\n     */\\r\\n    function identityRegistry() external view returns (IIdentityRegistry);\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the Compliance contract linked to the token\\r\\n     */\\r\\n    function compliance() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the freezing status of a wallet\\r\\n     *  if isFrozen returns `true` the wallet is frozen\\r\\n     *  if isFrozen returns `false` the wallet is not frozen\\r\\n     *  isFrozen returning `true` doesn't mean that the balance is free, tokens could be blocked by\\r\\n     *  a partial freeze or the whole token could be blocked by pause\\r\\n     *  @param _userAddress the address of the wallet on which isFrozen is called\\r\\n     */\\r\\n    function isFrozen(address _userAddress) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the amount of tokens that are partially frozen on a wallet\\r\\n     *  the amount of frozen tokens is always <= to the total balance of the wallet\\r\\n     *  @param _userAddress the address of the wallet on which getFrozenTokens is called\\r\\n     */\\r\\n    function getFrozenTokens(\\r\\n        address _userAddress\\r\\n    ) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x5c43f33c6ee7eba5714c907c2f94090e0bc4927ddbb3a9548b92c40435ea3ae4\",\"license\":\"GPL-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001c600033610093565b6100467fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533610093565b61008e6040518060400160405280601481526020017f474f5420494e544f20434f4e5354525543544f5200000000000000000000000081525061013260201b6106101760201c565b6101fe565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661012e576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556100ed3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6101798160405160240161014691906101b0565b60408051601f198184030181529190526020810180516001600160e01b0390811663104c13eb60e21b1790915261017c16565b50565b6101798161018f60201b6106561760201c565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b600060208083528351808285015260005b818110156101dd578581018301518582016040015282016101c1565b506000604082860101526040601f19601f8301168501019250505092915050565b610c32806200020e6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80638301057b116100a257806393e62f071161007157806393e62f071461023d578063993e8b9514610268578063a217fddf1461028a578063d547741f14610292578063e46638e6146102a557600080fd5b80638301057b146101f05780638baf29b4146102175780638d2ea772146101b757806391d148541461022a57600080fd5b80633ff5aa02116100de5780633ff5aa021461019157806340db3b50146101a45780635f8dead3146101b757806375b238fc146101c957600080fd5b806301ffc9a714610110578063248a9ca3146101385780632f2ff15d1461016957806336568abe1461017e575b600080fd5b61012361011e36600461098b565b6102bc565b60405190151581526020015b60405180910390f35b61015b6101463660046109b5565b60009081526020819052604090206001015490565b60405190815260200161012f565b61017c6101773660046109ea565b6102f3565b005b61017c61018c3660046109ea565b610318565b61017c61019f366004610a16565b610397565b61017c6101b2366004610a16565b610476565b61017c6101c5366004610a31565b5050565b61015b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b61015b7fa7197c38d9c4c7450c7f2cd20d0a17cbe7c344190d6c82a6b49a146e62439ae481565b61017c610225366004610a5b565b505050565b6101236102383660046109ea565b6105c2565b600254610250906001600160a01b031681565b6040516001600160a01b03909116815260200161012f565b610123610276366004610a16565b6002546001600160a01b0391821691161490565b61015b600081565b61017c6102a03660046109ea565b6105eb565b6101236102b3366004610a5b565b60019392505050565b60006001600160e01b03198216637965db0b60e01b14806102ed57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008281526020819052604090206001015461030e81610677565b6102258383610681565b6001600160a01b038116331461038d5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6101c58282610705565b6103c17fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775336105c2565b806103d557506002546001600160a01b0316155b6104215760405162461bcd60e51b815260206004820152601f60248201527f4552432d333634333a2043616c6c6572206e6f7420617574686f72697a6564006044820152606401610384565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f2de35142b19ed5a07796cf30791959c592018f70b1d2d7c460eef8ffe713692b906020015b60405180910390a150565b6104a07fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775336105c2565b806104d057506104d07fa7197c38d9c4c7450c7f2cd20d0a17cbe7c344190d6c82a6b49a146e62439ae4336105c2565b61051c5760405162461bcd60e51b815260206004820152601f60248201527f4552432d333634333a2043616c6c6572206e6f7420617574686f72697a6564006044820152606401610384565b6002546001600160a01b038281169116146105795760405162461bcd60e51b815260206004820152601960248201527f4552432d333634333a20546f6b656e206e6f7420626f756e64000000000000006044820152606401610384565b600280546001600160a01b03191690556040516001600160a01b03821681527f28a4ca7134a3b3f9aff286e79ad3daadb4a06d1b43d037a3a98bdc074edd9b7a9060200161046b565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60008281526020819052604090206001015461060681610677565b6102258383610705565b610653816040516024016106249190610abb565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b17905261076a565b50565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b6106538133610773565b61068b82826105c2565b6101c5576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556106c13390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61070f82826105c2565b156101c5576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61065381610656565b61077d82826105c2565b6101c55761078a816107cc565b6107958360206107de565b6040516020016107a6929190610aee565b60408051601f198184030181529082905262461bcd60e51b825261038491600401610abb565b60606102ed6001600160a01b03831660145b606060006107ed836002610b79565b6107f8906002610b90565b67ffffffffffffffff81111561081057610810610ba3565b6040519080825280601f01601f19166020018201604052801561083a576020820181803683370190505b509050600360fc1b8160008151811061085557610855610bb9565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061088457610884610bb9565b60200101906001600160f81b031916908160001a90535060006108a8846002610b79565b6108b3906001610b90565b90505b600181111561092b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106108e7576108e7610bb9565b1a60f81b8282815181106108fd576108fd610bb9565b60200101906001600160f81b031916908160001a90535060049490941c9361092481610bcf565b90506108b6565b50831561097a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610384565b9392505050565b610989610be6565b565b60006020828403121561099d57600080fd5b81356001600160e01b03198116811461097a57600080fd5b6000602082840312156109c757600080fd5b5035919050565b80356001600160a01b03811681146109e557600080fd5b919050565b600080604083850312156109fd57600080fd5b82359150610a0d602084016109ce565b90509250929050565b600060208284031215610a2857600080fd5b61097a826109ce565b60008060408385031215610a4457600080fd5b610a4d836109ce565b946020939093013593505050565b600080600060608486031215610a7057600080fd5b610a79846109ce565b9250610a87602085016109ce565b9150604084013590509250925092565b60005b83811015610ab2578181015183820152602001610a9a565b50506000910152565b6020815260008251806020840152610ada816040850160208701610a97565b601f01601f19169190910160400192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610b26816017850160208801610a97565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610b57816028840160208801610a97565b01602801949350505050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176102ed576102ed610b63565b808201808211156102ed576102ed610b63565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081610bde57610bde610b63565b506000190190565b634e487b7160e01b600052605160045260246000fdfea26469706673582212209dccc78073385ba07e4c33f07f9122911dfa8076a881802a2ea82ec1fc7fda5664736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c80638301057b116100a257806393e62f071161007157806393e62f071461023d578063993e8b9514610268578063a217fddf1461028a578063d547741f14610292578063e46638e6146102a557600080fd5b80638301057b146101f05780638baf29b4146102175780638d2ea772146101b757806391d148541461022a57600080fd5b80633ff5aa02116100de5780633ff5aa021461019157806340db3b50146101a45780635f8dead3146101b757806375b238fc146101c957600080fd5b806301ffc9a714610110578063248a9ca3146101385780632f2ff15d1461016957806336568abe1461017e575b600080fd5b61012361011e36600461098b565b6102bc565b60405190151581526020015b60405180910390f35b61015b6101463660046109b5565b60009081526020819052604090206001015490565b60405190815260200161012f565b61017c6101773660046109ea565b6102f3565b005b61017c61018c3660046109ea565b610318565b61017c61019f366004610a16565b610397565b61017c6101b2366004610a16565b610476565b61017c6101c5366004610a31565b5050565b61015b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b61015b7fa7197c38d9c4c7450c7f2cd20d0a17cbe7c344190d6c82a6b49a146e62439ae481565b61017c610225366004610a5b565b505050565b6101236102383660046109ea565b6105c2565b600254610250906001600160a01b031681565b6040516001600160a01b03909116815260200161012f565b610123610276366004610a16565b6002546001600160a01b0391821691161490565b61015b600081565b61017c6102a03660046109ea565b6105eb565b6101236102b3366004610a5b565b60019392505050565b60006001600160e01b03198216637965db0b60e01b14806102ed57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008281526020819052604090206001015461030e81610677565b6102258383610681565b6001600160a01b038116331461038d5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6101c58282610705565b6103c17fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775336105c2565b806103d557506002546001600160a01b0316155b6104215760405162461bcd60e51b815260206004820152601f60248201527f4552432d333634333a2043616c6c6572206e6f7420617574686f72697a6564006044820152606401610384565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f2de35142b19ed5a07796cf30791959c592018f70b1d2d7c460eef8ffe713692b906020015b60405180910390a150565b6104a07fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775336105c2565b806104d057506104d07fa7197c38d9c4c7450c7f2cd20d0a17cbe7c344190d6c82a6b49a146e62439ae4336105c2565b61051c5760405162461bcd60e51b815260206004820152601f60248201527f4552432d333634333a2043616c6c6572206e6f7420617574686f72697a6564006044820152606401610384565b6002546001600160a01b038281169116146105795760405162461bcd60e51b815260206004820152601960248201527f4552432d333634333a20546f6b656e206e6f7420626f756e64000000000000006044820152606401610384565b600280546001600160a01b03191690556040516001600160a01b03821681527f28a4ca7134a3b3f9aff286e79ad3daadb4a06d1b43d037a3a98bdc074edd9b7a9060200161046b565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60008281526020819052604090206001015461060681610677565b6102258383610705565b610653816040516024016106249190610abb565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b17905261076a565b50565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b6106538133610773565b61068b82826105c2565b6101c5576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556106c13390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61070f82826105c2565b156101c5576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61065381610656565b61077d82826105c2565b6101c55761078a816107cc565b6107958360206107de565b6040516020016107a6929190610aee565b60408051601f198184030181529082905262461bcd60e51b825261038491600401610abb565b60606102ed6001600160a01b03831660145b606060006107ed836002610b79565b6107f8906002610b90565b67ffffffffffffffff81111561081057610810610ba3565b6040519080825280601f01601f19166020018201604052801561083a576020820181803683370190505b509050600360fc1b8160008151811061085557610855610bb9565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061088457610884610bb9565b60200101906001600160f81b031916908160001a90535060006108a8846002610b79565b6108b3906001610b90565b90505b600181111561092b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106108e7576108e7610bb9565b1a60f81b8282815181106108fd576108fd610bb9565b60200101906001600160f81b031916908160001a90535060049490941c9361092481610bcf565b90506108b6565b50831561097a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610384565b9392505050565b610989610be6565b565b60006020828403121561099d57600080fd5b81356001600160e01b03198116811461097a57600080fd5b6000602082840312156109c757600080fd5b5035919050565b80356001600160a01b03811681146109e557600080fd5b919050565b600080604083850312156109fd57600080fd5b82359150610a0d602084016109ce565b90509250929050565b600060208284031215610a2857600080fd5b61097a826109ce565b60008060408385031215610a4457600080fd5b610a4d836109ce565b946020939093013593505050565b600080600060608486031215610a7057600080fd5b610a79846109ce565b9250610a87602085016109ce565b9150604084013590509250925092565b60005b83811015610ab2578181015183820152602001610a9a565b50506000910152565b6020815260008251806020840152610ada816040850160208701610a97565b601f01601f19169190910160400192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610b26816017850160208801610a97565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610b57816028840160208801610a97565b01602801949350505050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176102ed576102ed610b63565b808201808211156102ed576102ed610b63565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081610bde57610bde610b63565b506000190190565b634e487b7160e01b600052605160045260246000fdfea26469706673582212209dccc78073385ba07e4c33f07f9122911dfa8076a881802a2ea82ec1fc7fda5664736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bindToken(address)": {
        "details": "See {ICompliance-bindToken}."
      },
      "canTransfer(address,address,uint256)": {
        "details": "See {ICompliance-canTransfer}."
      },
      "created(address,uint256)": {
        "details": "See {ICompliance-created}."
      },
      "destroyed(address,uint256)": {
        "details": "See {ICompliance-destroyed}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isTokenBound(address)": {
        "details": "See {ICompliance-isTokenBound}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unbindToken(address)": {
        "details": "See {ICompliance-unbindToken}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "TokenBound(address)": {
        "notice": "this event is emitted when a token has been bound to the compliance contract  the event is emitted by the bindToken function  `_token` is the address of the token to bind"
      },
      "TokenUnbound(address)": {
        "notice": "this event is emitted when a token has been unbound from the compliance contract  the event is emitted by the unbindToken function  `_token` is the address of the token to unbind"
      }
    },
    "kind": "user",
    "methods": {
      "tokenBound()": {
        "notice": "Mapping of tokens linked to the compliance contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 354,
        "contract": "contracts/compliance/BasicCompliance.sol:BasicCompliance",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)349_storage)"
      },
      {
        "astId": 2394,
        "contract": "contracts/compliance/BasicCompliance.sol:BasicCompliance",
        "label": "_tokenAgentsList",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2398,
        "contract": "contracts/compliance/BasicCompliance.sol:BasicCompliance",
        "label": "tokenBound",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IToken)4541"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IToken)4541": {
        "encoding": "inplace",
        "label": "contract IToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)349_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)349_storage"
      },
      "t_struct(RoleData)349_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 346,
            "contract": "contracts/compliance/BasicCompliance.sol:BasicCompliance",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 348,
            "contract": "contracts/compliance/BasicCompliance.sol:BasicCompliance",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}