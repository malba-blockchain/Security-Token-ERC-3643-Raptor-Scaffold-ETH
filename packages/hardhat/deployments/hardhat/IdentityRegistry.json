{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IClaimIssuersRegistry",
          "name": "_claimIssuersRegistry",
          "type": "address"
        },
        {
          "internalType": "contract IClaimTopicsRegistry",
          "name": "_claimTopicsRegistry",
          "type": "address"
        },
        {
          "internalType": "contract IIdentityRegistryStorage",
          "name": "_identityStorage",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IClaimIssuersRegistry",
          "name": "claimIssuersRegistry",
          "type": "address"
        }
      ],
      "name": "ClaimIssuersRegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IClaimTopicsRegistry",
          "name": "claimTopicsRegistry",
          "type": "address"
        }
      ],
      "name": "ClaimTopicsRegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "investorAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "country",
          "type": "uint16"
        }
      ],
      "name": "CountryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "investorAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IIdentity",
          "name": "identity",
          "type": "address"
        }
      ],
      "name": "IdentityRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "investorAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IIdentity",
          "name": "identity",
          "type": "address"
        }
      ],
      "name": "IdentityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IIdentityRegistryStorage",
          "name": "identityStorage",
          "type": "address"
        }
      ],
      "name": "IdentityStorageSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IIdentity",
          "name": "oldIdentity",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IIdentity",
          "name": "newIdentity",
          "type": "address"
        }
      ],
      "name": "IdentityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AGENT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_userAddresses",
          "type": "address[]"
        },
        {
          "internalType": "contract IIdentity[]",
          "name": "_identities",
          "type": "address[]"
        },
        {
          "internalType": "uint16[]",
          "name": "_countries",
          "type": "uint16[]"
        }
      ],
      "name": "batchRegisterIdentity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "contains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "deleteIdentity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "identity",
      "outputs": [
        {
          "internalType": "contract IIdentity",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identityStorage",
      "outputs": [
        {
          "internalType": "contract IIdentityRegistryStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "investorCountry",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "isVerified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "issuersRegistry",
      "outputs": [
        {
          "internalType": "contract IClaimIssuersRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        },
        {
          "internalType": "contract IIdentity",
          "name": "_identity",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_country",
          "type": "uint16"
        }
      ],
      "name": "registerIdentity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IClaimIssuersRegistry",
          "name": "_claimIssuersRegistry",
          "type": "address"
        }
      ],
      "name": "setClaimIssuersRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IClaimTopicsRegistry",
          "name": "_claimTopicsRegistry",
          "type": "address"
        }
      ],
      "name": "setClaimTopicsRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IIdentityRegistryStorage",
          "name": "_identityRegistryStorage",
          "type": "address"
        }
      ],
      "name": "setIdentityRegistryStorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "topicsRegistry",
      "outputs": [
        {
          "internalType": "contract IClaimTopicsRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_country",
          "type": "uint16"
        }
      ],
      "name": "updateCountry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        },
        {
          "internalType": "contract IIdentity",
          "name": "_identity",
          "type": "address"
        }
      ],
      "name": "updateIdentity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb86f26292e1b7655cf14de91fcd5f1782fdeaaf60e3e0f1d3f6e42d3ec6ae403",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1622576",
    "logsBloom": "0x
    "blockHash": "0x8a3cdd9e42a16bae5f632643bf1fb9a902dbd82bc7d3e10535c24230b095f2b6",
    "transactionHash": "0xb86f26292e1b7655cf14de91fcd5f1782fdeaaf60e3e0f1d3f6e42d3ec6ae403",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 7,
        "transactionHash": "0xb86f26292e1b7655cf14de91fcd5f1782fdeaaf60e3e0f1d3f6e42d3ec6ae403",
        "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8a3cdd9e42a16bae5f632643bf1fb9a902dbd82bc7d3e10535c24230b095f2b6"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 7,
        "transactionHash": "0xb86f26292e1b7655cf14de91fcd5f1782fdeaaf60e3e0f1d3f6e42d3ec6ae403",
        "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x8a3cdd9e42a16bae5f632643bf1fb9a902dbd82bc7d3e10535c24230b095f2b6"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 7,
        "transactionHash": "0xb86f26292e1b7655cf14de91fcd5f1782fdeaaf60e3e0f1d3f6e42d3ec6ae403",
        "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
        "topics": [
          "0x7170bf15b246e880b2369cd7c67d057760d8a35149e8c64dde91efa22bcc76d0",
          "0x0000000000000000000000005fbdb2315678afecb367f032d93f642f64180aa3"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x8a3cdd9e42a16bae5f632643bf1fb9a902dbd82bc7d3e10535c24230b095f2b6"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 7,
        "transactionHash": "0xb86f26292e1b7655cf14de91fcd5f1782fdeaaf60e3e0f1d3f6e42d3ec6ae403",
        "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
        "topics": [
          "0x811d3016da8008875247af93af072ec7801e39d9f4c686fec82ab600d8e555e8",
          "0x000000000000000000000000e7f1725e7734ce288f8367e1bb143e90bb3f0512"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x8a3cdd9e42a16bae5f632643bf1fb9a902dbd82bc7d3e10535c24230b095f2b6"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 7,
        "transactionHash": "0xb86f26292e1b7655cf14de91fcd5f1782fdeaaf60e3e0f1d3f6e42d3ec6ae403",
        "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
        "topics": [
          "0x2fa8b95c1db7afe99e3398f3792f008135cedc1fa26b0bb2ecd2352cd166d53c",
          "0x0000000000000000000000009fe46736679d2d9a65f0992f2272de9f3c7fa6e0"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x8a3cdd9e42a16bae5f632643bf1fb9a902dbd82bc7d3e10535c24230b095f2b6"
      }
    ],
    "blockNumber": 7,
    "cumulativeGasUsed": "1622576",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0"
  ],
  "numDeployments": 1,
  "solcInputHash": "d310b4fa677a3832b165feff486fc26b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IClaimIssuersRegistry\",\"name\":\"_claimIssuersRegistry\",\"type\":\"address\"},{\"internalType\":\"contract IClaimTopicsRegistry\",\"name\":\"_claimTopicsRegistry\",\"type\":\"address\"},{\"internalType\":\"contract IIdentityRegistryStorage\",\"name\":\"_identityStorage\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IClaimIssuersRegistry\",\"name\":\"claimIssuersRegistry\",\"type\":\"address\"}],\"name\":\"ClaimIssuersRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IClaimTopicsRegistry\",\"name\":\"claimTopicsRegistry\",\"type\":\"address\"}],\"name\":\"ClaimTopicsRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"country\",\"type\":\"uint16\"}],\"name\":\"CountryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"IdentityRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"IdentityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IIdentityRegistryStorage\",\"name\":\"identityStorage\",\"type\":\"address\"}],\"name\":\"IdentityStorageSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"oldIdentity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"newIdentity\",\"type\":\"address\"}],\"name\":\"IdentityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AGENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userAddresses\",\"type\":\"address[]\"},{\"internalType\":\"contract IIdentity[]\",\"name\":\"_identities\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_countries\",\"type\":\"uint16[]\"}],\"name\":\"batchRegisterIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"contains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"deleteIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"identity\",\"outputs\":[{\"internalType\":\"contract IIdentity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityStorage\",\"outputs\":[{\"internalType\":\"contract IIdentityRegistryStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"investorCountry\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"isVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuersRegistry\",\"outputs\":[{\"internalType\":\"contract IClaimIssuersRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_country\",\"type\":\"uint16\"}],\"name\":\"registerIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IClaimIssuersRegistry\",\"name\":\"_claimIssuersRegistry\",\"type\":\"address\"}],\"name\":\"setClaimIssuersRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IClaimTopicsRegistry\",\"name\":\"_claimTopicsRegistry\",\"type\":\"address\"}],\"name\":\"setClaimTopicsRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IIdentityRegistryStorage\",\"name\":\"_identityRegistryStorage\",\"type\":\"address\"}],\"name\":\"setIdentityRegistryStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topicsRegistry\",\"outputs\":[{\"internalType\":\"contract IClaimTopicsRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_country\",\"type\":\"uint16\"}],\"name\":\"updateCountry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"updateIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is used to manage identities in the ERC-3643 standard. It allows for the registration, updating and deletion of identities associated with user addresses. It also supports the management of claim topics and claim issuers.\",\"kind\":\"dev\",\"methods\":{\"batchRegisterIdentity(address[],address[],uint16[])\":{\"details\":\"Only an agent can register identities in batch.\",\"params\":{\"_countries\":\"The array of country codes.\",\"_identities\":\"The array of identities.\",\"_userAddresses\":\"The array of user addresses.\"}},\"constructor\":{\"details\":\"Constructor of the IdentityRegistry contract.\",\"params\":{\"_claimIssuersRegistry\":\"The address of the claim issuers registry contract.\",\"_claimTopicsRegistry\":\"The address of the claim topics registry contract.\",\"_identityStorage\":\"The address of the identity registry storage contract.\"}},\"contains(address)\":{\"params\":{\"_userAddress\":\"The address to check.\"},\"returns\":{\"_0\":\"A boolean indicating if the address is in the registry.\"}},\"deleteIdentity(address)\":{\"details\":\"Only an agent can delete an identity.\",\"params\":{\"_userAddress\":\"The address of the user.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"identity(address)\":{\"params\":{\"_userAddress\":\"The address of the user.\"},\"returns\":{\"_0\":\"The identity of the user.\"}},\"identityStorage()\":{\"returns\":{\"_0\":\"The current identity storage.\"}},\"investorCountry(address)\":{\"params\":{\"_userAddress\":\"The address of the investor.\"},\"returns\":{\"_0\":\"The country of the investor.\"}},\"isVerified(address)\":{\"params\":{\"_userAddress\":\"The address of the user to check.\"},\"returns\":{\"_0\":\"A boolean indicating if the user is verified.\"}},\"issuersRegistry()\":{\"returns\":{\"_0\":\"The current issuers registry.\"}},\"registerIdentity(address,address,uint16)\":{\"details\":\"Only an agent can register an identity.\",\"params\":{\"_country\":\"The country code of the user.\",\"_identity\":\"The identity of the user.\",\"_userAddress\":\"The address of the user.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setClaimIssuersRegistry(address)\":{\"details\":\"Only the owner can set the ClaimIssuersRegistry contract.\",\"params\":{\"_claimIssuersRegistry\":\"The address of the new ClaimIssuersRegistry contract.\"}},\"setClaimTopicsRegistry(address)\":{\"details\":\"Only the owner can set the ClaimTopicsRegistry contract.\",\"params\":{\"_claimTopicsRegistry\":\"The address of the new ClaimTopicsRegistry contract.\"}},\"setIdentityRegistryStorage(address)\":{\"details\":\"Only the owner can set the IdentityRegistryStorage contract.\",\"params\":{\"_identityRegistryStorage\":\"The address of the new IdentityRegistryStorage contract.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"topicsRegistry()\":{\"returns\":{\"_0\":\"The current topics registry.\"}},\"updateCountry(address,uint16)\":{\"details\":\"Only an agent can update a country code.\",\"params\":{\"_country\":\"The new country code of the user.\",\"_userAddress\":\"The address of the user.\"}},\"updateIdentity(address,address)\":{\"details\":\"Only an agent can update an identity.\",\"params\":{\"_identity\":\"The new identity of the user.\",\"_userAddress\":\"The address of the user.\"}}},\"title\":\"ERC-3643 - IdentityRegistry\",\"version\":1},\"userdoc\":{\"events\":{\"ClaimIssuersRegistrySet(address)\":{\"notice\":\"this event is emitted when the ClaimIssuersRegistry has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `claimIssuersRegistry` is the address of the Claim Issuers Registry contract\"},\"ClaimTopicsRegistrySet(address)\":{\"notice\":\"this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `claimTopicsRegistry` is the address of the Claim Topics Registry contract\"},\"CountryUpdated(address,uint16)\":{\"notice\":\"this event is emitted when an Identity's country has been updated  the event is emitted by the 'updateCountry' function  `investorAddress` is the address on which the country has been updated  `country` is the numeric code (ISO 3166-1) of the new country\"},\"IdentityRegistered(address,address)\":{\"notice\":\"this event is emitted when an Identity is registered into the Identity Registry.  the event is emitted by the 'registerIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)\"},\"IdentityRemoved(address,address)\":{\"notice\":\"this event is emitted when an Identity is removed from the Identity Registry.  the event is emitted by the 'deleteIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)\"},\"IdentityStorageSet(address)\":{\"notice\":\"this event is emitted when the IdentityRegistryStorage has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `identityStorage` is the address of the Identity Registry Storage contract\"},\"IdentityUpdated(address,address)\":{\"notice\":\"this event is emitted when an Identity has been updated  the event is emitted by the 'updateIdentity' function  `oldIdentity` is the old Identity contract's address to update  `newIdentity` is the new Identity contract's\"}},\"kind\":\"user\",\"methods\":{\"batchRegisterIdentity(address[],address[],uint16[])\":{\"notice\":\"Register multiple identities associated with multiple user addresses.\"},\"constructor\":{\"notice\":\"This constructor sets the initial state of the IdentityRegistry contract.\"},\"contains(address)\":{\"notice\":\"Check if an address is contained in the registry.\"},\"deleteIdentity(address)\":{\"notice\":\"Delete the identity associated with a user address.\"},\"identity(address)\":{\"notice\":\"Get the identity of a user.\"},\"identityStorage()\":{\"notice\":\"Get the identity storage.\"},\"investorCountry(address)\":{\"notice\":\"Get the country of an investor.\"},\"isVerified(address)\":{\"notice\":\"Checks if a user is verified based on their identity, claim topics, and claim issuers.\"},\"issuersRegistry()\":{\"notice\":\"Get the issuers registry.\"},\"registerIdentity(address,address,uint16)\":{\"notice\":\"Register an identity associated with a user address.\"},\"setClaimIssuersRegistry(address)\":{\"notice\":\"Set the ClaimIssuersRegistry contract.\"},\"setClaimTopicsRegistry(address)\":{\"notice\":\"Set the ClaimTopicsRegistry contract.\"},\"setIdentityRegistryStorage(address)\":{\"notice\":\"Set the IdentityRegistryStorage contract.\"},\"topicsRegistry()\":{\"notice\":\"Get the topics registry.\"},\"updateCountry(address,uint16)\":{\"notice\":\"Update the country code associated with a user address.\"},\"updateIdentity(address,address)\":{\"notice\":\"Update the identity associated with a user address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/registry/IdentityRegistry.sol\":\"IdentityRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"./IIdentity.sol\\\";\\n\\ninterface IClaimIssuer is IIdentity {\\n\\n    /**\\n     * @dev Emitted when a claim is revoked.\\n     *\\n     * Specification: MUST be triggered when revoking a claim.\\n     */\\n    event ClaimRevoked(bytes indexed signature);\\n\\n    /**\\n     * @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\\n     * @notice will fetch the claim from the identity contract (unsafe).\\n     * @param _claimId the id of the claim\\n     * @param _identity the address of the identity contract\\n     * @return isRevoked true when the claim is revoked\\n     */\\n    function revokeClaim(bytes32 _claimId, address _identity) external returns(bool);\\n\\n    /**\\n     * @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\\n     * @param signature the signature of the claim\\n     */\\n    function revokeClaimBySignature(bytes calldata signature) external;\\n\\n    /**\\n     * @dev Returns revocation status of a claim.\\n     * @param _sig the signature of the claim\\n     * @return isRevoked true if the claim is revoked and false otherwise\\n     */\\n    function isClaimRevoked(bytes calldata _sig) external view returns (bool);\\n\\n    /**\\n     * @dev Checks if a claim is valid.\\n     * @param _identity the identity contract related to the claim\\n     * @param claimTopic the claim topic of the claim\\n     * @param sig the signature of the claim\\n     * @param data the data field of the claim\\n     * @return claimValid true if the claim is valid, false otherwise\\n     */\\n    function isClaimValid(\\n        IIdentity _identity,\\n        uint256 claimTopic,\\n        bytes calldata sig,\\n        bytes calldata data)\\n    external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3a12f842236b7ff3579bbd245fb0b243f77e98cd721ea165d679324a099af20d\",\"license\":\"GPL-3.0\"},\"@onchain-id/solidity/contracts/interface/IERC734.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev interface of the ERC734 (Key Holder) standard as defined in the EIP.\\n */\\ninterface IERC734 {\\n\\n    /**\\n     * @dev Emitted when an execution request was approved.\\n     *\\n     * Specification: MUST be triggered when approve was successfully called.\\n     */\\n    event Approved(uint256 indexed executionId, bool approved);\\n\\n    /**\\n     * @dev Emitted when an execute operation was approved and successfully performed.\\n     *\\n     * Specification: MUST be triggered when approve was called and the execution was successfully approved.\\n     */\\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n    /**\\n     * @dev Emitted when an execution request was performed via `execute`.\\n     *\\n     * Specification: MUST be triggered when execute was successfully called.\\n     */\\n    event ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n    /**\\n     * @dev Emitted when an execute operation was called and failed\\n     *\\n     * Specification: MUST be triggered when execute call failed\\n     */\\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n    /**\\n     * @dev Emitted when a key was added to the Identity.\\n     *\\n     * Specification: MUST be triggered when addKey was successfully called.\\n     */\\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n\\n    /**\\n     * @dev Emitted when a key was removed from the Identity.\\n     *\\n     * Specification: MUST be triggered when removeKey was successfully called.\\n     */\\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n\\n    /**\\n     * @dev Adds a _key to the identity. The _purpose specifies the purpose of the key.\\n     *\\n     * Triggers Event: `KeyAdded`\\n     *\\n     * Specification: MUST only be done by keys of purpose 1, or the identity\\n     * itself. If it's the identity itself, the approval process will determine its approval.\\n     */\\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external returns (bool success);\\n\\n    /**\\n    * @dev Approves an execution.\\n    *\\n    * Triggers Event: `Approved`\\n    * Triggers on execution successful Event: `Executed`\\n    * Triggers on execution failure Event: `ExecutionFailed`\\n    */\\n    function approve(uint256 _id, bool _approve) external returns (bool success);\\n\\n    /**\\n     * @dev Removes _purpose for _key from the identity.\\n     *\\n     * Triggers Event: `KeyRemoved`\\n     *\\n     * Specification: MUST only be done by keys of purpose 1, or the identity itself.\\n     * If it's the identity itself, the approval process will determine its approval.\\n     */\\n    function removeKey(bytes32 _key, uint256 _purpose) external returns (bool success);\\n\\n    /**\\n     * @dev Passes an execution instruction to an ERC734 identity.\\n     * How the execution is handled is up to the identity implementation:\\n     * An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to\\n     * approve this execution.\\n     * Execute COULD be used as the only accessor for `addKey` and `removeKey`.\\n     *\\n     * Triggers Event: ExecutionRequested\\n     * Triggers on direct execution Event: Executed\\n     */\\n    function execute(address _to, uint256 _value, bytes calldata _data) external payable returns (uint256 executionId);\\n\\n    /**\\n     * @dev Returns the full key data, if present in the identity.\\n     */\\n    function getKey(bytes32 _key) external view returns (uint256[] memory purposes, uint256 keyType, bytes32 key);\\n\\n    /**\\n     * @dev Returns the list of purposes associated with a key.\\n     */\\n    function getKeyPurposes(bytes32 _key) external view returns(uint256[] memory _purposes);\\n\\n    /**\\n     * @dev Returns an array of public key bytes32 held by this identity.\\n     */\\n    function getKeysByPurpose(uint256 _purpose) external view returns (bytes32[] memory keys);\\n\\n    /**\\n     * @dev Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE.\\n     */\\n    function keyHasPurpose(bytes32 _key, uint256 _purpose) external view returns (bool exists);\\n}\\n\",\"keccak256\":\"0x8c8a5a7951ee25569288c0c6662b59599deec7d0f2fcb74c8f80a8fd9354e8af\",\"license\":\"GPL-3.0\"},\"@onchain-id/solidity/contracts/interface/IERC735.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev interface of the ERC735 (Claim Holder) standard as defined in the EIP.\\n */\\ninterface IERC735 {\\n\\n    /**\\n     * @dev Emitted when a claim was added.\\n     *\\n     * Specification: MUST be triggered when a claim was successfully added.\\n     */\\n    event ClaimAdded(\\n        bytes32 indexed claimId,\\n        uint256 indexed topic,\\n        uint256 scheme,\\n        address indexed issuer,\\n        bytes signature,\\n        bytes data,\\n        string uri);\\n\\n    /**\\n     * @dev Emitted when a claim was removed.\\n     *\\n     * Specification: MUST be triggered when removeClaim was successfully called.\\n     */\\n    event ClaimRemoved(\\n        bytes32 indexed claimId,\\n        uint256 indexed topic,\\n        uint256 scheme,\\n        address indexed issuer,\\n        bytes signature,\\n        bytes data,\\n        string uri);\\n\\n    /**\\n     * @dev Emitted when a claim was changed.\\n     *\\n     * Specification: MUST be triggered when addClaim was successfully called on an existing claimId.\\n     */\\n    event ClaimChanged(\\n        bytes32 indexed claimId,\\n        uint256 indexed topic,\\n        uint256 scheme,\\n        address indexed issuer,\\n        bytes signature,\\n        bytes data,\\n        string uri);\\n\\n    /**\\n     * @dev Add or update a claim.\\n     *\\n     * Triggers Event: `ClaimAdded`, `ClaimChanged`\\n     *\\n     * Specification: Add or update a claim from an issuer.\\n     *\\n     * _signature is a signed message of the following structure:\\n     * `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`.\\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`.\\n     */\\n    function addClaim(\\n        uint256 _topic,\\n        uint256 _scheme,\\n        address issuer,\\n        bytes calldata _signature,\\n        bytes calldata _data,\\n        string calldata _uri)\\n    external returns (bytes32 claimRequestId);\\n\\n    /**\\n     * @dev Removes a claim.\\n     *\\n     * Triggers Event: `ClaimRemoved`\\n     *\\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\\n     */\\n    function removeClaim(bytes32 _claimId) external returns (bool success);\\n\\n    /**\\n     * @dev Get a claim by its ID.\\n     *\\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\\n     */\\n    function getClaim(bytes32 _claimId)\\n    external view returns(\\n        uint256 topic,\\n        uint256 scheme,\\n        address issuer,\\n        bytes memory signature,\\n        bytes memory data,\\n        string memory uri);\\n\\n    /**\\n     * @dev Returns an array of claim IDs by topic.\\n     */\\n    function getClaimIdsByTopic(uint256 _topic) external view returns(bytes32[] memory claimIds);\\n}\\n\",\"keccak256\":\"0xaaea6f3ecdc5f30e795e07aacdfc1b177741ef174910e943e96f6de7a8db6efb\",\"license\":\"GPL-3.0\"},\"@onchain-id/solidity/contracts/interface/IIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC734.sol\\\";\\nimport \\\"./IERC735.sol\\\";\\n\\n// solhint-disable-next-line no-empty-blocks\\ninterface IIdentity is IERC734, IERC735 {\\n    /**\\n     * @dev Checks if a claim is valid.\\n     * @param _identity the identity contract related to the claim\\n     * @param claimTopic the claim topic of the claim\\n     * @param sig the signature of the claim\\n     * @param data the data field of the claim\\n     * @return claimValid true if the claim is valid, false otherwise\\n     */\\n    function isClaimValid(\\n        IIdentity _identity,\\n        uint256 claimTopic,\\n        bytes calldata sig,\\n        bytes calldata data)\\n    external view returns (bool);\\n}\\n\",\"keccak256\":\"0x206c93ed62a48802edcad87e229f53c74817349a49f5ef21ea4780ab27b39cdf\",\"license\":\"GPL-3.0\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x48771281a69d34c4ca41a092e82ebedd783ed5540b3098c97b978345f0257b54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/registry/IdentityRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\\\";\\r\\nimport \\\"@onchain-id/solidity/contracts/interface/IIdentity.sol\\\";\\r\\nimport \\\"./interface/IClaimTopicsRegistry.sol\\\";\\r\\nimport \\\"./interface/IClaimIssuersRegistry.sol\\\";\\r\\nimport \\\"./interface/IIdentityRegistry.sol\\\";\\r\\nimport \\\"./interface/IIdentityRegistryStorage.sol\\\";\\r\\n\\r\\n/// @title ERC-3643 - IdentityRegistry\\r\\n/// @dev This contract is used to manage identities in the ERC-3643 standard.\\r\\n/// It allows for the registration, updating and deletion of identities associated with user addresses.\\r\\n/// It also supports the management of claim topics and claim issuers.\\r\\ncontract IdentityRegistry is IIdentityRegistry, AccessControl {\\r\\n    /// @notice The address of the ClaimTopicsRegistry contract.\\r\\n    IClaimTopicsRegistry private _tokenTopicsRegistry;\\r\\n\\r\\n    /// @notice The address of the ClaimIssuersRegistry contract.\\r\\n    IClaimIssuersRegistry private _tokenIssuersRegistry;\\r\\n\\r\\n    /// @notice The address of the IdentityRegistryStorage contract.\\r\\n    IIdentityRegistryStorage private _tokenIdentityStorage;\\r\\n\\r\\n    // keccak256(AGENT_ROLE)\\r\\n    bytes32 public constant AGENT_ROLE =\\r\\n        0xcab5a0bfe0b79d2c4b1c2e02599fa044d115b7511f9659307cb4276950967709;\\r\\n\\r\\n    // keccak256(OWNER_ROLE)\\r\\n    bytes32 public constant OWNER_ROLE =\\r\\n        0xb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e;\\r\\n\\r\\n    /// @dev Constructor of the IdentityRegistry contract.\\r\\n    /// @param _claimIssuersRegistry The address of the claim issuers registry contract.\\r\\n    /// @param _claimTopicsRegistry The address of the claim topics registry contract.\\r\\n    /// @param _identityStorage The address of the identity registry storage contract.\\r\\n    /// @notice This constructor sets the initial state of the IdentityRegistry contract.\\r\\n    constructor(\\r\\n        IClaimIssuersRegistry _claimIssuersRegistry,\\r\\n        IClaimTopicsRegistry _claimTopicsRegistry,\\r\\n        IIdentityRegistryStorage _identityStorage\\r\\n    ) {\\r\\n        require(\\r\\n            address(_claimIssuersRegistry) != address(0) &&\\r\\n                address(_claimTopicsRegistry) != address(0) &&\\r\\n                address(_identityStorage) != address(0),\\r\\n            \\\"ERC-3643: Invalid zero address\\\"\\r\\n        );\\r\\n        _grantRole(bytes32(0), _msgSender());\\r\\n        _grantRole(OWNER_ROLE, _msgSender());\\r\\n        _tokenTopicsRegistry = _claimTopicsRegistry;\\r\\n        _tokenIssuersRegistry = _claimIssuersRegistry;\\r\\n        _tokenIdentityStorage = _identityStorage;\\r\\n        emit ClaimTopicsRegistrySet(_claimTopicsRegistry);\\r\\n        emit ClaimIssuersRegistrySet(_claimIssuersRegistry);\\r\\n        emit IdentityStorageSet(_identityStorage);\\r\\n    }\\r\\n\\r\\n    /// @notice Register an identity associated with a user address.\\r\\n    /// @param _userAddress The address of the user.\\r\\n    /// @param _identity The identity of the user.\\r\\n    /// @param _country The country code of the user.\\r\\n    /// @dev Only an agent can register an identity.\\r\\n    function registerIdentity(\\r\\n        address _userAddress,\\r\\n        IIdentity _identity,\\r\\n        uint16 _country\\r\\n    ) external onlyRole(AGENT_ROLE) {\\r\\n        _registerIdentity(_userAddress, _identity, _country);\\r\\n    }\\r\\n\\r\\n    /// @notice Register multiple identities associated with multiple user addresses.\\r\\n    /// @param _userAddresses The array of user addresses.\\r\\n    /// @param _identities The array of identities.\\r\\n    /// @param _countries The array of country codes.\\r\\n    /// @dev Only an agent can register identities in batch.\\r\\n    function batchRegisterIdentity(\\r\\n        address[] calldata _userAddresses,\\r\\n        IIdentity[] calldata _identities,\\r\\n        uint16[] calldata _countries\\r\\n    ) external onlyRole(AGENT_ROLE) {\\r\\n        uint length = _userAddresses.length;\\r\\n        require(length == _identities.length, \\\"ERC-3643: Array size mismatch\\\");\\r\\n        require(length == _countries.length, \\\"ERC-3643: Array size mismatch\\\");\\r\\n        for (uint256 i = 0; i < length; ) {\\r\\n            _registerIdentity(_userAddresses[i], _identities[i], _countries[i]);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Update the identity associated with a user address.\\r\\n    /// @param _userAddress The address of the user.\\r\\n    /// @param _identity The new identity of the user.\\r\\n    /// @dev Only an agent can update an identity.\\r\\n    function updateIdentity(\\r\\n        address _userAddress,\\r\\n        IIdentity _identity\\r\\n    ) external onlyRole(AGENT_ROLE) {\\r\\n        IIdentity oldIdentity = _getIdentity(_userAddress);\\r\\n        _tokenIdentityStorage.modifyStoredIdentity(_userAddress, _identity);\\r\\n        emit IdentityUpdated(oldIdentity, _identity);\\r\\n    }\\r\\n\\r\\n    /// @notice Update the country code associated with a user address.\\r\\n    /// @param _userAddress The address of the user.\\r\\n    /// @param _country The new country code of the user.\\r\\n    /// @dev Only an agent can update a country code.\\r\\n    function updateCountry(\\r\\n        address _userAddress,\\r\\n        uint16 _country\\r\\n    ) external onlyRole(AGENT_ROLE) {\\r\\n        _tokenIdentityStorage.modifyStoredInvestorCountry(\\r\\n            _userAddress,\\r\\n            _country\\r\\n        );\\r\\n        emit CountryUpdated(_userAddress, _country);\\r\\n    }\\r\\n\\r\\n    /// @notice Delete the identity associated with a user address.\\r\\n    /// @param _userAddress The address of the user.\\r\\n    /// @dev Only an agent can delete an identity.\\r\\n    function deleteIdentity(\\r\\n        address _userAddress\\r\\n    ) external onlyRole(AGENT_ROLE) {\\r\\n        IIdentity oldIdentity = _getIdentity(_userAddress);\\r\\n        _tokenIdentityStorage.removeIdentityFromStorage(_userAddress);\\r\\n        emit IdentityRemoved(_userAddress, oldIdentity);\\r\\n    }\\r\\n\\r\\n    /// @notice Set the IdentityRegistryStorage contract.\\r\\n    /// @param _identityRegistryStorage The address of the new IdentityRegistryStorage contract.\\r\\n    /// @dev Only the owner can set the IdentityRegistryStorage contract.\\r\\n    function setIdentityRegistryStorage(\\r\\n        IIdentityRegistryStorage _identityRegistryStorage\\r\\n    ) external onlyRole(OWNER_ROLE) {\\r\\n        _tokenIdentityStorage = _identityRegistryStorage;\\r\\n        emit IdentityStorageSet(_identityRegistryStorage);\\r\\n    }\\r\\n\\r\\n    /// @notice Set the ClaimTopicsRegistry contract.\\r\\n    /// @param _claimTopicsRegistry The address of the new ClaimTopicsRegistry contract.\\r\\n    /// @dev Only the owner can set the ClaimTopicsRegistry contract.\\r\\n    function setClaimTopicsRegistry(\\r\\n        IClaimTopicsRegistry _claimTopicsRegistry\\r\\n    ) external onlyRole(OWNER_ROLE) {\\r\\n        _tokenTopicsRegistry = _claimTopicsRegistry;\\r\\n        emit ClaimTopicsRegistrySet(_claimTopicsRegistry);\\r\\n    }\\r\\n\\r\\n    /// @notice Set the ClaimIssuersRegistry contract.\\r\\n    /// @param _claimIssuersRegistry The address of the new ClaimIssuersRegistry contract.\\r\\n    /// @dev Only the owner can set the ClaimIssuersRegistry contract.\\r\\n    function setClaimIssuersRegistry(\\r\\n        IClaimIssuersRegistry _claimIssuersRegistry\\r\\n    ) external onlyRole(OWNER_ROLE) {\\r\\n        _tokenIssuersRegistry = _claimIssuersRegistry;\\r\\n        emit ClaimIssuersRegistrySet(_claimIssuersRegistry);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if a user is verified based on their identity, claim topics, and claim issuers.\\r\\n    /// @param _userAddress The address of the user to check.\\r\\n    /// @return A boolean indicating if the user is verified.\\r\\n    function isVerified(address _userAddress) external view returns (bool) {\\r\\n        // Get the identity of the user from the given address\\r\\n        IIdentity userIdentity = _getIdentity(_userAddress);\\r\\n\\r\\n        // If the user identity is not set (address is 0), return false\\r\\n        if (address(userIdentity) == address(0)) return false;\\r\\n\\r\\n        // Get the required claim topics for the token\\r\\n        uint256[] memory claimTopics = _tokenTopicsRegistry.getClaimTopics();\\r\\n        uint claimTopicsLength = claimTopics.length;\\r\\n\\r\\n        // If there are no required claim topics, return true\\r\\n        if (claimTopicsLength == 0) return true;\\r\\n\\r\\n        // Loop over all required claim topics\\r\\n        for (uint256 i = 0; i < claimTopicsLength; i++) {\\r\\n            if (!_isClaimValid(userIdentity, claimTopics[i])) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        // If all checks pass, return true\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @notice Get the country of an investor.\\r\\n    /// @param _userAddress The address of the investor.\\r\\n    /// @return The country of the investor.\\r\\n    function investorCountry(\\r\\n        address _userAddress\\r\\n    ) external view returns (uint16) {\\r\\n        return _tokenIdentityStorage.storedInvestorCountry(_userAddress);\\r\\n    }\\r\\n\\r\\n    /// @notice Get the issuers registry.\\r\\n    /// @return The current issuers registry.\\r\\n    function issuersRegistry() external view returns (IClaimIssuersRegistry) {\\r\\n        return _tokenIssuersRegistry;\\r\\n    }\\r\\n\\r\\n    /// @notice Get the topics registry.\\r\\n    /// @return The current topics registry.\\r\\n    function topicsRegistry() external view returns (IClaimTopicsRegistry) {\\r\\n        return _tokenTopicsRegistry;\\r\\n    }\\r\\n\\r\\n    /// @notice Get the identity storage.\\r\\n    /// @return The current identity storage.\\r\\n    function identityStorage()\\r\\n        external\\r\\n        view\\r\\n        returns (IIdentityRegistryStorage)\\r\\n    {\\r\\n        return _tokenIdentityStorage;\\r\\n    }\\r\\n\\r\\n    /// @notice Check if an address is contained in the registry.\\r\\n    /// @param _userAddress The address to check.\\r\\n    /// @return A boolean indicating if the address is in the registry.\\r\\n    function contains(address _userAddress) external view returns (bool) {\\r\\n        return address(identity(_userAddress)) == address(0) ? false : true;\\r\\n    }\\r\\n\\r\\n    /// @notice Get the identity of a user.\\r\\n    /// @param _userAddress The address of the user.\\r\\n    /// @return The identity of the user.\\r\\n    function identity(address _userAddress) public view returns (IIdentity) {\\r\\n        return _tokenIdentityStorage.storedIdentity(_userAddress);\\r\\n    }\\r\\n\\r\\n    /// @notice Register a new identity.\\r\\n    /// @param _userAddress The address of the user.\\r\\n    /// @param _identity The identity of the user.\\r\\n    /// @param _country The country of the user.\\r\\n    function _registerIdentity(\\r\\n        address _userAddress,\\r\\n        IIdentity _identity,\\r\\n        uint16 _country\\r\\n    ) private {\\r\\n        _tokenIdentityStorage.addIdentityToStorage(\\r\\n            _userAddress,\\r\\n            _identity,\\r\\n            _country\\r\\n        );\\r\\n        emit IdentityRegistered(_userAddress, _identity);\\r\\n    }\\r\\n\\r\\n    /// @notice Get the identity of a user.\\r\\n    /// @param _userAddress The address of the user.\\r\\n    /// @return The identity of the user.\\r\\n    function _getIdentity(\\r\\n        address _userAddress\\r\\n    ) private view returns (IIdentity) {\\r\\n        return _tokenIdentityStorage.storedIdentity(_userAddress);\\r\\n    }\\r\\n\\r\\n    function _isClaimValid(\\r\\n        IIdentity userIdentity,\\r\\n        uint256 claimTopic\\r\\n    ) private view returns (bool) {\\r\\n        IClaimIssuer[] memory claimIssuers = _tokenIssuersRegistry\\r\\n            .getClaimIssuersForClaimTopic(claimTopic);\\r\\n        uint claimIssuersLength = claimIssuers.length;\\r\\n\\r\\n        if (claimIssuersLength == 0) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        bytes32[] memory claimIds = new bytes32[](claimIssuersLength);\\r\\n\\r\\n        for (uint256 i = 0; i < claimIssuersLength; i++) {\\r\\n            claimIds[i] = keccak256(abi.encode(claimIssuers[i], claimTopic));\\r\\n        }\\r\\n\\r\\n        for (uint256 j = 0; j < claimIds.length; j++) {\\r\\n            (\\r\\n                uint256 foundClaimTopic,\\r\\n                ,\\r\\n                address issuer,\\r\\n                bytes memory sig,\\r\\n                bytes memory data,\\r\\n\\r\\n            ) = userIdentity.getClaim(claimIds[j]);\\r\\n\\r\\n            if (foundClaimTopic == claimTopic) {\\r\\n                if (\\r\\n                    _isIssuerClaimValid(\\r\\n                        userIdentity,\\r\\n                        issuer,\\r\\n                        claimTopic,\\r\\n                        sig,\\r\\n                        data\\r\\n                    )\\r\\n                ) {\\r\\n                    return true;\\r\\n                }\\r\\n            } else if (j == claimIds.length - 1) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /// @param userIdentity The identity contract related to the claim.\\r\\n    /// @param issuer The address of the claim issuer.\\r\\n    /// @param claimTopic The claim topic of the claim.\\r\\n    /// @param sig The signature of the claim.\\r\\n    /// @param data The data field of the claim.\\r\\n    /// @return claimValid True if the claim is valid, false otherwise.\\r\\n    function _isIssuerClaimValid(\\r\\n        IIdentity userIdentity,\\r\\n        address issuer,\\r\\n        uint claimTopic,\\r\\n        bytes memory sig,\\r\\n        bytes memory data\\r\\n    ) private view returns (bool) {\\r\\n        try\\r\\n            IClaimIssuer(issuer).isClaimValid(\\r\\n                userIdentity,\\r\\n                claimTopic,\\r\\n                sig,\\r\\n                data\\r\\n            )\\r\\n        returns (bool _validity) {\\r\\n            return _validity;\\r\\n        } catch {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5d747a35658820fbb2b1a8f8a19d2c526c7d5cc771db35d508c54455654d762a\",\"license\":\"GPL-3.0\"},\"contracts/registry/interface/IClaimIssuersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\\\";\\r\\n\\r\\ninterface IClaimIssuersRegistry {\\r\\n    /**\\r\\n     *  this event is emitted when a claim issuer is added in the registry.\\r\\n     *  the event is emitted by the addClaimIssuer function\\r\\n     *  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract\\r\\n     *  `claimTopics` is the set of claims that the claim issuer is allowed to emit\\r\\n     */\\r\\n    event ClaimIssuerAdded(\\r\\n        IClaimIssuer indexed claimIssuer,\\r\\n        uint256[] claimTopics\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when a claim issuer is removed from the registry.\\r\\n     *  the event is emitted by the removeClaimIssuer function\\r\\n     *  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract\\r\\n     */\\r\\n    event ClaimIssuerRemoved(IClaimIssuer indexed claimIssuer);\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when the set of claim topics is changed for a given claim issuer.\\r\\n     *  the event is emitted by the updateIssuerClaimTopics function\\r\\n     *  `claimIssuer` is the address of the claim issuer's ClaimIssuer contract\\r\\n     *  `claimTopics` is the set of claims that the claim issuer is allowed to emit\\r\\n     */\\r\\n    event ClaimTopicsUpdated(\\r\\n        IClaimIssuer indexed claimIssuer,\\r\\n        uint256[] claimTopics\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  @dev registers a ClaimIssuer contract as claim claim issuer.\\r\\n     *  Requires that a ClaimIssuer contract doesn't already exist\\r\\n     *  Requires that the claimTopics set is not empty\\r\\n     *  Requires that there is no more than 15 claimTopics\\r\\n     *  Requires that there is no more than 50 Claim issuers\\r\\n     *  @param _claimIssuer The ClaimIssuer contract address of the claim claim issuer.\\r\\n     *  @param _claimTopics the set of claim topics that the claim issuer is allowed to emit\\r\\n     *  This function can only be called by the owner of the Claim Issuers Registry contract\\r\\n     *  emits a `ClaimIssuerAdded` event\\r\\n     */\\r\\n    function addClaimIssuer(\\r\\n        IClaimIssuer _claimIssuer,\\r\\n        uint256[] calldata _claimTopics\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Removes the ClaimIssuer contract of a claim claim issuer.\\r\\n     *  Requires that the claim issuer contract to be registered first\\r\\n     *  @param _claimIssuer the claim issuer to remove.\\r\\n     *  This function can only be called by the owner of the Claim Issuers Registry contract\\r\\n     *  emits a `ClaimIssuerRemoved` event\\r\\n     */\\r\\n    function removeClaimIssuer(IClaimIssuer _claimIssuer) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Updates the set of claim topics that a claim issuer is allowed to emit.\\r\\n     *  Requires that this ClaimIssuer contract already exists in the registry\\r\\n     *  Requires that the provided claimTopics set is not empty\\r\\n     *  Requires that there is no more than 15 claimTopics\\r\\n     *  @param _claimIssuer the claim issuer to update.\\r\\n     *  @param _claimTopics the set of claim topics that the claim issuer is allowed to emit\\r\\n     *  This function can only be called by the owner of the Claim Issuers Registry contract\\r\\n     *  emits a `ClaimTopicsUpdated` event\\r\\n     */\\r\\n    function updateIssuerClaimTopics(\\r\\n        IClaimIssuer _claimIssuer,\\r\\n        uint256[] calldata _claimTopics\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Function for getting all the claim claim issuers stored.\\r\\n     *  @return array of all claim issuers registered.\\r\\n     */\\r\\n    function getClaimIssuers() external view returns (IClaimIssuer[] memory);\\r\\n\\r\\n    /**\\r\\n     *  @dev Function for getting all the claim issuer allowed for a given claim topic.\\r\\n     *  @param claimTopic the claim topic to get the claim issuers for.\\r\\n     *  @return array of all claim issuer addresses that are allowed for the given claim topic.\\r\\n     */\\r\\n    function getClaimIssuersForClaimTopic(\\r\\n        uint256 claimTopic\\r\\n    ) external view returns (IClaimIssuer[] memory);\\r\\n\\r\\n    /**\\r\\n     *  @dev Checks if the ClaimIssuer contract is claim\\r\\n     *  @param _issuer the address of the ClaimIssuer contract\\r\\n     *  @return true if the issuer is claim, false otherwise.\\r\\n     */\\r\\n    function isClaimIssuer(IClaimIssuer _issuer) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     *  @dev Function for getting all the claim topic of claim claim issuer\\r\\n     *  Requires the provided ClaimIssuer contract to be registered in the claim issuers registry.\\r\\n     *  @param _claimIssuer the claim issuer concerned.\\r\\n     *  @return The set of claim topics that the claim issuer is allowed to emit\\r\\n     */\\r\\n    function getClaimIssuerClaimTopics(\\r\\n        IClaimIssuer _claimIssuer\\r\\n    ) external view returns (uint256[] memory);\\r\\n\\r\\n    /**\\r\\n     *  @dev Function for checking if the claim claim issuer is allowed\\r\\n     *  to emit a certain claim topic\\r\\n     *  @param _issuer the address of the claim issuer's ClaimIssuer contract\\r\\n     *  @param _claimTopic the Claim Topic that has to be checked to know if the `issuer` is allowed to emit it\\r\\n     *  @return true if the issuer is claim for this claim topic.\\r\\n     */\\r\\n    function hasClaimTopic(\\r\\n        IClaimIssuer _issuer,\\r\\n        uint256 _claimTopic\\r\\n    ) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x36ebccbb89041f7f9f25abcaa7f700d227d4c683dcfc5436a7dfd26bca557dd1\",\"license\":\"GPL-3.0\"},\"contracts/registry/interface/IClaimTopicsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IClaimTopicsRegistry {\\r\\n    /**\\r\\n     *  this event is emitted when a claim topic has been added to the ClaimTopicsRegistry\\r\\n     *  the event is emitted by the 'addClaimTopic' function\\r\\n     *  `claimTopic` is the required claim added to the Claim Topics Registry\\r\\n     */\\r\\n    event ClaimTopicAdded(uint256 indexed claimTopic);\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when a claim topic has been removed from the ClaimTopicsRegistry\\r\\n     *  the event is emitted by the 'removeClaimTopic' function\\r\\n     *  `claimTopic` is the required claim removed from the Claim Topics Registry\\r\\n     */\\r\\n    event ClaimTopicRemoved(uint256 indexed claimTopic);\\r\\n\\r\\n    /**\\r\\n     * @dev Add a claim claim topic (For example: KYC=1, AML=2).\\r\\n     * Only owner can call.\\r\\n     * emits `ClaimTopicAdded` event\\r\\n     * cannot add more than 15 topics for 1 token as adding more could create gas issues\\r\\n     * @param _claimTopic The claim topic index\\r\\n     */\\r\\n    function addClaimTopic(uint256 _claimTopic) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Remove a claim claim topic (For example: KYC=1, AML=2).\\r\\n     *  Only owner can call.\\r\\n     *  emits `ClaimTopicRemoved` event\\r\\n     *  @param _claimTopic The claim topic index\\r\\n     */\\r\\n    function removeClaimTopic(uint256 _claimTopic) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Get the claim claim topics for the security token\\r\\n     *  @return Array of claim claim topics\\r\\n     */\\r\\n    function getClaimTopics() external view returns (uint256[] memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x5354a22fe4706ac81152c7f3f666f9057fde01e68c498f2a4707edf172fdd7a7\",\"license\":\"GPL-3.0\"},\"contracts/registry/interface/IIdentityRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./IClaimIssuersRegistry.sol\\\";\\r\\nimport \\\"./IClaimTopicsRegistry.sol\\\";\\r\\nimport \\\"./IIdentityRegistryStorage.sol\\\";\\r\\n\\r\\nimport \\\"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\\\";\\r\\nimport \\\"@onchain-id/solidity/contracts/interface/IIdentity.sol\\\";\\r\\n\\r\\ninterface IIdentityRegistry {\\r\\n    /**\\r\\n     *  this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry\\r\\n     *  the event is emitted by the IdentityRegistry constructor\\r\\n     *  `claimTopicsRegistry` is the address of the Claim Topics Registry contract\\r\\n     */\\r\\n    event ClaimTopicsRegistrySet(\\r\\n        IClaimTopicsRegistry indexed claimTopicsRegistry\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when the IdentityRegistryStorage has been set for the IdentityRegistry\\r\\n     *  the event is emitted by the IdentityRegistry constructor\\r\\n     *  `identityStorage` is the address of the Identity Registry Storage contract\\r\\n     */\\r\\n    event IdentityStorageSet(IIdentityRegistryStorage indexed identityStorage);\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when the ClaimIssuersRegistry has been set for the IdentityRegistry\\r\\n     *  the event is emitted by the IdentityRegistry constructor\\r\\n     *  `claimIssuersRegistry` is the address of the Claim Issuers Registry contract\\r\\n     */\\r\\n    event ClaimIssuersRegistrySet(\\r\\n        IClaimIssuersRegistry indexed claimIssuersRegistry\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity is registered into the Identity Registry.\\r\\n     *  the event is emitted by the 'registerIdentity' function\\r\\n     *  `investorAddress` is the address of the investor's wallet\\r\\n     *  `identity` is the address of the Identity smart contract (onchainID)\\r\\n     */\\r\\n    event IdentityRegistered(\\r\\n        address indexed investorAddress,\\r\\n        IIdentity indexed identity\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity is removed from the Identity Registry.\\r\\n     *  the event is emitted by the 'deleteIdentity' function\\r\\n     *  `investorAddress` is the address of the investor's wallet\\r\\n     *  `identity` is the address of the Identity smart contract (onchainID)\\r\\n     */\\r\\n    event IdentityRemoved(\\r\\n        address indexed investorAddress,\\r\\n        IIdentity indexed identity\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity has been updated\\r\\n     *  the event is emitted by the 'updateIdentity' function\\r\\n     *  `oldIdentity` is the old Identity contract's address to update\\r\\n     *  `newIdentity` is the new Identity contract's\\r\\n     */\\r\\n    event IdentityUpdated(\\r\\n        IIdentity indexed oldIdentity,\\r\\n        IIdentity indexed newIdentity\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity's country has been updated\\r\\n     *  the event is emitted by the 'updateCountry' function\\r\\n     *  `investorAddress` is the address on which the country has been updated\\r\\n     *  `country` is the numeric code (ISO 3166-1) of the new country\\r\\n     */\\r\\n    event CountryUpdated(\\r\\n        address indexed investorAddress,\\r\\n        uint16 indexed country\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  @dev Register an identity contract corresponding to a user address.\\r\\n     *  Requires that the user doesn't have an identity contract already registered.\\r\\n     *  This function can only be called by a wallet set as agent of the smart contract\\r\\n     *  @param _userAddress The address of the user\\r\\n     *  @param _identity The address of the user's identity contract\\r\\n     *  @param _country The country of the investor\\r\\n     *  emits `IdentityRegistered` event\\r\\n     */\\r\\n    function registerIdentity(\\r\\n        address _userAddress,\\r\\n        IIdentity _identity,\\r\\n        uint16 _country\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Removes an user from the identity registry.\\r\\n     *  Requires that the user have an identity contract already deployed that will be deleted.\\r\\n     *  This function can only be called by a wallet set as agent of the smart contract\\r\\n     *  @param _userAddress The address of the user to be removed\\r\\n     *  emits `IdentityRemoved` event\\r\\n     */\\r\\n    function deleteIdentity(address _userAddress) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Replace the actual identityRegistryStorage contract with a new one.\\r\\n     *  This function can only be called by the wallet set as owner of the smart contract\\r\\n     *  @param _identityRegistryStorage The address of the new Identity Registry Storage\\r\\n     *  emits `IdentityStorageSet` event\\r\\n     */\\r\\n    function setIdentityRegistryStorage(\\r\\n        IIdentityRegistryStorage _identityRegistryStorage\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Replace the actual claimTopicsRegistry contract with a new one.\\r\\n     *  This function can only be called by the wallet set as owner of the smart contract\\r\\n     *  @param _claimTopicsRegistry The address of the new claim Topics Registry\\r\\n     *  emits `ClaimTopicsRegistrySet` event\\r\\n     */\\r\\n    function setClaimTopicsRegistry(\\r\\n        IClaimTopicsRegistry _claimTopicsRegistry\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Replace the actual claimIssuersRegistry contract with a new one.\\r\\n     *  This function can only be called by the wallet set as owner of the smart contract\\r\\n     *  @param _claimIssuersRegistry The address of the new Claim Issuers Registry\\r\\n     *  emits `ClaimIssuersRegistrySet` event\\r\\n     */\\r\\n    function setClaimIssuersRegistry(\\r\\n        IClaimIssuersRegistry _claimIssuersRegistry\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Updates the country corresponding to a user address.\\r\\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\\r\\n     *  This function can only be called by a wallet set as agent of the smart contract\\r\\n     *  @param _userAddress The address of the user\\r\\n     *  @param _country The new country of the user\\r\\n     *  emits `CountryUpdated` event\\r\\n     */\\r\\n    function updateCountry(address _userAddress, uint16 _country) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Updates an identity contract corresponding to a user address.\\r\\n     *  Requires that the user address should be the owner of the identity contract.\\r\\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\\r\\n     *  This function can only be called by a wallet set as agent of the smart contract\\r\\n     *  @param _userAddress The address of the user\\r\\n     *  @param _identity The address of the user's new identity contract\\r\\n     *  emits `IdentityUpdated` event\\r\\n     */\\r\\n    function updateIdentity(address _userAddress, IIdentity _identity) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev function allowing to register identities in batch\\r\\n     *  This function can only be called by a wallet set as agent of the smart contract\\r\\n     *  Requires that none of the users has an identity contract already registered.\\r\\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\\r\\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\r\\n     *  @param _userAddresses The addresses of the users\\r\\n     *  @param _identities The addresses of the corresponding identity contracts\\r\\n     *  @param _countries The countries of the corresponding investors\\r\\n     *  emits _userAddresses.length `IdentityRegistered` events\\r\\n     */\\r\\n    function batchRegisterIdentity(\\r\\n        address[] calldata _userAddresses,\\r\\n        IIdentity[] calldata _identities,\\r\\n        uint16[] calldata _countries\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev This functions checks whether a wallet has its Identity registered or not\\r\\n     *  in the Identity Registry.\\r\\n     *  @param _userAddress The address of the user to be checked.\\r\\n     *  @return 'True' if the address is contained in the Identity Registry, 'false' if not.\\r\\n     */\\r\\n    function contains(address _userAddress) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     *  @dev This functions checks whether an identity contract\\r\\n     *  corresponding to the provided user address has the required claims or not based\\r\\n     *  on the data fetched from claim issuers registry and from the claim topics registry\\r\\n     *  @param _userAddress The address of the user to be verified.\\r\\n     *  @return 'True' if the address is verified, 'false' if not.\\r\\n     */\\r\\n    function isVerified(address _userAddress) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the onchainID of an investor.\\r\\n     *  @param _userAddress The wallet of the investor\\r\\n     */\\r\\n    function identity(address _userAddress) external view returns (IIdentity);\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the country code of an investor.\\r\\n     *  @param _userAddress The wallet of the investor\\r\\n     */\\r\\n    function investorCountry(\\r\\n        address _userAddress\\r\\n    ) external view returns (uint16);\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the IdentityRegistryStorage linked to the current IdentityRegistry.\\r\\n     */\\r\\n    function identityStorage() external view returns (IIdentityRegistryStorage);\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the ClaimIssuersRegistry linked to the current IdentityRegistry.\\r\\n     */\\r\\n    function issuersRegistry() external view returns (IClaimIssuersRegistry);\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the ClaimTopicsRegistry linked to the current IdentityRegistry.\\r\\n     */\\r\\n    function topicsRegistry() external view returns (IClaimTopicsRegistry);\\r\\n}\\r\\n\",\"keccak256\":\"0x336b9143cb5262adf25b607503c5ac56b74fc81d1f663d83318e95a5e3cef309\",\"license\":\"GPL-3.0\"},\"contracts/registry/interface/IIdentityRegistryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@onchain-id/solidity/contracts/interface/IIdentity.sol\\\";\\r\\n\\r\\ninterface IIdentityRegistryStorage {\\r\\n    /// events\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity is registered into the storage contract.\\r\\n     *  the event is emitted by the 'registerIdentity' function\\r\\n     *  `investorAddress` is the address of the investor's wallet\\r\\n     *  `identity` is the address of the Identity smart contract (onchainID)\\r\\n     */\\r\\n    event IdentityStored(\\r\\n        address indexed investorAddress,\\r\\n        IIdentity indexed identity\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity is removed from the storage contract.\\r\\n     *  the event is emitted by the 'deleteIdentity' function\\r\\n     *  `investorAddress` is the address of the investor's wallet\\r\\n     *  `identity` is the address of the Identity smart contract (onchainID)\\r\\n     */\\r\\n    event IdentityUnstored(\\r\\n        address indexed investorAddress,\\r\\n        IIdentity indexed identity\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity has been updated\\r\\n     *  the event is emitted by the 'updateIdentity' function\\r\\n     *  `oldIdentity` is the old Identity contract's address to update\\r\\n     *  `newIdentity` is the new Identity contract's\\r\\n     */\\r\\n    event IdentityModified(\\r\\n        IIdentity indexed oldIdentity,\\r\\n        IIdentity indexed newIdentity\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity's country has been updated\\r\\n     *  the event is emitted by the 'updateCountry' function\\r\\n     *  `investorAddress` is the address on which the country has been updated\\r\\n     *  `country` is the numeric code (ISO 3166-1) of the new country\\r\\n     */\\r\\n    event CountryModified(\\r\\n        address indexed investorAddress,\\r\\n        uint16 indexed country\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity Registry is bound to the storage contract\\r\\n     *  the event is emitted by the 'addIdentityRegistry' function\\r\\n     *  `identityRegistry` is the address of the identity registry added\\r\\n     */\\r\\n    event IdentityRegistryBound(address indexed identityRegistry);\\r\\n\\r\\n    /**\\r\\n     *  this event is emitted when an Identity Registry is unbound from the storage contract\\r\\n     *  the event is emitted by the 'removeIdentityRegistry' function\\r\\n     *  `identityRegistry` is the address of the identity registry removed\\r\\n     */\\r\\n    event IdentityRegistryUnbound(address indexed identityRegistry);\\r\\n\\r\\n    /// functions\\r\\n\\r\\n    /**\\r\\n     *  @dev adds an identity contract corresponding to a user address in the storage.\\r\\n     *  Requires that the user doesn't have an identity contract already registered.\\r\\n     *  This function can only be called by an address set as agent of the smart contract\\r\\n     *  @param _userAddress The address of the user\\r\\n     *  @param _identity The address of the user's identity contract\\r\\n     *  @param _country The country of the investor\\r\\n     *  emits `IdentityStored` event\\r\\n     */\\r\\n    function addIdentityToStorage(\\r\\n        address _userAddress,\\r\\n        IIdentity _identity,\\r\\n        uint16 _country\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Removes an user from the storage.\\r\\n     *  Requires that the user have an identity contract already deployed that will be deleted.\\r\\n     *  This function can only be called by an address set as agent of the smart contract\\r\\n     *  @param _userAddress The address of the user to be removed\\r\\n     *  emits `IdentityUnstored` event\\r\\n     */\\r\\n    function removeIdentityFromStorage(address _userAddress) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Updates the country corresponding to a user address.\\r\\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\\r\\n     *  This function can only be called by an address set as agent of the smart contract\\r\\n     *  @param _userAddress The address of the user\\r\\n     *  @param _country The new country of the user\\r\\n     *  emits `CountryModified` event\\r\\n     */\\r\\n    function modifyStoredInvestorCountry(\\r\\n        address _userAddress,\\r\\n        uint16 _country\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Updates an identity contract corresponding to a user address.\\r\\n     *  Requires that the user address should be the owner of the identity contract.\\r\\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\\r\\n     *  This function can only be called by an address set as agent of the smart contract\\r\\n     *  @param _userAddress The address of the user\\r\\n     *  @param _identity The address of the user's new identity contract\\r\\n     *  emits `IdentityModified` event\\r\\n     */\\r\\n    function modifyStoredIdentity(\\r\\n        address _userAddress,\\r\\n        IIdentity _identity\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     *  @notice Adds an identity registry as agent of the Identity Registry Storage Contract.\\r\\n     *  This function can only be called by the wallet set as owner of the smart contract\\r\\n     *  This function adds the identity registry to the list of identityRegistries linked to the storage contract\\r\\n     *  cannot bind more than 300 IR to 1 IRS\\r\\n     *  @param _identityRegistry The identity registry address to add.\\r\\n     */\\r\\n    function bindIdentityRegistry(address _identityRegistry) external;\\r\\n\\r\\n    /**\\r\\n     *  @notice Removes an identity registry from being agent of the Identity Registry Storage Contract.\\r\\n     *  This function can only be called by the wallet set as owner of the smart contract\\r\\n     *  This function removes the identity registry from the list of identityRegistries linked to the storage contract\\r\\n     *  @param _identityRegistry The identity registry address to remove.\\r\\n     */\\r\\n    function unbindIdentityRegistry(address _identityRegistry) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the identity registries linked to the storage contract\\r\\n     */\\r\\n    function linkedIdentityRegistries()\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory);\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the onchainID of an investor.\\r\\n     *  @param _userAddress The wallet of the investor\\r\\n     */\\r\\n    function storedIdentity(\\r\\n        address _userAddress\\r\\n    ) external view returns (IIdentity);\\r\\n\\r\\n    /**\\r\\n     *  @dev Returns the country code of an investor.\\r\\n     *  @param _userAddress The wallet of the investor\\r\\n     */\\r\\n    function storedInvestorCountry(\\r\\n        address _userAddress\\r\\n    ) external view returns (uint16);\\r\\n}\\r\\n\",\"keccak256\":\"0x8c3b5f11cc5509ee33e63447f2235e42aa81b7656c7d383526a3e7a8adee7cc1\",\"license\":\"GPL-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001ce938038062001ce9833981016040819052620000349162000283565b6001600160a01b038316158015906200005557506001600160a01b03821615155b80156200006a57506001600160a01b03811615155b620000bb5760405162461bcd60e51b815260206004820152601e60248201527f4552432d333634333a20496e76616c6964207a65726f20616464726573730000604482015260640160405180910390fd5b620000c8600033620001c9565b620000f47fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e33620001c9565b600180546001600160a01b038085166001600160a01b031992831681179093556002805487831690841617905560038054918516919092161790556040517f7170bf15b246e880b2369cd7c67d057760d8a35149e8c64dde91efa22bcc76d090600090a26040516001600160a01b038416907f811d3016da8008875247af93af072ec7801e39d9f4c686fec82ab600d8e555e890600090a26040516001600160a01b038216907f2fa8b95c1db7afe99e3398f3792f008135cedc1fa26b0bb2ecd2352cd166d53c90600090a2505050620002d7565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000266576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002253390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6001600160a01b03811681146200028057600080fd5b50565b6000806000606084860312156200029957600080fd5b8351620002a6816200026a565b6020850151909350620002b9816200026a565b6040850151909250620002cc816200026a565b809150509250925092565b611a0280620002e76000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80636bc72c90116100c3578063b4f3fcb71161007c578063b4f3fcb714610304578063b9209e3314610315578063d547741f14610328578063e58378bb1461033b578063f0eb5e5414610350578063f11abfd81461036357600080fd5b80636bc72c901461028a5780637e42683b1461029d5780638e098ca1146102c357806391d14854146102d6578063a217fddf146102e9578063a8d29d1d146102f157600080fd5b80633b239a7f116101155780633b239a7f146102065780633b3e12f414610219578063454a03e01461023e5780635dbe47e814610251578063653dc9f114610264578063670af6a91461027757600080fd5b806301ffc9a71461015d57806322459e1814610185578063248a9ca3146101a857806326d941ae146101cb5780632f2ff15d146101e057806336568abe146101f3575b600080fd5b61017061016b366004611266565b610374565b60405190151581526020015b60405180910390f35b61019a6000805160206119ad83398151915281565b60405190815260200161017c565b61019a6101b6366004611290565b60009081526020819052604090206001015490565b6101de6101d93660046112be565b6103ab565b005b6101de6101ee3660046112db565b61040e565b6101de6102013660046112db565b610438565b6101de61021436600461131b565b6104bb565b6001546001600160a01b03165b6040516001600160a01b03909116815260200161017c565b6101de61024c366004611349565b61057b565b61017061025f3660046112be565b6105a4565b6101de6102723660046113e0565b6105cd565b6101de6102853660046112be565b61071f565b6101de6102983660046112be565b610782565b6102b06102ab3660046112be565b6107e5565b60405161ffff909116815260200161017c565b6101de6102d136600461147a565b610854565b6101706102e43660046112db565b61091e565b61019a600081565b6101de6102ff3660046112be565b610947565b6002546001600160a01b0316610226565b6101706103233660046112be565b610a08565b6101de6103363660046112db565b610b13565b61019a60008051602061198d83398151915281565b61022661035e3660046112be565b610b38565b6003546001600160a01b0316610226565b60006001600160e01b03198216637965db0b60e01b14806103a557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008051602061198d8339815191526103c381610ba7565b600380546001600160a01b0319166001600160a01b0384169081179091556040517f2fa8b95c1db7afe99e3398f3792f008135cedc1fa26b0bb2ecd2352cd166d53c90600090a25050565b60008281526020819052604090206001015461042981610ba7565b6104338383610bb4565b505050565b6001600160a01b03811633146104ad5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6104b78282610c38565b5050565b6000805160206119ad8339815191526104d381610ba7565b600354604051639f3418d560e01b81526001600160a01b03858116600483015261ffff8516602483015290911690639f3418d590604401600060405180830381600087803b15801561052457600080fd5b505af1158015610538573d6000803e3d6000fd5b505060405161ffff851692506001600160a01b03861691507f04ed3b726495c2dca1ff1215d9ca54e1a4030abb5e82b0f6ce55702416cee85390600090a3505050565b6000805160206119ad83398151915261059381610ba7565b61059e848484610c9d565b50505050565b6000806105b083610b38565b6001600160a01b0316146105c55760016103a5565b600092915050565b6000805160206119ad8339815191526105e581610ba7565b858481146106355760405162461bcd60e51b815260206004820152601d60248201527f4552432d333634333a2041727261792073697a65206d69736d6174636800000060448201526064016104a4565b8083146106845760405162461bcd60e51b815260206004820152601d60248201527f4552432d333634333a2041727261792073697a65206d69736d6174636800000060448201526064016104a4565b60005b818110156107145761070c8989838181106106a4576106a46114a8565b90506020020160208101906106b991906112be565b8888848181106106cb576106cb6114a8565b90506020020160208101906106e091906112be565b8787858181106106f2576106f26114a8565b905060200201602081019061070791906114be565b610c9d565b600101610687565b505050505050505050565b60008051602061198d83398151915261073781610ba7565b600180546001600160a01b0319166001600160a01b0384169081179091556040517f7170bf15b246e880b2369cd7c67d057760d8a35149e8c64dde91efa22bcc76d090600090a25050565b60008051602061198d83398151915261079a81610ba7565b600280546001600160a01b0319166001600160a01b0384169081179091556040517f811d3016da8008875247af93af072ec7801e39d9f4c686fec82ab600d8e555e890600090a25050565b600354604051631c9f84ef60e21b81526001600160a01b038381166004830152600092169063727e13bc90602401602060405180830381865afa158015610830573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a591906114db565b6000805160206119ad83398151915261086c81610ba7565b600061087784610b38565b600354604051637402e7c360e11b81526001600160a01b038781166004830152868116602483015292935091169063e805cf8690604401600060405180830381600087803b1580156108c857600080fd5b505af11580156108dc573d6000803e3d6000fd5b50506040516001600160a01b038087169350841691507fe98082932c8056a0f514da9104e4a66bc2cbaef102ad59d90c4b24220ebf601090600090a350505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000805160206119ad83398151915261095f81610ba7565b600061096a83610b38565b60035460405163cf191bcd60e01b81526001600160a01b03868116600483015292935091169063cf191bcd90602401600060405180830381600087803b1580156109b357600080fd5b505af11580156109c7573d6000803e3d6000fd5b50506040516001600160a01b038085169350861691507f59d6590e225b81befe259af056324092801080acbb7feab310eb34678871f32790600090a3505050565b600080610a1483610b38565b90506001600160a01b038116610a2d5750600092915050565b600154604080516337c2758160e21b815290516000926001600160a01b03169163df09d60491600480830192869291908290030181865afa158015610a76573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a9e9190810190611563565b80519091506000819003610ab757506001949350505050565b60005b81811015610b0757610ae584848381518110610ad857610ad86114a8565b6020026020010151610d4b565b610af55750600095945050505050565b80610aff8161160f565b915050610aba565b50600195945050505050565b600082815260208190526040902060010154610b2e81610ba7565b6104338383610c38565b600354604051637988d3a560e01b81526001600160a01b0383811660048301526000921690637988d3a590602401602060405180830381865afa158015610b83573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a59190611628565b610bb18133610fd2565b50565b610bbe828261091e565b6104b7576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610bf43390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610c42828261091e565b156104b7576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60035460405163a53410dd60e01b81526001600160a01b038581166004830152848116602483015261ffff841660448301529091169063a53410dd90606401600060405180830381600087803b158015610cf657600080fd5b505af1158015610d0a573d6000803e3d6000fd5b50506040516001600160a01b038086169350861691507f6ae73635c50d24a45af6fbd5e016ac4bed179addbc8bf24e04ff0fcc6d33af1990600090a3505050565b600254604051636b2c56bd60e01b81526004810183905260009182916001600160a01b0390911690636b2c56bd90602401600060405180830381865afa158015610d99573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dc19190810190611645565b80519091506000819003610dda576000925050506103a5565b60008167ffffffffffffffff811115610df557610df56114f8565b604051908082528060200260200182016040528015610e1e578160200160208202803683370190505b50905060005b82811015610eb157838181518110610e3e57610e3e6114a8565b602002602001015186604051602001610e6c9291906001600160a01b03929092168252602082015260400190565b60405160208183030381529060405280519060200120828281518110610e9457610e946114a8565b602090810291909101015280610ea98161160f565b915050610e24565b5060005b8151811015610fc5576000806000808a6001600160a01b031663c9100bcb878781518110610ee557610ee56114a8565b60200260200101516040518263ffffffff1660e01b8152600401610f0b91815260200190565b600060405180830381865afa158015610f28573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f509190810190611767565b50945094509450509350898403610f8957610f6e8b848c858561102b565b15610f84576001985050505050505050506103a5565b610fae565b60018651610f979190611829565b8503610fae576000985050505050505050506103a5565b505050508080610fbd9061160f565b915050610eb5565b5060009695505050505050565b610fdc828261091e565b6104b757610fe9816110b1565b610ff48360206110c3565b60405160200161100592919061183c565b60408051601f198184030181529082905262461bcd60e51b82526104a4916004016118dd565b60405163604b4d3760e11b81526000906001600160a01b0386169063c0969a6e906110609089908890889088906004016118f0565b602060405180830381865afa925050508015611099575060408051601f3d908101601f1916820190925261109691810190611929565b60015b6110a5575060006110a8565b90505b95945050505050565b60606103a56001600160a01b03831660145b606060006110d283600261194b565b6110dd906002611962565b67ffffffffffffffff8111156110f5576110f56114f8565b6040519080825280601f01601f19166020018201604052801561111f576020820181803683370190505b509050600360fc1b8160008151811061113a5761113a6114a8565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611169576111696114a8565b60200101906001600160f81b031916908160001a905350600061118d84600261194b565b611198906001611962565b90505b6001811115611210576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106111cc576111cc6114a8565b1a60f81b8282815181106111e2576111e26114a8565b60200101906001600160f81b031916908160001a90535060049490941c9361120981611975565b905061119b565b50831561125f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104a4565b9392505050565b60006020828403121561127857600080fd5b81356001600160e01b03198116811461125f57600080fd5b6000602082840312156112a257600080fd5b5035919050565b6001600160a01b0381168114610bb157600080fd5b6000602082840312156112d057600080fd5b813561125f816112a9565b600080604083850312156112ee57600080fd5b823591506020830135611300816112a9565b809150509250929050565b61ffff81168114610bb157600080fd5b6000806040838503121561132e57600080fd5b8235611339816112a9565b915060208301356113008161130b565b60008060006060848603121561135e57600080fd5b8335611369816112a9565b92506020840135611379816112a9565b915060408401356113898161130b565b809150509250925092565b60008083601f8401126113a657600080fd5b50813567ffffffffffffffff8111156113be57600080fd5b6020830191508360208260051b85010111156113d957600080fd5b9250929050565b600080600080600080606087890312156113f957600080fd5b863567ffffffffffffffff8082111561141157600080fd5b61141d8a838b01611394565b9098509650602089013591508082111561143657600080fd5b6114428a838b01611394565b9096509450604089013591508082111561145b57600080fd5b5061146889828a01611394565b979a9699509497509295939492505050565b6000806040838503121561148d57600080fd5b8235611498816112a9565b91506020830135611300816112a9565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156114d057600080fd5b813561125f8161130b565b6000602082840312156114ed57600080fd5b815161125f8161130b565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611537576115376114f8565b604052919050565b600067ffffffffffffffff821115611559576115596114f8565b5060051b60200190565b6000602080838503121561157657600080fd5b825167ffffffffffffffff81111561158d57600080fd5b8301601f8101851361159e57600080fd5b80516115b16115ac8261153f565b61150e565b81815260059190911b820183019083810190878311156115d057600080fd5b928401925b828410156115ee578351825292840192908401906115d5565b979650505050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201611621576116216115f9565b5060010190565b60006020828403121561163a57600080fd5b815161125f816112a9565b6000602080838503121561165857600080fd5b825167ffffffffffffffff81111561166f57600080fd5b8301601f8101851361168057600080fd5b805161168e6115ac8261153f565b81815260059190911b820183019083810190878311156116ad57600080fd5b928401925b828410156115ee5783516116c5816112a9565b825292840192908401906116b2565b60005b838110156116ef5781810151838201526020016116d7565b50506000910152565b600067ffffffffffffffff831115611712576117126114f8565b611725601f8401601f191660200161150e565b905082815283838301111561173957600080fd5b61125f8360208301846116d4565b600082601f83011261175857600080fd5b61125f838351602085016116f8565b60008060008060008060c0878903121561178057600080fd5b86519550602087015194506040870151611799816112a9565b606088015190945067ffffffffffffffff808211156117b757600080fd5b6117c38a838b01611747565b945060808901519150808211156117d957600080fd5b6117e58a838b01611747565b935060a08901519150808211156117fb57600080fd5b508701601f8101891361180d57600080fd5b61181c898251602084016116f8565b9150509295509295509295565b818103818111156103a5576103a56115f9565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516118748160178501602088016116d4565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516118a58160288401602088016116d4565b01602801949350505050565b600081518084526118c98160208601602086016116d4565b601f01601f19169290920160200192915050565b60208152600061125f60208301846118b1565b60018060a01b038516815283602082015260806040820152600061191760808301856118b1565b82810360608401526115ee81856118b1565b60006020828403121561193b57600080fd5b8151801515811461125f57600080fd5b80820281158282048414176103a5576103a56115f9565b808201808211156103a5576103a56115f9565b600081611984576119846115f9565b50600019019056feb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214ecab5a0bfe0b79d2c4b1c2e02599fa044d115b7511f9659307cb4276950967709a2646970667358221220a5c57760335ab62784ffc563df8c459605fee09543e50249205158e27f2aa0ab64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c80636bc72c90116100c3578063b4f3fcb71161007c578063b4f3fcb714610304578063b9209e3314610315578063d547741f14610328578063e58378bb1461033b578063f0eb5e5414610350578063f11abfd81461036357600080fd5b80636bc72c901461028a5780637e42683b1461029d5780638e098ca1146102c357806391d14854146102d6578063a217fddf146102e9578063a8d29d1d146102f157600080fd5b80633b239a7f116101155780633b239a7f146102065780633b3e12f414610219578063454a03e01461023e5780635dbe47e814610251578063653dc9f114610264578063670af6a91461027757600080fd5b806301ffc9a71461015d57806322459e1814610185578063248a9ca3146101a857806326d941ae146101cb5780632f2ff15d146101e057806336568abe146101f3575b600080fd5b61017061016b366004611266565b610374565b60405190151581526020015b60405180910390f35b61019a6000805160206119ad83398151915281565b60405190815260200161017c565b61019a6101b6366004611290565b60009081526020819052604090206001015490565b6101de6101d93660046112be565b6103ab565b005b6101de6101ee3660046112db565b61040e565b6101de6102013660046112db565b610438565b6101de61021436600461131b565b6104bb565b6001546001600160a01b03165b6040516001600160a01b03909116815260200161017c565b6101de61024c366004611349565b61057b565b61017061025f3660046112be565b6105a4565b6101de6102723660046113e0565b6105cd565b6101de6102853660046112be565b61071f565b6101de6102983660046112be565b610782565b6102b06102ab3660046112be565b6107e5565b60405161ffff909116815260200161017c565b6101de6102d136600461147a565b610854565b6101706102e43660046112db565b61091e565b61019a600081565b6101de6102ff3660046112be565b610947565b6002546001600160a01b0316610226565b6101706103233660046112be565b610a08565b6101de6103363660046112db565b610b13565b61019a60008051602061198d83398151915281565b61022661035e3660046112be565b610b38565b6003546001600160a01b0316610226565b60006001600160e01b03198216637965db0b60e01b14806103a557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008051602061198d8339815191526103c381610ba7565b600380546001600160a01b0319166001600160a01b0384169081179091556040517f2fa8b95c1db7afe99e3398f3792f008135cedc1fa26b0bb2ecd2352cd166d53c90600090a25050565b60008281526020819052604090206001015461042981610ba7565b6104338383610bb4565b505050565b6001600160a01b03811633146104ad5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6104b78282610c38565b5050565b6000805160206119ad8339815191526104d381610ba7565b600354604051639f3418d560e01b81526001600160a01b03858116600483015261ffff8516602483015290911690639f3418d590604401600060405180830381600087803b15801561052457600080fd5b505af1158015610538573d6000803e3d6000fd5b505060405161ffff851692506001600160a01b03861691507f04ed3b726495c2dca1ff1215d9ca54e1a4030abb5e82b0f6ce55702416cee85390600090a3505050565b6000805160206119ad83398151915261059381610ba7565b61059e848484610c9d565b50505050565b6000806105b083610b38565b6001600160a01b0316146105c55760016103a5565b600092915050565b6000805160206119ad8339815191526105e581610ba7565b858481146106355760405162461bcd60e51b815260206004820152601d60248201527f4552432d333634333a2041727261792073697a65206d69736d6174636800000060448201526064016104a4565b8083146106845760405162461bcd60e51b815260206004820152601d60248201527f4552432d333634333a2041727261792073697a65206d69736d6174636800000060448201526064016104a4565b60005b818110156107145761070c8989838181106106a4576106a46114a8565b90506020020160208101906106b991906112be565b8888848181106106cb576106cb6114a8565b90506020020160208101906106e091906112be565b8787858181106106f2576106f26114a8565b905060200201602081019061070791906114be565b610c9d565b600101610687565b505050505050505050565b60008051602061198d83398151915261073781610ba7565b600180546001600160a01b0319166001600160a01b0384169081179091556040517f7170bf15b246e880b2369cd7c67d057760d8a35149e8c64dde91efa22bcc76d090600090a25050565b60008051602061198d83398151915261079a81610ba7565b600280546001600160a01b0319166001600160a01b0384169081179091556040517f811d3016da8008875247af93af072ec7801e39d9f4c686fec82ab600d8e555e890600090a25050565b600354604051631c9f84ef60e21b81526001600160a01b038381166004830152600092169063727e13bc90602401602060405180830381865afa158015610830573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a591906114db565b6000805160206119ad83398151915261086c81610ba7565b600061087784610b38565b600354604051637402e7c360e11b81526001600160a01b038781166004830152868116602483015292935091169063e805cf8690604401600060405180830381600087803b1580156108c857600080fd5b505af11580156108dc573d6000803e3d6000fd5b50506040516001600160a01b038087169350841691507fe98082932c8056a0f514da9104e4a66bc2cbaef102ad59d90c4b24220ebf601090600090a350505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000805160206119ad83398151915261095f81610ba7565b600061096a83610b38565b60035460405163cf191bcd60e01b81526001600160a01b03868116600483015292935091169063cf191bcd90602401600060405180830381600087803b1580156109b357600080fd5b505af11580156109c7573d6000803e3d6000fd5b50506040516001600160a01b038085169350861691507f59d6590e225b81befe259af056324092801080acbb7feab310eb34678871f32790600090a3505050565b600080610a1483610b38565b90506001600160a01b038116610a2d5750600092915050565b600154604080516337c2758160e21b815290516000926001600160a01b03169163df09d60491600480830192869291908290030181865afa158015610a76573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a9e9190810190611563565b80519091506000819003610ab757506001949350505050565b60005b81811015610b0757610ae584848381518110610ad857610ad86114a8565b6020026020010151610d4b565b610af55750600095945050505050565b80610aff8161160f565b915050610aba565b50600195945050505050565b600082815260208190526040902060010154610b2e81610ba7565b6104338383610c38565b600354604051637988d3a560e01b81526001600160a01b0383811660048301526000921690637988d3a590602401602060405180830381865afa158015610b83573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a59190611628565b610bb18133610fd2565b50565b610bbe828261091e565b6104b7576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610bf43390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610c42828261091e565b156104b7576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60035460405163a53410dd60e01b81526001600160a01b038581166004830152848116602483015261ffff841660448301529091169063a53410dd90606401600060405180830381600087803b158015610cf657600080fd5b505af1158015610d0a573d6000803e3d6000fd5b50506040516001600160a01b038086169350861691507f6ae73635c50d24a45af6fbd5e016ac4bed179addbc8bf24e04ff0fcc6d33af1990600090a3505050565b600254604051636b2c56bd60e01b81526004810183905260009182916001600160a01b0390911690636b2c56bd90602401600060405180830381865afa158015610d99573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dc19190810190611645565b80519091506000819003610dda576000925050506103a5565b60008167ffffffffffffffff811115610df557610df56114f8565b604051908082528060200260200182016040528015610e1e578160200160208202803683370190505b50905060005b82811015610eb157838181518110610e3e57610e3e6114a8565b602002602001015186604051602001610e6c9291906001600160a01b03929092168252602082015260400190565b60405160208183030381529060405280519060200120828281518110610e9457610e946114a8565b602090810291909101015280610ea98161160f565b915050610e24565b5060005b8151811015610fc5576000806000808a6001600160a01b031663c9100bcb878781518110610ee557610ee56114a8565b60200260200101516040518263ffffffff1660e01b8152600401610f0b91815260200190565b600060405180830381865afa158015610f28573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f509190810190611767565b50945094509450509350898403610f8957610f6e8b848c858561102b565b15610f84576001985050505050505050506103a5565b610fae565b60018651610f979190611829565b8503610fae576000985050505050505050506103a5565b505050508080610fbd9061160f565b915050610eb5565b5060009695505050505050565b610fdc828261091e565b6104b757610fe9816110b1565b610ff48360206110c3565b60405160200161100592919061183c565b60408051601f198184030181529082905262461bcd60e51b82526104a4916004016118dd565b60405163604b4d3760e11b81526000906001600160a01b0386169063c0969a6e906110609089908890889088906004016118f0565b602060405180830381865afa925050508015611099575060408051601f3d908101601f1916820190925261109691810190611929565b60015b6110a5575060006110a8565b90505b95945050505050565b60606103a56001600160a01b03831660145b606060006110d283600261194b565b6110dd906002611962565b67ffffffffffffffff8111156110f5576110f56114f8565b6040519080825280601f01601f19166020018201604052801561111f576020820181803683370190505b509050600360fc1b8160008151811061113a5761113a6114a8565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611169576111696114a8565b60200101906001600160f81b031916908160001a905350600061118d84600261194b565b611198906001611962565b90505b6001811115611210576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106111cc576111cc6114a8565b1a60f81b8282815181106111e2576111e26114a8565b60200101906001600160f81b031916908160001a90535060049490941c9361120981611975565b905061119b565b50831561125f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104a4565b9392505050565b60006020828403121561127857600080fd5b81356001600160e01b03198116811461125f57600080fd5b6000602082840312156112a257600080fd5b5035919050565b6001600160a01b0381168114610bb157600080fd5b6000602082840312156112d057600080fd5b813561125f816112a9565b600080604083850312156112ee57600080fd5b823591506020830135611300816112a9565b809150509250929050565b61ffff81168114610bb157600080fd5b6000806040838503121561132e57600080fd5b8235611339816112a9565b915060208301356113008161130b565b60008060006060848603121561135e57600080fd5b8335611369816112a9565b92506020840135611379816112a9565b915060408401356113898161130b565b809150509250925092565b60008083601f8401126113a657600080fd5b50813567ffffffffffffffff8111156113be57600080fd5b6020830191508360208260051b85010111156113d957600080fd5b9250929050565b600080600080600080606087890312156113f957600080fd5b863567ffffffffffffffff8082111561141157600080fd5b61141d8a838b01611394565b9098509650602089013591508082111561143657600080fd5b6114428a838b01611394565b9096509450604089013591508082111561145b57600080fd5b5061146889828a01611394565b979a9699509497509295939492505050565b6000806040838503121561148d57600080fd5b8235611498816112a9565b91506020830135611300816112a9565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156114d057600080fd5b813561125f8161130b565b6000602082840312156114ed57600080fd5b815161125f8161130b565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611537576115376114f8565b604052919050565b600067ffffffffffffffff821115611559576115596114f8565b5060051b60200190565b6000602080838503121561157657600080fd5b825167ffffffffffffffff81111561158d57600080fd5b8301601f8101851361159e57600080fd5b80516115b16115ac8261153f565b61150e565b81815260059190911b820183019083810190878311156115d057600080fd5b928401925b828410156115ee578351825292840192908401906115d5565b979650505050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201611621576116216115f9565b5060010190565b60006020828403121561163a57600080fd5b815161125f816112a9565b6000602080838503121561165857600080fd5b825167ffffffffffffffff81111561166f57600080fd5b8301601f8101851361168057600080fd5b805161168e6115ac8261153f565b81815260059190911b820183019083810190878311156116ad57600080fd5b928401925b828410156115ee5783516116c5816112a9565b825292840192908401906116b2565b60005b838110156116ef5781810151838201526020016116d7565b50506000910152565b600067ffffffffffffffff831115611712576117126114f8565b611725601f8401601f191660200161150e565b905082815283838301111561173957600080fd5b61125f8360208301846116d4565b600082601f83011261175857600080fd5b61125f838351602085016116f8565b60008060008060008060c0878903121561178057600080fd5b86519550602087015194506040870151611799816112a9565b606088015190945067ffffffffffffffff808211156117b757600080fd5b6117c38a838b01611747565b945060808901519150808211156117d957600080fd5b6117e58a838b01611747565b935060a08901519150808211156117fb57600080fd5b508701601f8101891361180d57600080fd5b61181c898251602084016116f8565b9150509295509295509295565b818103818111156103a5576103a56115f9565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516118748160178501602088016116d4565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516118a58160288401602088016116d4565b01602801949350505050565b600081518084526118c98160208601602086016116d4565b601f01601f19169290920160200192915050565b60208152600061125f60208301846118b1565b60018060a01b038516815283602082015260806040820152600061191760808301856118b1565b82810360608401526115ee81856118b1565b60006020828403121561193b57600080fd5b8151801515811461125f57600080fd5b80820281158282048414176103a5576103a56115f9565b808201808211156103a5576103a56115f9565b600081611984576119846115f9565b50600019019056feb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214ecab5a0bfe0b79d2c4b1c2e02599fa044d115b7511f9659307cb4276950967709a2646970667358221220a5c57760335ab62784ffc563df8c459605fee09543e50249205158e27f2aa0ab64736f6c63430008110033",
  "devdoc": {
    "details": "This contract is used to manage identities in the ERC-3643 standard. It allows for the registration, updating and deletion of identities associated with user addresses. It also supports the management of claim topics and claim issuers.",
    "kind": "dev",
    "methods": {
      "batchRegisterIdentity(address[],address[],uint16[])": {
        "details": "Only an agent can register identities in batch.",
        "params": {
          "_countries": "The array of country codes.",
          "_identities": "The array of identities.",
          "_userAddresses": "The array of user addresses."
        }
      },
      "constructor": {
        "details": "Constructor of the IdentityRegistry contract.",
        "params": {
          "_claimIssuersRegistry": "The address of the claim issuers registry contract.",
          "_claimTopicsRegistry": "The address of the claim topics registry contract.",
          "_identityStorage": "The address of the identity registry storage contract."
        }
      },
      "contains(address)": {
        "params": {
          "_userAddress": "The address to check."
        },
        "returns": {
          "_0": "A boolean indicating if the address is in the registry."
        }
      },
      "deleteIdentity(address)": {
        "details": "Only an agent can delete an identity.",
        "params": {
          "_userAddress": "The address of the user."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "identity(address)": {
        "params": {
          "_userAddress": "The address of the user."
        },
        "returns": {
          "_0": "The identity of the user."
        }
      },
      "identityStorage()": {
        "returns": {
          "_0": "The current identity storage."
        }
      },
      "investorCountry(address)": {
        "params": {
          "_userAddress": "The address of the investor."
        },
        "returns": {
          "_0": "The country of the investor."
        }
      },
      "isVerified(address)": {
        "params": {
          "_userAddress": "The address of the user to check."
        },
        "returns": {
          "_0": "A boolean indicating if the user is verified."
        }
      },
      "issuersRegistry()": {
        "returns": {
          "_0": "The current issuers registry."
        }
      },
      "registerIdentity(address,address,uint16)": {
        "details": "Only an agent can register an identity.",
        "params": {
          "_country": "The country code of the user.",
          "_identity": "The identity of the user.",
          "_userAddress": "The address of the user."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setClaimIssuersRegistry(address)": {
        "details": "Only the owner can set the ClaimIssuersRegistry contract.",
        "params": {
          "_claimIssuersRegistry": "The address of the new ClaimIssuersRegistry contract."
        }
      },
      "setClaimTopicsRegistry(address)": {
        "details": "Only the owner can set the ClaimTopicsRegistry contract.",
        "params": {
          "_claimTopicsRegistry": "The address of the new ClaimTopicsRegistry contract."
        }
      },
      "setIdentityRegistryStorage(address)": {
        "details": "Only the owner can set the IdentityRegistryStorage contract.",
        "params": {
          "_identityRegistryStorage": "The address of the new IdentityRegistryStorage contract."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "topicsRegistry()": {
        "returns": {
          "_0": "The current topics registry."
        }
      },
      "updateCountry(address,uint16)": {
        "details": "Only an agent can update a country code.",
        "params": {
          "_country": "The new country code of the user.",
          "_userAddress": "The address of the user."
        }
      },
      "updateIdentity(address,address)": {
        "details": "Only an agent can update an identity.",
        "params": {
          "_identity": "The new identity of the user.",
          "_userAddress": "The address of the user."
        }
      }
    },
    "title": "ERC-3643 - IdentityRegistry",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ClaimIssuersRegistrySet(address)": {
        "notice": "this event is emitted when the ClaimIssuersRegistry has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `claimIssuersRegistry` is the address of the Claim Issuers Registry contract"
      },
      "ClaimTopicsRegistrySet(address)": {
        "notice": "this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `claimTopicsRegistry` is the address of the Claim Topics Registry contract"
      },
      "CountryUpdated(address,uint16)": {
        "notice": "this event is emitted when an Identity's country has been updated  the event is emitted by the 'updateCountry' function  `investorAddress` is the address on which the country has been updated  `country` is the numeric code (ISO 3166-1) of the new country"
      },
      "IdentityRegistered(address,address)": {
        "notice": "this event is emitted when an Identity is registered into the Identity Registry.  the event is emitted by the 'registerIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)"
      },
      "IdentityRemoved(address,address)": {
        "notice": "this event is emitted when an Identity is removed from the Identity Registry.  the event is emitted by the 'deleteIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)"
      },
      "IdentityStorageSet(address)": {
        "notice": "this event is emitted when the IdentityRegistryStorage has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `identityStorage` is the address of the Identity Registry Storage contract"
      },
      "IdentityUpdated(address,address)": {
        "notice": "this event is emitted when an Identity has been updated  the event is emitted by the 'updateIdentity' function  `oldIdentity` is the old Identity contract's address to update  `newIdentity` is the new Identity contract's"
      }
    },
    "kind": "user",
    "methods": {
      "batchRegisterIdentity(address[],address[],uint16[])": {
        "notice": "Register multiple identities associated with multiple user addresses."
      },
      "constructor": {
        "notice": "This constructor sets the initial state of the IdentityRegistry contract."
      },
      "contains(address)": {
        "notice": "Check if an address is contained in the registry."
      },
      "deleteIdentity(address)": {
        "notice": "Delete the identity associated with a user address."
      },
      "identity(address)": {
        "notice": "Get the identity of a user."
      },
      "identityStorage()": {
        "notice": "Get the identity storage."
      },
      "investorCountry(address)": {
        "notice": "Get the country of an investor."
      },
      "isVerified(address)": {
        "notice": "Checks if a user is verified based on their identity, claim topics, and claim issuers."
      },
      "issuersRegistry()": {
        "notice": "Get the issuers registry."
      },
      "registerIdentity(address,address,uint16)": {
        "notice": "Register an identity associated with a user address."
      },
      "setClaimIssuersRegistry(address)": {
        "notice": "Set the ClaimIssuersRegistry contract."
      },
      "setClaimTopicsRegistry(address)": {
        "notice": "Set the ClaimTopicsRegistry contract."
      },
      "setIdentityRegistryStorage(address)": {
        "notice": "Set the IdentityRegistryStorage contract."
      },
      "topicsRegistry()": {
        "notice": "Get the topics registry."
      },
      "updateCountry(address,uint16)": {
        "notice": "Update the country code associated with a user address."
      },
      "updateIdentity(address,address)": {
        "notice": "Update the identity associated with a user address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 354,
        "contract": "contracts/registry/IdentityRegistry.sol:IdentityRegistry",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)349_storage)"
      },
      {
        "astId": 2651,
        "contract": "contracts/registry/IdentityRegistry.sol:IdentityRegistry",
        "label": "_tokenTopicsRegistry",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IClaimTopicsRegistry)3967"
      },
      {
        "astId": 2655,
        "contract": "contracts/registry/IdentityRegistry.sol:IdentityRegistry",
        "label": "_tokenIssuersRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IClaimIssuersRegistry)3935"
      },
      {
        "astId": 2659,
        "contract": "contracts/registry/IdentityRegistry.sol:IdentityRegistry",
        "label": "_tokenIdentityStorage",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IIdentityRegistryStorage)4264"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IClaimIssuersRegistry)3935": {
        "encoding": "inplace",
        "label": "contract IClaimIssuersRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IClaimTopicsRegistry)3967": {
        "encoding": "inplace",
        "label": "contract IClaimTopicsRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IIdentityRegistryStorage)4264": {
        "encoding": "inplace",
        "label": "contract IIdentityRegistryStorage",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)349_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)349_storage"
      },
      "t_struct(RoleData)349_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 346,
            "contract": "contracts/registry/IdentityRegistry.sol:IdentityRegistry",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 348,
            "contract": "contracts/registry/IdentityRegistry.sol:IdentityRegistry",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}